float findFrequency(float *samples, int nsamp)
{
   uint32_t i, n, j, maxIndex;
   float avg, dev, note, maxVal;
   float input[nsamp], output1[nsamp*2], output2[nsamp];

 //this will also keep track of how many blocks collected
 //since decimating we will need #D blocks until FFT is full

 arm_correlate_f32(input, nsamp, input, nsamp, output1);
//arm_rfft_fast_f32(&fftStruct, input, output1, 0);
  arm_mean_f32(output1, nsamp*2, &avg);




/* subtract mean */
for(i=0; i<nsamp*2; i++){
  //output1[i] *= 10;
  output1[i] -= avg;

  /*zero out negative correlations */
  //if(output1[i]<0) output1[i] = 0;
}


   arm_max_f32(output1, nsamp*2, &maxVal, &maxIndex);


/* normalize */
   for(i=0; i<nsamp*2; i++){
     output1[i] /= maxVal;
   }



   /* set origin of autocorre to be max peak */
   for(i=0; i<nsamp; i++){
     output2[i] = output1[maxIndex+i];
}

/*find std deviation and mean of normalized signal */
 arm_mean_f32(output2, nsamp, &avg);
 arm_std_f32(output2, nsamp, &dev);



/* eliminate non dominant peaks */
 for(i=0; i<nsamp; i++){
  if ((output2[i] < avg + (2*dev))) output2[i] = 0;
 }


/* peak detection */
   for(i = 1; i<nsamp-1; i++ ){

      if(((output2[i] - output2[i-1])>0) && ((output2[i+1]-output2[i])<0)){
        n = i;
        break;
      }

      else if((output2[i] - output2[i-1])>0) continue;

      else if((output2[i+1] - output2[i]) < 0) continue;
   }

   note = 10000.0/((float) n);



//arm_cmplx_mag_squared_f32(output1, output2, 512);

 //arm_rfft_fast_f32(fftStruct, output2, output3, 1);





  printf("%f\n\r", note);


}
