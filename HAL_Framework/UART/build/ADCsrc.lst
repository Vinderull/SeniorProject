ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"ADCsrc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ADC1_Wakeup,"ax",%progbits
  21              		.align	2
  22              		.global	ADC1_Wakeup
  23              		.thumb
  24              		.thumb_func
  26              	ADC1_Wakeup:
  27              	.LFB157:
  28              		.file 1 "Src/ADCsrc.c"
   1:Src/ADCsrc.c  **** ///big source file
   2:Src/ADCsrc.c  **** 
   3:Src/ADCsrc.c  **** #include "ADCsrc.h"
   4:Src/ADCsrc.c  **** #include "stm32l476xx.h"
   5:Src/ADCsrc.c  **** #include "arm_math.h"
   6:Src/ADCsrc.c  **** 
   7:Src/ADCsrc.c  **** 
   8:Src/ADCsrc.c  **** ///ADC1 Initialization
   9:Src/ADCsrc.c  **** /// NOTE: ADC needs HSI
  10:Src/ADCsrc.c  **** 
  11:Src/ADCsrc.c  **** void ADC1_Init(void)
  12:Src/ADCsrc.c  **** {
  13:Src/ADCsrc.c  ****   /*Enable clock to ADC */
  14:Src/ADCsrc.c  ****   RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
  15:Src/ADCsrc.c  **** 
  16:Src/ADCsrc.c  ****   /*disable ADC1 by clearing */
  17:Src/ADCsrc.c  ****   ADC1->CR &= ~ADC_CR_ADEN;
  18:Src/ADCsrc.c  **** 
  19:Src/ADCsrc.c  **** 
  20:Src/ADCsrc.c  ****   /*Enable I/O analog switches voltage booster */
  21:Src/ADCsrc.c  ****   ADC123_COMMON->CCR |= SYSCFG_CFGR1_BOOSTEN;
  22:Src/ADCsrc.c  **** 
  23:Src/ADCsrc.c  ****   /*Enable conversion of internal channels */
  24:Src/ADCsrc.c  ****   ADC123_COMMON->CCR |= ADC_CCR_VREFEN;
  25:Src/ADCsrc.c  **** 
  26:Src/ADCsrc.c  ****   /*Configure ADC prescalar to select ADC clock frequency */
  27:Src/ADCsrc.c  **** /*The clock is common for all the ADCs.
  28:Src/ADCsrc.c  **** 0000: input ADC clock not divided
  29:Src/ADCsrc.c  **** 0001: input ADC clock divided by 2
  30:Src/ADCsrc.c  **** 0010: input ADC clock divided by 4
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 2


  31:Src/ADCsrc.c  **** 0011: input ADC clock divided by 6
  32:Src/ADCsrc.c  **** 0100: input ADC clock divided by 8
  33:Src/ADCsrc.c  **** 0101: input ADC clock divided by 10
  34:Src/ADCsrc.c  **** 0110: input ADC clock divided by 12
  35:Src/ADCsrc.c  **** 0111: input ADC clock divided by 16
  36:Src/ADCsrc.c  **** 1000: input ADC clock divided by 32
  37:Src/ADCsrc.c  **** 1001: input ADC clock divided by 64
  38:Src/ADCsrc.c  **** 1010: input ADC clock divided by 128
  39:Src/ADCsrc.c  **** 1011: input ADC clock divided by 256
  40:Src/ADCsrc.c  **** */
  41:Src/ADCsrc.c  ****   ADC123_COMMON->CCR &= ~ADC_CCR_PRESC;
  42:Src/ADCsrc.c  **** 
  43:Src/ADCsrc.c  ****   /*configure ADC clock to be synchonous HCLK/1 */
  44:Src/ADCsrc.c  **** /*
  45:Src/ADCsrc.c  **** 00: CK_ADCx (x=123) (Asynchronous clock mode), generated at product level (refer to
  46:Src/ADCsrc.c  **** Section 6: Reset and clock control (RCC))
  47:Src/ADCsrc.c  **** 01: HCLK/1 (Synchronous clock mode). This configuration must be enabled only if the AHB
  48:Src/ADCsrc.c  **** clock prescaler is set to 1 (HPRE[3:0] = 0xxx in RCC_CFGR register) and if the system clock
  49:Src/ADCsrc.c  **** has a 50% duty cycle.
  50:Src/ADCsrc.c  **** 10: HCLK/2 (Synchronous clock mode)
  51:Src/ADCsrc.c  **** 11: HCLK/4 (Synchronous clock mode)
  52:Src/ADCsrc.c  **** */
  53:Src/ADCsrc.c  ****   ADC123_COMMON->CCR &= ~ADC_CCR_CKMODE;
  54:Src/ADCsrc.c  ****   ADC123_COMMON->CCR |= ADC_CCR_CKMODE_0;
  55:Src/ADCsrc.c  **** 
  56:Src/ADCsrc.c  ****   /*Configure all ADCs as independent mode */
  57:Src/ADCsrc.c  ****   ADC123_COMMON->CCR &= ~ADC_CCR_DUAL;
  58:Src/ADCsrc.c  **** 
  59:Src/ADCsrc.c  ****   /*Wait for ADC come out of deep-power-down mode */
  60:Src/ADCsrc.c  ****   ADC1_Wakeup();
  61:Src/ADCsrc.c  **** 
  62:Src/ADCsrc.c  ****   /*Configure resoltion, 00= 12bit */
  63:Src/ADCsrc.c  ****   ADC1->CFGR &= ~ADC_CFGR_RES_0;
  64:Src/ADCsrc.c  ****   ADC1->CFGR &= ~ADC_CFGR_RES_1;
  65:Src/ADCsrc.c  **** 
  66:Src/ADCsrc.c  ****   /*Select right alignment */
  67:Src/ADCsrc.c  ****   ADC1->CFGR &= ~ADC_CFGR_ALIGN;
  68:Src/ADCsrc.c  **** 
  69:Src/ADCsrc.c  ****   /*Select nnumber of conversions */
  70:Src/ADCsrc.c  ****   ADC1->SQR1 &= ~(ADC_SQR1_L);
  71:Src/ADCsrc.c  **** 
  72:Src/ADCsrc.c  ****   //select channel 6 for conversions
  73:Src/ADCsrc.c  ****   ADC1->SQR1 |= ADC_SQR1_SQ1_2 | ADC_SQR1_SQ1_1;
  74:Src/ADCsrc.c  **** 
  75:Src/ADCsrc.c  ****   /*Configure channel 6 as single ended */
  76:Src/ADCsrc.c  ****   ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_6;
  77:Src/ADCsrc.c  **** 
  78:Src/ADCsrc.c  ****   /*Configure sample time, needs to be long enough for cap of */
  79:Src/ADCsrc.c  ****   /* sample and hold circuit to be charged */
  80:Src/ADCsrc.c  ****   /*
  81:Src/ADCsrc.c  ****   //000: 2.5 ADC clock cycles
  82:Src/ADCsrc.c  ****   //001: 6.5 ADC clock cycles
  83:Src/ADCsrc.c  ****   //010: 12.5 ADC clock cycles
  84:Src/ADCsrc.c  ****   //011: 24.5 ADC clock cycles
  85:Src/ADCsrc.c  ****   //100: 47.5 ADC clock cycles
  86:Src/ADCsrc.c  ****   //101: 92.5 ADC clock cycles
  87:Src/ADCsrc.c  ****   //110: 247.5 ADC clock cycles
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 3


  88:Src/ADCsrc.c  ****   //111: 640.5 ADC clock cycles
  89:Src/ADCsrc.c  ****  */
  90:Src/ADCsrc.c  ****   ADC1->SMPR1 &= ~ADC_SMPR1_SMP6;
  91:Src/ADCsrc.c  ****   ADC1->SMPR1 |= ADC_SMPR1_SMP6_0 | ADC_SMPR1_SMP6_1 | ADC_SMPR1_SMP6_2;
  92:Src/ADCsrc.c  **** 
  93:Src/ADCsrc.c  ****   /*Set ADC in discontinuous mode */
  94:Src/ADCsrc.c  ****   // 0 = discontinuous
  95:Src/ADCsrc.c  ****   // 1 = continuous
  96:Src/ADCsrc.c  ****   ADC1->CFGR &= ~ADC_CFGR_CONT;
  97:Src/ADCsrc.c  ****   //ADC1->CFGR |= ADC_CFGR_CONT;
  98:Src/ADCsrc.c  **** 
  99:Src/ADCsrc.c  ****   // configure ADC for DMA in circular mode
 100:Src/ADCsrc.c  ****   ADC1->CFGR |= ADC_CFGR_DMACFG;
 101:Src/ADCsrc.c  ****   //DMA enable?
 102:Src/ADCsrc.c  ****   ADC1->CFGR |= ADC_CFGR_DMAEN;
 103:Src/ADCsrc.c  **** 
 104:Src/ADCsrc.c  ****   /* set overrun to overwrite */
 105:Src/ADCsrc.c  ****   ADC1->CFGR |= ADC_CFGR_OVRMOD;
 106:Src/ADCsrc.c  ****   //ADC1->CFGR &= ~ADC_CFGR_OVRMOD;
 107:Src/ADCsrc.c  **** 
 108:Src/ADCsrc.c  **** 
 109:Src/ADCsrc.c  **** 
 110:Src/ADCsrc.c  **** 
 111:Src/ADCsrc.c  ****     //select TIm4_TRGO
 112:Src/ADCsrc.c  ****     ADC1->CFGR &= ~ADC_CFGR_EXTSEL;
 113:Src/ADCsrc.c  ****     ADC1->CFGR |= ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2;
 114:Src/ADCsrc.c  **** 
 115:Src/ADCsrc.c  ****   /*Select software trigger */
 116:Src/ADCsrc.c  ****   //select rising edge of hardware triggers
 117:Src/ADCsrc.c  ****   // 00: software triggers
 118:Src/ADCsrc.c  ****   // 01: hardware trigger, rising edge
 119:Src/ADCsrc.c  ****   // 10 HW trig, falling edge
 120:Src/ADCsrc.c  ****   // 11:HW trigg, both
 121:Src/ADCsrc.c  ****   ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 122:Src/ADCsrc.c  ****   ADC1->CFGR |= ADC_CFGR_EXTEN_0;
 123:Src/ADCsrc.c  **** 
 124:Src/ADCsrc.c  ****   /*enable end of conversion flag */
 125:Src/ADCsrc.c  ****   // ADC1->IER |= ADC_IER_EOCIE;
 126:Src/ADCsrc.c  **** 
 127:Src/ADCsrc.c  ****   //set DMA interrupt priority
 128:Src/ADCsrc.c  ****   //NVIC_SetPriority(ADC1_2_IRQn, 0);
 129:Src/ADCsrc.c  **** 
 130:Src/ADCsrc.c  ****   //enable DMA INTERRUPT
 131:Src/ADCsrc.c  ****   //NVIC_EnableIRQ(ADC1_2_IRQn);
 132:Src/ADCsrc.c  ****   //trigger becomes immediately effective once software starts ADC
 133:Src/ADCsrc.c  ****   ADC1->CR |= ADC_CR_ADSTART;
 134:Src/ADCsrc.c  **** 
 135:Src/ADCsrc.c  ****   /*enable ADC1 */
 136:Src/ADCsrc.c  ****   ADC1->CR &= ~ADC_CR_ADEN;
 137:Src/ADCsrc.c  ****   ADC1->CR |= ADC_CR_ADEN;
 138:Src/ADCsrc.c  **** 
 139:Src/ADCsrc.c  ****   /*wait for ADC1 to be ready */
 140:Src/ADCsrc.c  ****   while(!(ADC1->ISR & ADC_ISR_ADRDY));
 141:Src/ADCsrc.c  **** }
 142:Src/ADCsrc.c  **** 
 143:Src/ADCsrc.c  **** 
 144:Src/ADCsrc.c  **** /* This ADC1_Wakeup wakes the ADC on the STM32L476 MCU*/
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 4


 145:Src/ADCsrc.c  **** 
 146:Src/ADCsrc.c  **** void ADC1_Wakeup(void){
  29              		.loc 1 146 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 147:Src/ADCsrc.c  ****   int wait_time = 0;
 148:Src/ADCsrc.c  ****   /*Start ADC operations: DEEPPWD = 0: ADC not in deep pwoer mode*/
 149:Src/ADCsrc.c  ****   /*DEEPPWD = 1: ADC in deep power mode (reset state) */
 150:Src/ADCsrc.c  ****   if ((ADC1->CR & ADC_CR_DEEPPWD) == ADC_CR_DEEPPWD){
  35              		.loc 1 150 0
  36 0000 0A4B     		ldr	r3, .L5
  37 0002 9B68     		ldr	r3, [r3, #8]
  38 0004 13F0005F 		tst	r3, #536870912
  39 0008 04D0     		beq	.L2
 151:Src/ADCsrc.c  ****     ADC1->CR &= ~ADC_CR_DEEPPWD;
  40              		.loc 1 151 0
  41 000a 084A     		ldr	r2, .L5
  42 000c 9368     		ldr	r3, [r2, #8]
  43 000e 23F00053 		bic	r3, r3, #536870912
  44 0012 9360     		str	r3, [r2, #8]
  45              	.L2:
 152:Src/ADCsrc.c  ****   }
 153:Src/ADCsrc.c  **** 
 154:Src/ADCsrc.c  ****   /* Enable the ADC voltage Regulator */
 155:Src/ADCsrc.c  ****   /* must enable before calibration of ADC, use software */
 156:Src/ADCsrc.c  ****   /* to wait for regulator startup time */
 157:Src/ADCsrc.c  ****   ADC1->CR |= ADC_CR_ADVREGEN;
  46              		.loc 1 157 0
  47 0014 054A     		ldr	r2, .L5
  48 0016 9368     		ldr	r3, [r2, #8]
  49 0018 43F08053 		orr	r3, r3, #268435456
  50 001c 9360     		str	r3, [r2, #8]
  51              	.LVL1:
 158:Src/ADCsrc.c  **** 
 159:Src/ADCsrc.c  ****   /* wait for ADC regulator */
 160:Src/ADCsrc.c  ****   wait_time = 20 * (80000000 / 100000);
  52              		.loc 1 160 0
  53 001e 4FF47A53 		mov	r3, #16000
 161:Src/ADCsrc.c  ****   while (wait_time != 0){
  54              		.loc 1 161 0
  55 0022 00E0     		b	.L3
  56              	.LVL2:
  57              	.L4:
 162:Src/ADCsrc.c  ****   wait_time--;
  58              		.loc 1 162 0
  59 0024 013B     		subs	r3, r3, #1
  60              	.LVL3:
  61              	.L3:
 161:Src/ADCsrc.c  ****   while (wait_time != 0){
  62              		.loc 1 161 0
  63 0026 002B     		cmp	r3, #0
  64 0028 FCD1     		bne	.L4
 163:Src/ADCsrc.c  ****   }
 164:Src/ADCsrc.c  **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 5


 165:Src/ADCsrc.c  **** }
  65              		.loc 1 165 0
  66 002a 7047     		bx	lr
  67              	.L6:
  68              		.align	2
  69              	.L5:
  70 002c 00000450 		.word	1342439424
  71              		.cfi_endproc
  72              	.LFE157:
  74              		.section	.text.ADC1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC1_Init
  77              		.thumb
  78              		.thumb_func
  80              	ADC1_Init:
  81              	.LFB156:
  12:Src/ADCsrc.c  ****   /*Enable clock to ADC */
  82              		.loc 1 12 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  14:Src/ADCsrc.c  **** 
  91              		.loc 1 14 0
  92 0002 3C4A     		ldr	r2, .L10
  93 0004 D36C     		ldr	r3, [r2, #76]
  94 0006 43F40053 		orr	r3, r3, #8192
  95 000a D364     		str	r3, [r2, #76]
  17:Src/ADCsrc.c  **** 
  96              		.loc 1 17 0
  97 000c 3A4C     		ldr	r4, .L10+4
  98 000e A368     		ldr	r3, [r4, #8]
  99 0010 23F00103 		bic	r3, r3, #1
 100 0014 A360     		str	r3, [r4, #8]
  21:Src/ADCsrc.c  **** 
 101              		.loc 1 21 0
 102 0016 394B     		ldr	r3, .L10+8
 103 0018 9A68     		ldr	r2, [r3, #8]
 104 001a 42F48072 		orr	r2, r2, #256
 105 001e 9A60     		str	r2, [r3, #8]
  24:Src/ADCsrc.c  **** 
 106              		.loc 1 24 0
 107 0020 9A68     		ldr	r2, [r3, #8]
 108 0022 42F48002 		orr	r2, r2, #4194304
 109 0026 9A60     		str	r2, [r3, #8]
  41:Src/ADCsrc.c  **** 
 110              		.loc 1 41 0
 111 0028 9A68     		ldr	r2, [r3, #8]
 112 002a 22F47012 		bic	r2, r2, #3932160
 113 002e 9A60     		str	r2, [r3, #8]
  53:Src/ADCsrc.c  ****   ADC123_COMMON->CCR |= ADC_CCR_CKMODE_0;
 114              		.loc 1 53 0
 115 0030 9A68     		ldr	r2, [r3, #8]
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 6


 116 0032 22F44032 		bic	r2, r2, #196608
 117 0036 9A60     		str	r2, [r3, #8]
  54:Src/ADCsrc.c  **** 
 118              		.loc 1 54 0
 119 0038 9A68     		ldr	r2, [r3, #8]
 120 003a 42F48032 		orr	r2, r2, #65536
 121 003e 9A60     		str	r2, [r3, #8]
  57:Src/ADCsrc.c  **** 
 122              		.loc 1 57 0
 123 0040 9A68     		ldr	r2, [r3, #8]
 124 0042 22F01F02 		bic	r2, r2, #31
 125 0046 9A60     		str	r2, [r3, #8]
  60:Src/ADCsrc.c  **** 
 126              		.loc 1 60 0
 127 0048 FFF7FEFF 		bl	ADC1_Wakeup
 128              	.LVL4:
  63:Src/ADCsrc.c  ****   ADC1->CFGR &= ~ADC_CFGR_RES_1;
 129              		.loc 1 63 0
 130 004c E368     		ldr	r3, [r4, #12]
 131 004e 23F00803 		bic	r3, r3, #8
 132 0052 E360     		str	r3, [r4, #12]
  64:Src/ADCsrc.c  **** 
 133              		.loc 1 64 0
 134 0054 E368     		ldr	r3, [r4, #12]
 135 0056 23F01003 		bic	r3, r3, #16
 136 005a E360     		str	r3, [r4, #12]
  67:Src/ADCsrc.c  **** 
 137              		.loc 1 67 0
 138 005c E368     		ldr	r3, [r4, #12]
 139 005e 23F02003 		bic	r3, r3, #32
 140 0062 E360     		str	r3, [r4, #12]
  70:Src/ADCsrc.c  **** 
 141              		.loc 1 70 0
 142 0064 236B     		ldr	r3, [r4, #48]
 143 0066 23F00F03 		bic	r3, r3, #15
 144 006a 2363     		str	r3, [r4, #48]
  73:Src/ADCsrc.c  **** 
 145              		.loc 1 73 0
 146 006c 236B     		ldr	r3, [r4, #48]
 147 006e 43F4C073 		orr	r3, r3, #384
 148 0072 2363     		str	r3, [r4, #48]
  76:Src/ADCsrc.c  **** 
 149              		.loc 1 76 0
 150 0074 D4F8B030 		ldr	r3, [r4, #176]
 151 0078 23F04003 		bic	r3, r3, #64
 152 007c C4F8B030 		str	r3, [r4, #176]
  90:Src/ADCsrc.c  ****   ADC1->SMPR1 |= ADC_SMPR1_SMP6_0 | ADC_SMPR1_SMP6_1 | ADC_SMPR1_SMP6_2;
 153              		.loc 1 90 0
 154 0080 6369     		ldr	r3, [r4, #20]
 155 0082 23F4E013 		bic	r3, r3, #1835008
 156 0086 6361     		str	r3, [r4, #20]
  91:Src/ADCsrc.c  **** 
 157              		.loc 1 91 0
 158 0088 6369     		ldr	r3, [r4, #20]
 159 008a 43F4E013 		orr	r3, r3, #1835008
 160 008e 6361     		str	r3, [r4, #20]
  96:Src/ADCsrc.c  ****   //ADC1->CFGR |= ADC_CFGR_CONT;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 7


 161              		.loc 1 96 0
 162 0090 E368     		ldr	r3, [r4, #12]
 163 0092 23F40053 		bic	r3, r3, #8192
 164 0096 E360     		str	r3, [r4, #12]
 100:Src/ADCsrc.c  ****   //DMA enable?
 165              		.loc 1 100 0
 166 0098 E368     		ldr	r3, [r4, #12]
 167 009a 43F00203 		orr	r3, r3, #2
 168 009e E360     		str	r3, [r4, #12]
 102:Src/ADCsrc.c  **** 
 169              		.loc 1 102 0
 170 00a0 E368     		ldr	r3, [r4, #12]
 171 00a2 43F00103 		orr	r3, r3, #1
 172 00a6 E360     		str	r3, [r4, #12]
 105:Src/ADCsrc.c  ****   //ADC1->CFGR &= ~ADC_CFGR_OVRMOD;
 173              		.loc 1 105 0
 174 00a8 E368     		ldr	r3, [r4, #12]
 175 00aa 43F48053 		orr	r3, r3, #4096
 176 00ae E360     		str	r3, [r4, #12]
 112:Src/ADCsrc.c  ****     ADC1->CFGR |= ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2;
 177              		.loc 1 112 0
 178 00b0 E368     		ldr	r3, [r4, #12]
 179 00b2 23F47073 		bic	r3, r3, #960
 180 00b6 E360     		str	r3, [r4, #12]
 113:Src/ADCsrc.c  **** 
 181              		.loc 1 113 0
 182 00b8 E368     		ldr	r3, [r4, #12]
 183 00ba 43F44073 		orr	r3, r3, #768
 184 00be E360     		str	r3, [r4, #12]
 121:Src/ADCsrc.c  ****   ADC1->CFGR |= ADC_CFGR_EXTEN_0;
 185              		.loc 1 121 0
 186 00c0 E368     		ldr	r3, [r4, #12]
 187 00c2 23F44063 		bic	r3, r3, #3072
 188 00c6 E360     		str	r3, [r4, #12]
 122:Src/ADCsrc.c  **** 
 189              		.loc 1 122 0
 190 00c8 E368     		ldr	r3, [r4, #12]
 191 00ca 43F48063 		orr	r3, r3, #1024
 192 00ce E360     		str	r3, [r4, #12]
 133:Src/ADCsrc.c  **** 
 193              		.loc 1 133 0
 194 00d0 A368     		ldr	r3, [r4, #8]
 195 00d2 43F00403 		orr	r3, r3, #4
 196 00d6 A360     		str	r3, [r4, #8]
 136:Src/ADCsrc.c  ****   ADC1->CR |= ADC_CR_ADEN;
 197              		.loc 1 136 0
 198 00d8 A368     		ldr	r3, [r4, #8]
 199 00da 23F00103 		bic	r3, r3, #1
 200 00de A360     		str	r3, [r4, #8]
 137:Src/ADCsrc.c  **** 
 201              		.loc 1 137 0
 202 00e0 A368     		ldr	r3, [r4, #8]
 203 00e2 43F00103 		orr	r3, r3, #1
 204 00e6 A360     		str	r3, [r4, #8]
 205              	.L8:
 140:Src/ADCsrc.c  **** }
 206              		.loc 1 140 0 discriminator 1
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 8


 207 00e8 034B     		ldr	r3, .L10+4
 208 00ea 1B68     		ldr	r3, [r3]
 209 00ec 13F0010F 		tst	r3, #1
 210 00f0 FAD0     		beq	.L8
 141:Src/ADCsrc.c  **** 
 211              		.loc 1 141 0
 212 00f2 10BD     		pop	{r4, pc}
 213              	.L11:
 214              		.align	2
 215              	.L10:
 216 00f4 00100240 		.word	1073876992
 217 00f8 00000450 		.word	1342439424
 218 00fc 00030450 		.word	1342440192
 219              		.cfi_endproc
 220              	.LFE156:
 222              		.section	.text.GPIO_Init,"ax",%progbits
 223              		.align	2
 224              		.global	GPIO_Init
 225              		.thumb
 226              		.thumb_func
 228              	GPIO_Init:
 229              	.LFB158:
 166:Src/ADCsrc.c  **** 
 167:Src/ADCsrc.c  **** 
 168:Src/ADCsrc.c  **** 
 169:Src/ADCsrc.c  **** //GPIO Initialization
 170:Src/ADCsrc.c  **** 
 171:Src/ADCsrc.c  **** 
 172:Src/ADCsrc.c  **** 
 173:Src/ADCsrc.c  **** 
 174:Src/ADCsrc.c  **** void GPIO_Init(void)
 175:Src/ADCsrc.c  **** {
 230              		.loc 1 175 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 176:Src/ADCsrc.c  **** //Enabled clock for GPIO: A
 177:Src/ADCsrc.c  **** RCC->AHB2ENR &= ~RCC_AHB2ENR_GPIOAEN;
 235              		.loc 1 177 0
 236 0000 0D4B     		ldr	r3, .L13
 237 0002 DA6C     		ldr	r2, [r3, #76]
 238 0004 22F00102 		bic	r2, r2, #1
 239 0008 DA64     		str	r2, [r3, #76]
 178:Src/ADCsrc.c  **** RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 240              		.loc 1 178 0
 241 000a DA6C     		ldr	r2, [r3, #76]
 242 000c 42F00102 		orr	r2, r2, #1
 243 0010 DA64     		str	r2, [r3, #76]
 179:Src/ADCsrc.c  **** 
 180:Src/ADCsrc.c  **** 
 181:Src/ADCsrc.c  **** /*SET PA1 as analog*/
 182:Src/ADCsrc.c  **** /*00 = digital input, 01 = digital Output*/
 183:Src/ADCsrc.c  **** /*10 = alternate function, 11 = analog (default) */
 184:Src/ADCsrc.c  **** GPIOA->MODER &= ~GPIO_MODER_MODE1;
 244              		.loc 1 184 0
 245 0012 4FF09043 		mov	r3, #1207959552
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 9


 246 0016 1A68     		ldr	r2, [r3]
 247 0018 22F00C02 		bic	r2, r2, #12
 248 001c 1A60     		str	r2, [r3]
 185:Src/ADCsrc.c  **** GPIOA->MODER |= GPIO_MODER_MODE1_0 | GPIO_MODER_MODE1_1;
 249              		.loc 1 185 0
 250 001e 1A68     		ldr	r2, [r3]
 251 0020 42F00C02 		orr	r2, r2, #12
 252 0024 1A60     		str	r2, [r3]
 186:Src/ADCsrc.c  **** 
 187:Src/ADCsrc.c  **** 
 188:Src/ADCsrc.c  **** //clear pupdr
 189:Src/ADCsrc.c  **** GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD1;
 253              		.loc 1 189 0
 254 0026 DA68     		ldr	r2, [r3, #12]
 255 0028 22F00C02 		bic	r2, r2, #12
 256 002c DA60     		str	r2, [r3, #12]
 190:Src/ADCsrc.c  **** 
 191:Src/ADCsrc.c  **** /*set firsrt bit of ASCR to close analog switch */
 192:Src/ADCsrc.c  **** GPIOA->ASCR |= GPIO_ASCR_ASC1;
 257              		.loc 1 192 0
 258 002e DA6A     		ldr	r2, [r3, #44]
 259 0030 42F00202 		orr	r2, r2, #2
 260 0034 DA62     		str	r2, [r3, #44]
 261 0036 7047     		bx	lr
 262              	.L14:
 263              		.align	2
 264              	.L13:
 265 0038 00100240 		.word	1073876992
 266              		.cfi_endproc
 267              	.LFE158:
 269              		.section	.text.TIM4_Init,"ax",%progbits
 270              		.align	2
 271              		.global	TIM4_Init
 272              		.thumb
 273              		.thumb_func
 275              	TIM4_Init:
 276              	.LFB159:
 193:Src/ADCsrc.c  **** 
 194:Src/ADCsrc.c  **** 
 195:Src/ADCsrc.c  **** 
 196:Src/ADCsrc.c  **** }
 197:Src/ADCsrc.c  **** 
 198:Src/ADCsrc.c  **** 
 199:Src/ADCsrc.c  **** //TIMER 4 Initialization for ADC
 200:Src/ADCsrc.c  **** 
 201:Src/ADCsrc.c  **** void TIM4_Init(void)
 202:Src/ADCsrc.c  **** {
 277              		.loc 1 202 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 203:Src/ADCsrc.c  ****   /*Enable Clock for Timer 4 */
 204:Src/ADCsrc.c  ****   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 282              		.loc 1 204 0
 283 0000 184A     		ldr	r2, .L16
 284 0002 936D     		ldr	r3, [r2, #88]
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 10


 285 0004 43F00403 		orr	r3, r3, #4
 286 0008 9365     		str	r3, [r2, #88]
 205:Src/ADCsrc.c  **** 
 206:Src/ADCsrc.c  ****   /*clear edge-aligned mode */
 207:Src/ADCsrc.c  ****   TIM4->CR1 &= ~TIM_CR1_CMS;
 287              		.loc 1 207 0
 288 000a 174B     		ldr	r3, .L16+4
 289 000c 1A68     		ldr	r2, [r3]
 290 000e 22F06002 		bic	r2, r2, #96
 291 0012 1A60     		str	r2, [r3]
 208:Src/ADCsrc.c  **** 
 209:Src/ADCsrc.c  ****   /*Counting Direction up counting */
 210:Src/ADCsrc.c  ****   TIM4->CR1 &= ~TIM_CR1_DIR;
 292              		.loc 1 210 0
 293 0014 1A68     		ldr	r2, [r3]
 294 0016 22F01002 		bic	r2, r2, #16
 295 001a 1A60     		str	r2, [r3]
 211:Src/ADCsrc.c  **** 
 212:Src/ADCsrc.c  ****   /*Master Mode Selection */
 213:Src/ADCsrc.c  ****   /*000: UG bit from the EGR register is used as trigger output (TRGO) */
 214:Src/ADCsrc.c  ****   /*001: Enable - The counter enable signal is used as trigger output (TRGO) */
 215:Src/ADCsrc.c  ****   /*010: Update - the update event is selected as trigger output (TRGO) */
 216:Src/ADCsrc.c  ****   /*011: Compare pulse - the trigger output send a positive when CC1IF flag */
 217:Src/ADCsrc.c  ****   /* CC1IF flag is to be set (Even if it was already high) */
 218:Src/ADCsrc.c  ****   /*100: Compare - OC1REF signal is used as trigger output (TRGO)
 219:Src/ADCsrc.c  ****   /*101: Compare- OC2REF signal is used as trigger output*/
 220:Src/ADCsrc.c  ****   /*110: Compare - OC3REF signal "" */
 221:Src/ADCsrc.c  ****   /*111: Compare - OC4REF signal ""*/
 222:Src/ADCsrc.c  **** 
 223:Src/ADCsrc.c  ****   /*Clear mster mode select */
 224:Src/ADCsrc.c  ****   TIM4->CR2 &= ~TIM_CR2_MMS;
 296              		.loc 1 224 0
 297 001c 5A68     		ldr	r2, [r3, #4]
 298 001e 22F07002 		bic	r2, r2, #112
 299 0022 5A60     		str	r2, [r3, #4]
 225:Src/ADCsrc.c  **** 
 226:Src/ADCsrc.c  ****   /*Select 100, OC1REF as trigger */
 227:Src/ADCsrc.c  ****   TIM4->CR2 |= TIM_CR2_MMS_2;
 300              		.loc 1 227 0
 301 0024 5A68     		ldr	r2, [r3, #4]
 302 0026 42F04002 		orr	r2, r2, #64
 303 002a 5A60     		str	r2, [r3, #4]
 228:Src/ADCsrc.c  **** 
 229:Src/ADCsrc.c  ****   /*OC1M: Output compare 1 mode */
 230:Src/ADCsrc.c  ****   TIM4->CCMR1 &= ~TIM_CCMR1_OC1M;
 304              		.loc 1 230 0
 305 002c 9A69     		ldr	r2, [r3, #24]
 306 002e 22F48032 		bic	r2, r2, #65536
 307 0032 22F07002 		bic	r2, r2, #112
 308 0036 9A61     		str	r2, [r3, #24]
 231:Src/ADCsrc.c  ****   /*0110 PWM mode 1*/
 232:Src/ADCsrc.c  ****   TIM4->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 309              		.loc 1 232 0
 310 0038 9A69     		ldr	r2, [r3, #24]
 311 003a 42F06002 		orr	r2, r2, #96
 312 003e 9A61     		str	r2, [r3, #24]
 233:Src/ADCsrc.c  **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 11


 234:Src/ADCsrc.c  ****   /*Timer driving frequency = 80MHz/(1+PSC) = 80M/(1+7)= 10MHz */
 235:Src/ADCsrc.c  ****   /*Trigger frequency 10MHz / (1 + ARR)= 10KHz */
 236:Src/ADCsrc.c  ****   TIM4->PSC = 7;
 313              		.loc 1 236 0
 314 0040 0722     		movs	r2, #7
 315 0042 9A62     		str	r2, [r3, #40]
 237:Src/ADCsrc.c  ****   TIM4->ARR = 999;
 316              		.loc 1 237 0
 317 0044 40F2E732 		movw	r2, #999
 318 0048 DA62     		str	r2, [r3, #44]
 238:Src/ADCsrc.c  ****   /*Duty ratio of 50% */
 239:Src/ADCsrc.c  ****   TIM4->CCR1 = 500;
 319              		.loc 1 239 0
 320 004a 4FF4FA72 		mov	r2, #500
 321 004e 5A63     		str	r2, [r3, #52]
 240:Src/ADCsrc.c  **** 
 241:Src/ADCsrc.c  ****   /*OC1 Signal is output */
 242:Src/ADCsrc.c  ****   TIM4->CCER |= TIM_CCER_CC1E;
 322              		.loc 1 242 0
 323 0050 1A6A     		ldr	r2, [r3, #32]
 324 0052 42F00102 		orr	r2, r2, #1
 325 0056 1A62     		str	r2, [r3, #32]
 243:Src/ADCsrc.c  **** 
 244:Src/ADCsrc.c  ****   /*Enable Timer */
 245:Src/ADCsrc.c  ****   TIM4->CR1 |= TIM_CR1_CEN;
 326              		.loc 1 245 0
 327 0058 1A68     		ldr	r2, [r3]
 328 005a 42F00102 		orr	r2, r2, #1
 329 005e 1A60     		str	r2, [r3]
 330 0060 7047     		bx	lr
 331              	.L17:
 332 0062 00BF     		.align	2
 333              	.L16:
 334 0064 00100240 		.word	1073876992
 335 0068 00080040 		.word	1073743872
 336              		.cfi_endproc
 337              	.LFE159:
 339              		.section	.text.ADC_Calibration,"ax",%progbits
 340              		.align	2
 341              		.global	ADC_Calibration
 342              		.thumb
 343              		.thumb_func
 345              	ADC_Calibration:
 346              	.LFB160:
 246:Src/ADCsrc.c  **** }
 247:Src/ADCsrc.c  **** 
 248:Src/ADCsrc.c  **** 
 249:Src/ADCsrc.c  **** 
 250:Src/ADCsrc.c  **** 
 251:Src/ADCsrc.c  **** /* The function described below calibrates the ADC after wake up*/
 252:Src/ADCsrc.c  **** 
 253:Src/ADCsrc.c  **** void ADC_Calibration(void){
 347              		.loc 1 253 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		@ link register save eliminated.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 12


 254:Src/ADCsrc.c  ****   /*Make sure the ADC is off*/
 255:Src/ADCsrc.c  ****   ADC1 -> CR &= ~ADC_CR_ADEN;
 352              		.loc 1 255 0
 353 0000 0B4A     		ldr	r2, .L21
 354 0002 9368     		ldr	r3, [r2, #8]
 355 0004 23F00103 		bic	r3, r3, #1
 356 0008 9360     		str	r3, [r2, #8]
 357              	.L19:
 256:Src/ADCsrc.c  **** 
 257:Src/ADCsrc.c  ****   /*Wait until ADRDY is reset by the hardware*/
 258:Src/ADCsrc.c  ****   while((ADC1 -> ISR & ADC_ISR_ADRDY) == ADC_ISR_ADRDY);
 358              		.loc 1 258 0 discriminator 1
 359 000a 094B     		ldr	r3, .L21
 360 000c 1B68     		ldr	r3, [r3]
 361 000e 13F0010F 		tst	r3, #1
 362 0012 FAD1     		bne	.L19
 259:Src/ADCsrc.c  **** 
 260:Src/ADCsrc.c  ****   /*Calibrate for single ended ADC input*/
 261:Src/ADCsrc.c  ****   /*ADCALDIF = 0: Single ended, = 1 for differential input*/
 262:Src/ADCsrc.c  ****   ADC1 -> CR &= ~ADC_CR_ADCALDIF;
 363              		.loc 1 262 0
 364 0014 064B     		ldr	r3, .L21
 365 0016 9A68     		ldr	r2, [r3, #8]
 366 0018 22F08042 		bic	r2, r2, #1073741824
 367 001c 9A60     		str	r2, [r3, #8]
 263:Src/ADCsrc.c  **** 
 264:Src/ADCsrc.c  ****   /*ADC Calibration can only happen when ADEN = 0 which is disabled*/
 265:Src/ADCsrc.c  ****   /*Each ADC provides automatic calibration procedure*/
 266:Src/ADCsrc.c  ****   ADC1 -> CR |= ADC_CR_ADCAL;
 368              		.loc 1 266 0
 369 001e 9A68     		ldr	r2, [r3, #8]
 370 0020 42F00042 		orr	r2, r2, #-2147483648
 371 0024 9A60     		str	r2, [r3, #8]
 372              	.L20:
 267:Src/ADCsrc.c  **** 
 268:Src/ADCsrc.c  ****   /*ADCAL stays at 1 during the entire calibration process*/
 269:Src/ADCsrc.c  ****   /*cleared by hardware after calibration is complete, needs to wait*/
 270:Src/ADCsrc.c  ****   while((ADC1 -> CR & ADC_CR_ADCAL) == ADC_CR_ADCAL);
 373              		.loc 1 270 0 discriminator 1
 374 0026 024B     		ldr	r3, .L21
 375 0028 9B68     		ldr	r3, [r3, #8]
 376 002a 002B     		cmp	r3, #0
 377 002c FBDB     		blt	.L20
 271:Src/ADCsrc.c  **** 
 272:Src/ADCsrc.c  **** }
 378              		.loc 1 272 0
 379 002e 7047     		bx	lr
 380              	.L22:
 381              		.align	2
 382              	.L21:
 383 0030 00000450 		.word	1342439424
 384              		.cfi_endproc
 385              	.LFE160:
 387              		.section	.text.arm_mean_f32,"ax",%progbits
 388              		.align	2
 389              		.global	arm_mean_f32
 390              		.thumb
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 13


 391              		.thumb_func
 393              	arm_mean_f32:
 394              	.LFB162:
 273:Src/ADCsrc.c  **** 
 274:Src/ADCsrc.c  **** 
 275:Src/ADCsrc.c  **** 
 276:Src/ADCsrc.c  **** void findFrequency(float *samples, int nsamp, float *note)
 277:Src/ADCsrc.c  **** {
 278:Src/ADCsrc.c  ****    uint32_t i, n, j, maxIndex;
 279:Src/ADCsrc.c  ****    float avg, dev, maxVal;
 280:Src/ADCsrc.c  ****    float input[nsamp], output1[nsamp*2], output2[nsamp];
 281:Src/ADCsrc.c  ****    n=1;
 282:Src/ADCsrc.c  **** 
 283:Src/ADCsrc.c  ****  //this will also keep track of how many blocks collected
 284:Src/ADCsrc.c  ****  //since decimating we will need #D blocks until FFT is full
 285:Src/ADCsrc.c  **** 
 286:Src/ADCsrc.c  ****  arm_correlate_f32(input, nsamp, input, nsamp, output1);
 287:Src/ADCsrc.c  **** //arm_rfft_fast_f32(&fftStruct, input, output1, 0);
 288:Src/ADCsrc.c  ****   arm_mean_f32(output1, nsamp*2, &avg);
 289:Src/ADCsrc.c  **** 
 290:Src/ADCsrc.c  **** 
 291:Src/ADCsrc.c  **** 
 292:Src/ADCsrc.c  **** 
 293:Src/ADCsrc.c  **** /* subtract mean */
 294:Src/ADCsrc.c  **** for(i=0; i<nsamp*2; i++){
 295:Src/ADCsrc.c  ****   //output1[i] *= 10;
 296:Src/ADCsrc.c  ****   output1[i] -= avg;
 297:Src/ADCsrc.c  **** 
 298:Src/ADCsrc.c  ****   /*zero out negative correlations */
 299:Src/ADCsrc.c  ****   //if(output1[i]<0) output1[i] = 0;
 300:Src/ADCsrc.c  **** }
 301:Src/ADCsrc.c  **** 
 302:Src/ADCsrc.c  ****   /*Find Max value as well as corresponding index of said value */
 303:Src/ADCsrc.c  ****    arm_max_f32(output1, nsamp*2, &maxVal, &maxIndex);
 304:Src/ADCsrc.c  **** 
 305:Src/ADCsrc.c  **** 
 306:Src/ADCsrc.c  **** /* normalize */
 307:Src/ADCsrc.c  ****    for(i=0; i<nsamp*2; i++){
 308:Src/ADCsrc.c  ****      output1[i] /= maxVal;
 309:Src/ADCsrc.c  ****    }
 310:Src/ADCsrc.c  **** 
 311:Src/ADCsrc.c  **** 
 312:Src/ADCsrc.c  **** 
 313:Src/ADCsrc.c  ****    /* set origin of autocorre to be max peak */
 314:Src/ADCsrc.c  ****    for(i=0; i<nsamp; i++){
 315:Src/ADCsrc.c  ****      output2[i] = output1[maxIndex+i];
 316:Src/ADCsrc.c  **** }
 317:Src/ADCsrc.c  **** 
 318:Src/ADCsrc.c  **** /*find std deviation and mean of normalized signal */
 319:Src/ADCsrc.c  ****  arm_mean_f32(output2, nsamp, &avg);
 320:Src/ADCsrc.c  ****  arm_std_f32(output2, nsamp, &dev);
 321:Src/ADCsrc.c  **** 
 322:Src/ADCsrc.c  **** 
 323:Src/ADCsrc.c  **** 
 324:Src/ADCsrc.c  **** /* eliminate non dominant peaks */
 325:Src/ADCsrc.c  ****  for(i=0; i<nsamp; i++){
 326:Src/ADCsrc.c  ****   if ((output2[i] < avg + (2*dev))) output2[i] = 0;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 14


 327:Src/ADCsrc.c  ****  }
 328:Src/ADCsrc.c  **** 
 329:Src/ADCsrc.c  **** 
 330:Src/ADCsrc.c  **** /* peak detection */
 331:Src/ADCsrc.c  ****    for(i = 1; i<nsamp-1; i++ ){
 332:Src/ADCsrc.c  **** 
 333:Src/ADCsrc.c  ****       if(((output2[i] - output2[i-1])>0) && ((output2[i+1]-output2[i])<0)){
 334:Src/ADCsrc.c  ****         n = i;
 335:Src/ADCsrc.c  ****         break;
 336:Src/ADCsrc.c  ****       }
 337:Src/ADCsrc.c  **** 
 338:Src/ADCsrc.c  ****       else if((output2[i] - output2[i-1])>0) continue;
 339:Src/ADCsrc.c  **** 
 340:Src/ADCsrc.c  ****       else if((output2[i+1] - output2[i]) < 0) continue;
 341:Src/ADCsrc.c  ****    }
 342:Src/ADCsrc.c  **** 
 343:Src/ADCsrc.c  ****           /*sample rate /divided by number of samples to peak */
 344:Src/ADCsrc.c  ****           /*returns frequency in Hz */
 345:Src/ADCsrc.c  ****    *note = 10000.0/((float) n);
 346:Src/ADCsrc.c  **** 
 347:Src/ADCsrc.c  **** 
 348:Src/ADCsrc.c  **** 
 349:Src/ADCsrc.c  ****   //printf("%f\n\r", note);
 350:Src/ADCsrc.c  **** 
 351:Src/ADCsrc.c  **** 
 352:Src/ADCsrc.c  **** }
 353:Src/ADCsrc.c  **** 
 354:Src/ADCsrc.c  **** 
 355:Src/ADCsrc.c  **** 
 356:Src/ADCsrc.c  **** 
 357:Src/ADCsrc.c  **** 
 358:Src/ADCsrc.c  **** 
 359:Src/ADCsrc.c  **** /* ----------------------------------------------------------------------
 360:Src/ADCsrc.c  **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.
 361:Src/ADCsrc.c  **** *
 362:Src/ADCsrc.c  **** * $Date:        19. March 2015
 363:Src/ADCsrc.c  **** * $Revision: 	V.1.4.5
 364:Src/ADCsrc.c  **** *
 365:Src/ADCsrc.c  **** * Project: 	    CMSIS DSP Library
 366:Src/ADCsrc.c  **** * Title:		arm_mean_f32.c
 367:Src/ADCsrc.c  **** *
 368:Src/ADCsrc.c  **** * Description:	Mean value of a floating-point vector.
 369:Src/ADCsrc.c  **** *
 370:Src/ADCsrc.c  **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
 371:Src/ADCsrc.c  **** *
 372:Src/ADCsrc.c  **** * Redistribution and use in source and binary forms, with or without
 373:Src/ADCsrc.c  **** * modification, are permitted provided that the following conditions
 374:Src/ADCsrc.c  **** * are met:
 375:Src/ADCsrc.c  **** *   - Redistributions of source code must retain the above copyright
 376:Src/ADCsrc.c  **** *     notice, this list of conditions and the following disclaimer.
 377:Src/ADCsrc.c  **** *   - Redistributions in binary form must reproduce the above copyright
 378:Src/ADCsrc.c  **** *     notice, this list of conditions and the following disclaimer in
 379:Src/ADCsrc.c  **** *     the documentation and/or other materials provided with the
 380:Src/ADCsrc.c  **** *     distribution.
 381:Src/ADCsrc.c  **** *   - Neither the name of ARM LIMITED nor the names of its contributors
 382:Src/ADCsrc.c  **** *     may be used to endorse or promote products derived from this
 383:Src/ADCsrc.c  **** *     software without specific prior written permission.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 15


 384:Src/ADCsrc.c  **** *
 385:Src/ADCsrc.c  **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 386:Src/ADCsrc.c  **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 387:Src/ADCsrc.c  **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 388:Src/ADCsrc.c  **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 389:Src/ADCsrc.c  **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 390:Src/ADCsrc.c  **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 391:Src/ADCsrc.c  **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 392:Src/ADCsrc.c  **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 393:Src/ADCsrc.c  **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 394:Src/ADCsrc.c  **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 395:Src/ADCsrc.c  **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 396:Src/ADCsrc.c  **** * POSSIBILITY OF SUCH DAMAGE.
 397:Src/ADCsrc.c  **** * ---------------------------------------------------------------------------- */
 398:Src/ADCsrc.c  **** 
 399:Src/ADCsrc.c  **** 
 400:Src/ADCsrc.c  **** 
 401:Src/ADCsrc.c  **** /**
 402:Src/ADCsrc.c  ****  * @ingroup groupStats
 403:Src/ADCsrc.c  ****  */
 404:Src/ADCsrc.c  **** 
 405:Src/ADCsrc.c  **** /**
 406:Src/ADCsrc.c  ****  * @defgroup mean Mean
 407:Src/ADCsrc.c  ****  *
 408:Src/ADCsrc.c  ****  * Calculates the mean of the input vector. Mean is defined as the average of the elements in the v
 409:Src/ADCsrc.c  ****  * The underlying algorithm is used:
 410:Src/ADCsrc.c  ****  *
 411:Src/ADCsrc.c  ****  * <pre>
 412:Src/ADCsrc.c  ****  * 	Result = (pSrc[0] + pSrc[1] + pSrc[2] + ... + pSrc[blockSize-1]) / blockSize;
 413:Src/ADCsrc.c  ****  * </pre>
 414:Src/ADCsrc.c  ****  *
 415:Src/ADCsrc.c  ****  * There are separate functions for floating-point, Q31, Q15, and Q7 data types.
 416:Src/ADCsrc.c  ****  */
 417:Src/ADCsrc.c  **** 
 418:Src/ADCsrc.c  **** /**
 419:Src/ADCsrc.c  ****  * @addtogroup mean
 420:Src/ADCsrc.c  ****  * @{
 421:Src/ADCsrc.c  ****  */
 422:Src/ADCsrc.c  **** 
 423:Src/ADCsrc.c  **** 
 424:Src/ADCsrc.c  **** /**
 425:Src/ADCsrc.c  ****  * @brief Mean value of a floating-point vector.
 426:Src/ADCsrc.c  ****  * @param[in]       *pSrc points to the input vector
 427:Src/ADCsrc.c  ****  * @param[in]       blockSize length of the input vector
 428:Src/ADCsrc.c  ****  * @param[out]      *pResult mean value returned here
 429:Src/ADCsrc.c  ****  * @return none.
 430:Src/ADCsrc.c  ****  */
 431:Src/ADCsrc.c  **** 
 432:Src/ADCsrc.c  **** 
 433:Src/ADCsrc.c  **** void arm_mean_f32(
 434:Src/ADCsrc.c  ****   float32_t * pSrc,
 435:Src/ADCsrc.c  ****   uint32_t blockSize,
 436:Src/ADCsrc.c  ****   float32_t * pResult)
 437:Src/ADCsrc.c  **** {
 395              		.loc 1 437 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 16


 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400              	.LVL5:
 438:Src/ADCsrc.c  ****   float32_t sum = 0.0f;                          /* Temporary result storage */
 439:Src/ADCsrc.c  ****   uint32_t blkCnt;                               /* loop counter */
 440:Src/ADCsrc.c  **** 
 441:Src/ADCsrc.c  **** #ifndef ARM_MATH_CM0_FAMILY
 442:Src/ADCsrc.c  **** 
 443:Src/ADCsrc.c  ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 444:Src/ADCsrc.c  ****   float32_t in1, in2, in3, in4;
 445:Src/ADCsrc.c  **** 
 446:Src/ADCsrc.c  ****   /*loop Unrolling */
 447:Src/ADCsrc.c  ****   blkCnt = blockSize >> 2u;
 401              		.loc 1 447 0
 402 0000 8B08     		lsrs	r3, r1, #2
 403              	.LVL6:
 438:Src/ADCsrc.c  ****   float32_t sum = 0.0f;                          /* Temporary result storage */
 404              		.loc 1 438 0
 405 0002 DFED157A 		flds	s15, .L28
 448:Src/ADCsrc.c  **** 
 449:Src/ADCsrc.c  ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 450:Src/ADCsrc.c  ****    ** a second loop below computes the remaining 1 to 3 samples. */
 451:Src/ADCsrc.c  ****   while(blkCnt > 0u)
 406              		.loc 1 451 0
 407 0006 11E0     		b	.L24
 408              	.LVL7:
 409              	.L25:
 452:Src/ADCsrc.c  ****   {
 453:Src/ADCsrc.c  ****     /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
 454:Src/ADCsrc.c  ****     in1 = *pSrc++;
 410              		.loc 1 454 0
 411 0008 90ED007A 		flds	s14, [r0]
 412              	.LVL8:
 455:Src/ADCsrc.c  ****     in2 = *pSrc++;
 413              		.loc 1 455 0
 414 000c D0ED015A 		flds	s11, [r0, #4]
 415              	.LVL9:
 456:Src/ADCsrc.c  ****     in3 = *pSrc++;
 416              		.loc 1 456 0
 417 0010 90ED026A 		flds	s12, [r0, #8]
 418              	.LVL10:
 457:Src/ADCsrc.c  ****     in4 = *pSrc++;
 419              		.loc 1 457 0
 420 0014 D0ED036A 		flds	s13, [r0, #12]
 421              	.LVL11:
 458:Src/ADCsrc.c  **** 
 459:Src/ADCsrc.c  ****     sum += in1;
 422              		.loc 1 459 0
 423 0018 37EE877A 		fadds	s14, s15, s14
 424              	.LVL12:
 460:Src/ADCsrc.c  ****     sum += in2;
 425              		.loc 1 460 0
 426 001c 77EE257A 		fadds	s15, s14, s11
 427              	.LVL13:
 461:Src/ADCsrc.c  ****     sum += in3;
 428              		.loc 1 461 0
 429 0020 77EE867A 		fadds	s15, s15, s12
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 17


 430              	.LVL14:
 462:Src/ADCsrc.c  ****     sum += in4;
 431              		.loc 1 462 0
 432 0024 77EEA67A 		fadds	s15, s15, s13
 433              	.LVL15:
 463:Src/ADCsrc.c  **** 
 464:Src/ADCsrc.c  ****     /* Decrement the loop counter */
 465:Src/ADCsrc.c  ****     blkCnt--;
 434              		.loc 1 465 0
 435 0028 013B     		subs	r3, r3, #1
 436              	.LVL16:
 457:Src/ADCsrc.c  **** 
 437              		.loc 1 457 0
 438 002a 1030     		adds	r0, r0, #16
 439              	.LVL17:
 440              	.L24:
 451:Src/ADCsrc.c  ****   {
 441              		.loc 1 451 0
 442 002c 002B     		cmp	r3, #0
 443 002e EBD1     		bne	.L25
 466:Src/ADCsrc.c  ****   }
 467:Src/ADCsrc.c  **** 
 468:Src/ADCsrc.c  ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 469:Src/ADCsrc.c  ****    ** No loop unrolling is used. */
 470:Src/ADCsrc.c  ****   blkCnt = blockSize % 0x4u;
 444              		.loc 1 470 0
 445 0030 01F00303 		and	r3, r1, #3
 446              	.LVL18:
 471:Src/ADCsrc.c  **** 
 472:Src/ADCsrc.c  **** #else
 473:Src/ADCsrc.c  **** 
 474:Src/ADCsrc.c  ****   /* Run the below code for Cortex-M0 */
 475:Src/ADCsrc.c  **** 
 476:Src/ADCsrc.c  ****   /* Loop over blockSize number of values */
 477:Src/ADCsrc.c  ****   blkCnt = blockSize;
 478:Src/ADCsrc.c  **** 
 479:Src/ADCsrc.c  **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 480:Src/ADCsrc.c  **** 
 481:Src/ADCsrc.c  ****   while(blkCnt > 0u)
 447              		.loc 1 481 0
 448 0034 05E0     		b	.L26
 449              	.L27:
 450              	.LVL19:
 482:Src/ADCsrc.c  ****   {
 483:Src/ADCsrc.c  ****     /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
 484:Src/ADCsrc.c  ****     sum += *pSrc++;
 451              		.loc 1 484 0
 452 0036 90ED007A 		flds	s14, [r0]
 453 003a 77EE877A 		fadds	s15, s15, s14
 454              	.LVL20:
 485:Src/ADCsrc.c  **** 
 486:Src/ADCsrc.c  ****     /* Decrement the loop counter */
 487:Src/ADCsrc.c  ****     blkCnt--;
 455              		.loc 1 487 0
 456 003e 013B     		subs	r3, r3, #1
 457              	.LVL21:
 484:Src/ADCsrc.c  **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 18


 458              		.loc 1 484 0
 459 0040 0430     		adds	r0, r0, #4
 460              	.LVL22:
 461              	.L26:
 481:Src/ADCsrc.c  ****   {
 462              		.loc 1 481 0
 463 0042 002B     		cmp	r3, #0
 464 0044 F7D1     		bne	.L27
 488:Src/ADCsrc.c  ****   }
 489:Src/ADCsrc.c  **** 
 490:Src/ADCsrc.c  ****   /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
 491:Src/ADCsrc.c  ****   /* Store the result to the destination */
 492:Src/ADCsrc.c  ****   *pResult = sum / (float32_t) blockSize;
 465              		.loc 1 492 0
 466 0046 07EE101A 		fmsr	s14, r1	@ int
 467 004a B8EE477A 		fuitos	s14, s14
 468 004e C7EE877A 		fdivs	s15, s15, s14
 469              	.LVL23:
 470 0052 C2ED007A 		fsts	s15, [r2]
 471 0056 7047     		bx	lr
 472              	.L29:
 473              		.align	2
 474              	.L28:
 475 0058 00000000 		.word	0
 476              		.cfi_endproc
 477              	.LFE162:
 479              		.section	.text.arm_std_f32,"ax",%progbits
 480              		.align	2
 481              		.global	arm_std_f32
 482              		.thumb
 483              		.thumb_func
 485              	arm_std_f32:
 486              	.LFB163:
 493:Src/ADCsrc.c  **** }
 494:Src/ADCsrc.c  **** 
 495:Src/ADCsrc.c  **** /**
 496:Src/ADCsrc.c  ****  * @} end of mean group
 497:Src/ADCsrc.c  ****  */
 498:Src/ADCsrc.c  **** 
 499:Src/ADCsrc.c  **** 
 500:Src/ADCsrc.c  **** 
 501:Src/ADCsrc.c  ****  /* ----------------------------------------------------------------------
 502:Src/ADCsrc.c  ****  * Copyright (C) 2010-2014 ARM Limited. All rights reserved.
 503:Src/ADCsrc.c  ****  *
 504:Src/ADCsrc.c  ****  * $Date:        19. March 2015
 505:Src/ADCsrc.c  ****  * $Revision: 	V.1.4.5
 506:Src/ADCsrc.c  ****  *
 507:Src/ADCsrc.c  ****  * Project: 	    CMSIS DSP Library
 508:Src/ADCsrc.c  ****  * Title:		arm_std_f32.c
 509:Src/ADCsrc.c  ****  *
 510:Src/ADCsrc.c  ****  * Description:	Standard deviation of the elements of a floating-point vector.
 511:Src/ADCsrc.c  ****  *
 512:Src/ADCsrc.c  ****  * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
 513:Src/ADCsrc.c  ****  *
 514:Src/ADCsrc.c  ****  * Redistribution and use in source and binary forms, with or without
 515:Src/ADCsrc.c  ****  * modification, are permitted provided that the following conditions
 516:Src/ADCsrc.c  ****  * are met:
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 19


 517:Src/ADCsrc.c  ****  *   - Redistributions of source code must retain the above copyright
 518:Src/ADCsrc.c  ****  *     notice, this list of conditions and the following disclaimer.
 519:Src/ADCsrc.c  ****  *   - Redistributions in binary form must reproduce the above copyright
 520:Src/ADCsrc.c  ****  *     notice, this list of conditions and the following disclaimer in
 521:Src/ADCsrc.c  ****  *     the documentation and/or other materials provided with the
 522:Src/ADCsrc.c  ****  *     distribution.
 523:Src/ADCsrc.c  ****  *   - Neither the name of ARM LIMITED nor the names of its contributors
 524:Src/ADCsrc.c  ****  *     may be used to endorse or promote products derived from this
 525:Src/ADCsrc.c  ****  *     software without specific prior written permission.
 526:Src/ADCsrc.c  ****  *
 527:Src/ADCsrc.c  ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 528:Src/ADCsrc.c  ****  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 529:Src/ADCsrc.c  ****  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 530:Src/ADCsrc.c  ****  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 531:Src/ADCsrc.c  ****  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 532:Src/ADCsrc.c  ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 533:Src/ADCsrc.c  ****  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 534:Src/ADCsrc.c  ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 535:Src/ADCsrc.c  ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 536:Src/ADCsrc.c  ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 537:Src/ADCsrc.c  ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 538:Src/ADCsrc.c  ****  * POSSIBILITY OF SUCH DAMAGE.
 539:Src/ADCsrc.c  ****  * ---------------------------------------------------------------------------- */
 540:Src/ADCsrc.c  **** 
 541:Src/ADCsrc.c  **** 
 542:Src/ADCsrc.c  **** 
 543:Src/ADCsrc.c  ****  /**
 544:Src/ADCsrc.c  ****   * @ingroup groupStats
 545:Src/ADCsrc.c  ****   */
 546:Src/ADCsrc.c  **** 
 547:Src/ADCsrc.c  ****  /**
 548:Src/ADCsrc.c  ****   * @defgroup STD Standard deviation
 549:Src/ADCsrc.c  ****   *
 550:Src/ADCsrc.c  ****   * Calculates the standard deviation of the elements in the input vector.
 551:Src/ADCsrc.c  ****   * The underlying algorithm is used:
 552:Src/ADCsrc.c  ****   *
 553:Src/ADCsrc.c  ****   * <pre>
 554:Src/ADCsrc.c  ****   * 	Result = sqrt((sumOfSquares - sum<sup>2</sup> / blockSize) / (blockSize - 1))
 555:Src/ADCsrc.c  ****   *
 556:Src/ADCsrc.c  ****   *	   where, sumOfSquares = pSrc[0] * pSrc[0] + pSrc[1] * pSrc[1] + ... + pSrc[blockSize-1] * pSrc
 557:Src/ADCsrc.c  ****   *
 558:Src/ADCsrc.c  ****   *	                   sum = pSrc[0] + pSrc[1] + pSrc[2] + ... + pSrc[blockSize-1]
 559:Src/ADCsrc.c  ****   * </pre>
 560:Src/ADCsrc.c  ****   *
 561:Src/ADCsrc.c  ****   * There are separate functions for floating point, Q31, and Q15 data types.
 562:Src/ADCsrc.c  ****   */
 563:Src/ADCsrc.c  **** 
 564:Src/ADCsrc.c  ****  /**
 565:Src/ADCsrc.c  ****   * @addtogroup STD
 566:Src/ADCsrc.c  ****   * @{
 567:Src/ADCsrc.c  ****   */
 568:Src/ADCsrc.c  **** 
 569:Src/ADCsrc.c  **** 
 570:Src/ADCsrc.c  ****  /**
 571:Src/ADCsrc.c  ****   * @brief Standard deviation of the elements of a floating-point vector.
 572:Src/ADCsrc.c  ****   * @param[in]       *pSrc points to the input vector
 573:Src/ADCsrc.c  ****   * @param[in]       blockSize length of the input vector
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 20


 574:Src/ADCsrc.c  ****   * @param[out]      *pResult standard deviation value returned here
 575:Src/ADCsrc.c  ****   * @return none.
 576:Src/ADCsrc.c  ****   *
 577:Src/ADCsrc.c  ****   */
 578:Src/ADCsrc.c  **** 
 579:Src/ADCsrc.c  **** 
 580:Src/ADCsrc.c  ****  void arm_std_f32(
 581:Src/ADCsrc.c  ****    float32_t * pSrc,
 582:Src/ADCsrc.c  ****    uint32_t blockSize,
 583:Src/ADCsrc.c  ****    float32_t * pResult)
 584:Src/ADCsrc.c  ****  {
 487              		.loc 1 584 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL24:
 492 0000 10B5     		push	{r4, lr}
 493              	.LCFI1:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 4, -8
 496              		.cfi_offset 14, -4
 497 0002 1446     		mov	r4, r2
 498              	.LVL25:
 585:Src/ADCsrc.c  ****    float32_t sum = 0.0f;                          /* Temporary result storage */
 586:Src/ADCsrc.c  ****    float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 587:Src/ADCsrc.c  ****    float32_t in;                                  /* input value */
 588:Src/ADCsrc.c  ****    uint32_t blkCnt;                               /* loop counter */
 589:Src/ADCsrc.c  **** 
 590:Src/ADCsrc.c  ****  #ifndef ARM_MATH_CM0_FAMILY
 591:Src/ADCsrc.c  **** 
 592:Src/ADCsrc.c  ****    /* Run the below code for Cortex-M4 and Cortex-M3 */
 593:Src/ADCsrc.c  **** 
 594:Src/ADCsrc.c  ****    float32_t meanOfSquares, mean, squareOfMean;
 595:Src/ADCsrc.c  **** 
 596:Src/ADCsrc.c  ****  	if(blockSize == 1)
 499              		.loc 1 596 0
 500 0004 0129     		cmp	r1, #1
 501 0006 02D1     		bne	.L31
 597:Src/ADCsrc.c  ****  	{
 598:Src/ADCsrc.c  ****  		*pResult = 0;
 502              		.loc 1 598 0
 503 0008 0023     		movs	r3, #0
 504 000a 1360     		str	r3, [r2]	@ float
 599:Src/ADCsrc.c  ****  		return;
 505              		.loc 1 599 0
 506 000c 10BD     		pop	{r4, pc}
 507              	.L31:
 600:Src/ADCsrc.c  ****  	}
 601:Src/ADCsrc.c  **** 
 602:Src/ADCsrc.c  ****    /*loop Unrolling */
 603:Src/ADCsrc.c  ****    blkCnt = blockSize >> 2u;
 508              		.loc 1 603 0
 509 000e 8B08     		lsrs	r3, r1, #2
 510              	.LVL26:
 586:Src/ADCsrc.c  ****    float32_t in;                                  /* input value */
 511              		.loc 1 586 0
 512 0010 9FED300A 		flds	s0, .L43
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 21


 585:Src/ADCsrc.c  ****    float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 513              		.loc 1 585 0
 514 0014 F0EE407A 		fcpys	s15, s0
 604:Src/ADCsrc.c  **** 
 605:Src/ADCsrc.c  ****    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 606:Src/ADCsrc.c  ****     ** a second loop below computes the remaining 1 to 3 samples. */
 607:Src/ADCsrc.c  ****    while(blkCnt > 0u)
 515              		.loc 1 607 0
 516 0018 21E0     		b	.L33
 517              	.LVL27:
 518              	.L34:
 608:Src/ADCsrc.c  ****    {
 609:Src/ADCsrc.c  ****      /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
 610:Src/ADCsrc.c  ****      /* Compute Sum of squares of the input samples
 611:Src/ADCsrc.c  ****       * and then store the result in a temporary variable, sum. */
 612:Src/ADCsrc.c  ****      in = *pSrc++;
 519              		.loc 1 612 0
 520 001a D0ED006A 		flds	s13, [r0]
 521              	.LVL28:
 613:Src/ADCsrc.c  ****      sum += in;
 522              		.loc 1 613 0
 523 001e 77EEA67A 		fadds	s15, s15, s13
 524              	.LVL29:
 614:Src/ADCsrc.c  ****      sumOfSquares += in * in;
 525              		.loc 1 614 0
 526 0022 66EEA66A 		fmuls	s13, s13, s13
 527              	.LVL30:
 528 0026 36EE800A 		fadds	s0, s13, s0
 529              	.LVL31:
 615:Src/ADCsrc.c  ****      in = *pSrc++;
 530              		.loc 1 615 0
 531 002a D0ED016A 		flds	s13, [r0, #4]
 532              	.LVL32:
 616:Src/ADCsrc.c  ****      sum += in;
 533              		.loc 1 616 0
 534 002e 77EEA67A 		fadds	s15, s15, s13
 535              	.LVL33:
 617:Src/ADCsrc.c  ****      sumOfSquares += in * in;
 536              		.loc 1 617 0
 537 0032 66EEA66A 		fmuls	s13, s13, s13
 538              	.LVL34:
 539 0036 36EE800A 		fadds	s0, s13, s0
 540              	.LVL35:
 618:Src/ADCsrc.c  ****      in = *pSrc++;
 541              		.loc 1 618 0
 542 003a 90ED027A 		flds	s14, [r0, #8]
 543              	.LVL36:
 619:Src/ADCsrc.c  ****      sum += in;
 544              		.loc 1 619 0
 545 003e 77EE877A 		fadds	s15, s15, s14
 546              	.LVL37:
 620:Src/ADCsrc.c  ****      sumOfSquares += in * in;
 547              		.loc 1 620 0
 548 0042 27EE077A 		fmuls	s14, s14, s14
 549              	.LVL38:
 550 0046 37EE000A 		fadds	s0, s14, s0
 551              	.LVL39:
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 22


 621:Src/ADCsrc.c  ****      in = *pSrc++;
 552              		.loc 1 621 0
 553 004a 90ED037A 		flds	s14, [r0, #12]
 554              	.LVL40:
 622:Src/ADCsrc.c  ****      sum += in;
 555              		.loc 1 622 0
 556 004e 77EE877A 		fadds	s15, s15, s14
 557              	.LVL41:
 623:Src/ADCsrc.c  ****      sumOfSquares += in * in;
 558              		.loc 1 623 0
 559 0052 27EE077A 		fmuls	s14, s14, s14
 560              	.LVL42:
 561 0056 37EE000A 		fadds	s0, s14, s0
 562              	.LVL43:
 624:Src/ADCsrc.c  **** 
 625:Src/ADCsrc.c  ****      /* Decrement the loop counter */
 626:Src/ADCsrc.c  ****      blkCnt--;
 563              		.loc 1 626 0
 564 005a 013B     		subs	r3, r3, #1
 565              	.LVL44:
 621:Src/ADCsrc.c  ****      sum += in;
 566              		.loc 1 621 0
 567 005c 1030     		adds	r0, r0, #16
 568              	.LVL45:
 569              	.L33:
 607:Src/ADCsrc.c  ****    {
 570              		.loc 1 607 0
 571 005e 002B     		cmp	r3, #0
 572 0060 DBD1     		bne	.L34
 627:Src/ADCsrc.c  ****    }
 628:Src/ADCsrc.c  **** 
 629:Src/ADCsrc.c  ****    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 630:Src/ADCsrc.c  ****     ** No loop unrolling is used. */
 631:Src/ADCsrc.c  ****    blkCnt = blockSize % 0x4u;
 573              		.loc 1 631 0
 574 0062 01F00303 		and	r3, r1, #3
 575              	.LVL46:
 632:Src/ADCsrc.c  **** 
 633:Src/ADCsrc.c  ****    while(blkCnt > 0u)
 576              		.loc 1 633 0
 577 0066 09E0     		b	.L35
 578              	.L36:
 579              	.LVL47:
 634:Src/ADCsrc.c  ****    {
 635:Src/ADCsrc.c  ****      /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
 636:Src/ADCsrc.c  ****      /* Compute Sum of squares of the input samples
 637:Src/ADCsrc.c  ****       * and then store the result in a temporary variable, sum. */
 638:Src/ADCsrc.c  ****      in = *pSrc++;
 580              		.loc 1 638 0
 581 0068 90ED007A 		flds	s14, [r0]
 582              	.LVL48:
 639:Src/ADCsrc.c  ****      sum += in;
 583              		.loc 1 639 0
 584 006c 77EE877A 		fadds	s15, s15, s14
 585              	.LVL49:
 640:Src/ADCsrc.c  ****      sumOfSquares += in * in;
 586              		.loc 1 640 0
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 23


 587 0070 27EE077A 		fmuls	s14, s14, s14
 588              	.LVL50:
 589 0074 30EE070A 		fadds	s0, s0, s14
 590              	.LVL51:
 641:Src/ADCsrc.c  **** 
 642:Src/ADCsrc.c  ****      /* Decrement the loop counter */
 643:Src/ADCsrc.c  ****      blkCnt--;
 591              		.loc 1 643 0
 592 0078 013B     		subs	r3, r3, #1
 593              	.LVL52:
 638:Src/ADCsrc.c  ****      sum += in;
 594              		.loc 1 638 0
 595 007a 0430     		adds	r0, r0, #4
 596              	.LVL53:
 597              	.L35:
 633:Src/ADCsrc.c  ****    {
 598              		.loc 1 633 0
 599 007c 002B     		cmp	r3, #0
 600 007e F3D1     		bne	.L36
 644:Src/ADCsrc.c  ****    }
 645:Src/ADCsrc.c  **** 
 646:Src/ADCsrc.c  ****    /* Compute Mean of squares of the input samples
 647:Src/ADCsrc.c  ****     * and then store the result in a temporary variable, meanOfSquares. */
 648:Src/ADCsrc.c  ****    meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 601              		.loc 1 648 0
 602 0080 07EE101A 		fmsr	s14, r1	@ int
 603 0084 B8EE477A 		fuitos	s14, s14
 604 0088 F7EE006A 		fconsts	s13, #112
 605 008c 77EE666A 		fsubs	s13, s14, s13
 606 0090 80EE260A 		fdivs	s0, s0, s13
 607              	.LVL54:
 649:Src/ADCsrc.c  **** 
 650:Src/ADCsrc.c  ****    /* Compute mean of all input values */
 651:Src/ADCsrc.c  ****    mean = sum / (float32_t) blockSize;
 608              		.loc 1 651 0
 609 0094 C7EE877A 		fdivs	s15, s15, s14
 610              	.LVL55:
 652:Src/ADCsrc.c  **** 
 653:Src/ADCsrc.c  ****    /* Compute square of mean */
 654:Src/ADCsrc.c  ****    squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 611              		.loc 1 654 0
 612 0098 67EEA77A 		fmuls	s15, s15, s15
 613              	.LVL56:
 614 009c 87EE267A 		fdivs	s14, s14, s13
 615 00a0 67EE877A 		fmuls	s15, s15, s14
 616              	.LVL57:
 655:Src/ADCsrc.c  ****                                    ((float32_t) blockSize - 1.0f));
 656:Src/ADCsrc.c  **** 
 657:Src/ADCsrc.c  ****    /* Compute standard deviation and then store the result to the destination */
 658:Src/ADCsrc.c  ****    arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 617              		.loc 1 658 0
 618 00a4 70EE677A 		fsubs	s15, s0, s15
 619              	.LVL58:
 620              	.LBB4:
 621              	.LBB5:
 622              		.file 2 "Drivers/CMSIS/Include/arm_math.h"
   1:Drivers/CMSIS/Include/arm_math.h **** /* ----------------------------------------------------------------------
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 24


   2:Drivers/CMSIS/Include/arm_math.h **** * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
   3:Drivers/CMSIS/Include/arm_math.h **** *
   4:Drivers/CMSIS/Include/arm_math.h **** * $Date:        20. October 2015
   5:Drivers/CMSIS/Include/arm_math.h **** * $Revision:    V1.4.5 b
   6:Drivers/CMSIS/Include/arm_math.h **** *
   7:Drivers/CMSIS/Include/arm_math.h **** * Project:      CMSIS DSP Library
   8:Drivers/CMSIS/Include/arm_math.h **** * Title:        arm_math.h
   9:Drivers/CMSIS/Include/arm_math.h **** *
  10:Drivers/CMSIS/Include/arm_math.h **** * Description:  Public header file for CMSIS DSP Library
  11:Drivers/CMSIS/Include/arm_math.h **** *
  12:Drivers/CMSIS/Include/arm_math.h **** * Target Processor: Cortex-M7/Cortex-M4/Cortex-M3/Cortex-M0
  13:Drivers/CMSIS/Include/arm_math.h **** *
  14:Drivers/CMSIS/Include/arm_math.h **** * Redistribution and use in source and binary forms, with or without
  15:Drivers/CMSIS/Include/arm_math.h **** * modification, are permitted provided that the following conditions
  16:Drivers/CMSIS/Include/arm_math.h **** * are met:
  17:Drivers/CMSIS/Include/arm_math.h **** *   - Redistributions of source code must retain the above copyright
  18:Drivers/CMSIS/Include/arm_math.h **** *     notice, this list of conditions and the following disclaimer.
  19:Drivers/CMSIS/Include/arm_math.h **** *   - Redistributions in binary form must reproduce the above copyright
  20:Drivers/CMSIS/Include/arm_math.h **** *     notice, this list of conditions and the following disclaimer in
  21:Drivers/CMSIS/Include/arm_math.h **** *     the documentation and/or other materials provided with the
  22:Drivers/CMSIS/Include/arm_math.h **** *     distribution.
  23:Drivers/CMSIS/Include/arm_math.h **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:Drivers/CMSIS/Include/arm_math.h **** *     may be used to endorse or promote products derived from this
  25:Drivers/CMSIS/Include/arm_math.h **** *     software without specific prior written permission.
  26:Drivers/CMSIS/Include/arm_math.h **** *
  27:Drivers/CMSIS/Include/arm_math.h **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:Drivers/CMSIS/Include/arm_math.h **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:Drivers/CMSIS/Include/arm_math.h **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:Drivers/CMSIS/Include/arm_math.h **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  31:Drivers/CMSIS/Include/arm_math.h **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:Drivers/CMSIS/Include/arm_math.h **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:Drivers/CMSIS/Include/arm_math.h **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:Drivers/CMSIS/Include/arm_math.h **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:Drivers/CMSIS/Include/arm_math.h **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:Drivers/CMSIS/Include/arm_math.h **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:Drivers/CMSIS/Include/arm_math.h **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:Drivers/CMSIS/Include/arm_math.h **** * POSSIBILITY OF SUCH DAMAGE.
  39:Drivers/CMSIS/Include/arm_math.h ****  * -------------------------------------------------------------------- */
  40:Drivers/CMSIS/Include/arm_math.h **** 
  41:Drivers/CMSIS/Include/arm_math.h **** /**
  42:Drivers/CMSIS/Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  43:Drivers/CMSIS/Include/arm_math.h ****    *
  44:Drivers/CMSIS/Include/arm_math.h ****    * Introduction
  45:Drivers/CMSIS/Include/arm_math.h ****    * ------------
  46:Drivers/CMSIS/Include/arm_math.h ****    *
  47:Drivers/CMSIS/Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  48:Drivers/CMSIS/Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  49:Drivers/CMSIS/Include/arm_math.h ****    *
  50:Drivers/CMSIS/Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  51:Drivers/CMSIS/Include/arm_math.h ****    * - Basic math functions
  52:Drivers/CMSIS/Include/arm_math.h ****    * - Fast math functions
  53:Drivers/CMSIS/Include/arm_math.h ****    * - Complex math functions
  54:Drivers/CMSIS/Include/arm_math.h ****    * - Filters
  55:Drivers/CMSIS/Include/arm_math.h ****    * - Matrix functions
  56:Drivers/CMSIS/Include/arm_math.h ****    * - Transforms
  57:Drivers/CMSIS/Include/arm_math.h ****    * - Motor control functions
  58:Drivers/CMSIS/Include/arm_math.h ****    * - Statistical functions
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 25


  59:Drivers/CMSIS/Include/arm_math.h ****    * - Support functions
  60:Drivers/CMSIS/Include/arm_math.h ****    * - Interpolation functions
  61:Drivers/CMSIS/Include/arm_math.h ****    *
  62:Drivers/CMSIS/Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  63:Drivers/CMSIS/Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  64:Drivers/CMSIS/Include/arm_math.h ****    *
  65:Drivers/CMSIS/Include/arm_math.h ****    * Using the Library
  66:Drivers/CMSIS/Include/arm_math.h ****    * ------------
  67:Drivers/CMSIS/Include/arm_math.h ****    *
  68:Drivers/CMSIS/Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  69:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Little endian and Double Precision Floating Point Unit on Cortex-
  70:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Big endian and Double Precision Floating Point Unit on Cortex-M7)
  71:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Little endian and Single Precision Floating Point Unit on Cortex-
  72:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Big endian and Single Precision Floating Point Unit on Cortex-M7)
  73:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Little endian on Cortex-M7)
  74:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Big endian on Cortex-M7)
  75:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Little endian and Floating Point Unit on Cortex-M4)
  76:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Big endian and Floating Point Unit on Cortex-M4)
  77:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Little endian on Cortex-M4)
  78:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Big endian on Cortex-M4)
  79:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Little endian on Cortex-M3)
  80:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Big endian on Cortex-M3)
  81:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Little endian on Cortex-M0 / CortexM0+)
  82:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Big endian on Cortex-M0 / CortexM0+)
  83:Drivers/CMSIS/Include/arm_math.h ****    *
  84:Drivers/CMSIS/Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  85:Drivers/CMSIS/Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  86:Drivers/CMSIS/Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M7/M4/M3/M0/M0+ with little endian and 
  87:Drivers/CMSIS/Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  88:Drivers/CMSIS/Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  89:Drivers/CMSIS/Include/arm_math.h ****    *
  90:Drivers/CMSIS/Include/arm_math.h ****    * Examples
  91:Drivers/CMSIS/Include/arm_math.h ****    * --------
  92:Drivers/CMSIS/Include/arm_math.h ****    *
  93:Drivers/CMSIS/Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  94:Drivers/CMSIS/Include/arm_math.h ****    *
  95:Drivers/CMSIS/Include/arm_math.h ****    * Toolchain Support
  96:Drivers/CMSIS/Include/arm_math.h ****    * ------------
  97:Drivers/CMSIS/Include/arm_math.h ****    *
  98:Drivers/CMSIS/Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  99:Drivers/CMSIS/Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
 100:Drivers/CMSIS/Include/arm_math.h ****    *
 101:Drivers/CMSIS/Include/arm_math.h ****    * Building the Library
 102:Drivers/CMSIS/Include/arm_math.h ****    * ------------
 103:Drivers/CMSIS/Include/arm_math.h ****    *
 104:Drivers/CMSIS/Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 105:Drivers/CMSIS/Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 106:Drivers/CMSIS/Include/arm_math.h ****    *
 107:Drivers/CMSIS/Include/arm_math.h ****    *
 108:Drivers/CMSIS/Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 109:Drivers/CMSIS/Include/arm_math.h ****    *
 110:Drivers/CMSIS/Include/arm_math.h ****    * Pre-processor Macros
 111:Drivers/CMSIS/Include/arm_math.h ****    * ------------
 112:Drivers/CMSIS/Include/arm_math.h ****    *
 113:Drivers/CMSIS/Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 114:Drivers/CMSIS/Include/arm_math.h ****    *
 115:Drivers/CMSIS/Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 26


 116:Drivers/CMSIS/Include/arm_math.h ****    *
 117:Drivers/CMSIS/Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 118:Drivers/CMSIS/Include/arm_math.h ****    *
 119:Drivers/CMSIS/Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 120:Drivers/CMSIS/Include/arm_math.h ****    *
 121:Drivers/CMSIS/Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 122:Drivers/CMSIS/Include/arm_math.h ****    *
 123:Drivers/CMSIS/Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 124:Drivers/CMSIS/Include/arm_math.h ****    *
 125:Drivers/CMSIS/Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 126:Drivers/CMSIS/Include/arm_math.h ****    *
 127:Drivers/CMSIS/Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 128:Drivers/CMSIS/Include/arm_math.h ****    *
 129:Drivers/CMSIS/Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 130:Drivers/CMSIS/Include/arm_math.h ****    *
 131:Drivers/CMSIS/Include/arm_math.h ****    * - ARM_MATH_CMx:
 132:Drivers/CMSIS/Include/arm_math.h ****    *
 133:Drivers/CMSIS/Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 134:Drivers/CMSIS/Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 135:Drivers/CMSIS/Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 136:Drivers/CMSIS/Include/arm_math.h ****    *
 137:Drivers/CMSIS/Include/arm_math.h ****    * - __FPU_PRESENT:
 138:Drivers/CMSIS/Include/arm_math.h ****    *
 139:Drivers/CMSIS/Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 140:Drivers/CMSIS/Include/arm_math.h ****    *
 141:Drivers/CMSIS/Include/arm_math.h ****    * <hr>
 142:Drivers/CMSIS/Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 143:Drivers/CMSIS/Include/arm_math.h ****    * -----------------------------
 144:Drivers/CMSIS/Include/arm_math.h ****    *
 145:Drivers/CMSIS/Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 146:Drivers/CMSIS/Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 147:Drivers/CMSIS/Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 148:Drivers/CMSIS/Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 149:Drivers/CMSIS/Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 150:Drivers/CMSIS/Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 151:Drivers/CMSIS/Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 152:Drivers/CMSIS/Include/arm_math.h ****    *
 153:Drivers/CMSIS/Include/arm_math.h ****    * <hr>
 154:Drivers/CMSIS/Include/arm_math.h ****    * Revision History of CMSIS-DSP
 155:Drivers/CMSIS/Include/arm_math.h ****    * ------------
 156:Drivers/CMSIS/Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 157:Drivers/CMSIS/Include/arm_math.h ****    *
 158:Drivers/CMSIS/Include/arm_math.h ****    * Copyright Notice
 159:Drivers/CMSIS/Include/arm_math.h ****    * ------------
 160:Drivers/CMSIS/Include/arm_math.h ****    *
 161:Drivers/CMSIS/Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 162:Drivers/CMSIS/Include/arm_math.h ****    */
 163:Drivers/CMSIS/Include/arm_math.h **** 
 164:Drivers/CMSIS/Include/arm_math.h **** 
 165:Drivers/CMSIS/Include/arm_math.h **** /**
 166:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 167:Drivers/CMSIS/Include/arm_math.h ****  */
 168:Drivers/CMSIS/Include/arm_math.h **** 
 169:Drivers/CMSIS/Include/arm_math.h **** /**
 170:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 171:Drivers/CMSIS/Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 172:Drivers/CMSIS/Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 27


 173:Drivers/CMSIS/Include/arm_math.h ****  * operate on individual values and not arrays.
 174:Drivers/CMSIS/Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 175:Drivers/CMSIS/Include/arm_math.h ****  *
 176:Drivers/CMSIS/Include/arm_math.h ****  */
 177:Drivers/CMSIS/Include/arm_math.h **** 
 178:Drivers/CMSIS/Include/arm_math.h **** /**
 179:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 180:Drivers/CMSIS/Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 181:Drivers/CMSIS/Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 182:Drivers/CMSIS/Include/arm_math.h ****  * (real, imag, real, imag, ...).
 183:Drivers/CMSIS/Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 184:Drivers/CMSIS/Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 185:Drivers/CMSIS/Include/arm_math.h ****  * real values.
 186:Drivers/CMSIS/Include/arm_math.h ****  */
 187:Drivers/CMSIS/Include/arm_math.h **** 
 188:Drivers/CMSIS/Include/arm_math.h **** /**
 189:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 190:Drivers/CMSIS/Include/arm_math.h ****  */
 191:Drivers/CMSIS/Include/arm_math.h **** 
 192:Drivers/CMSIS/Include/arm_math.h **** /**
 193:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 194:Drivers/CMSIS/Include/arm_math.h ****  *
 195:Drivers/CMSIS/Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 196:Drivers/CMSIS/Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 197:Drivers/CMSIS/Include/arm_math.h ****  * the type
 198:Drivers/CMSIS/Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 199:Drivers/CMSIS/Include/arm_math.h ****  * below:
 200:Drivers/CMSIS/Include/arm_math.h ****  * <pre>
 201:Drivers/CMSIS/Include/arm_math.h ****  *     typedef struct
 202:Drivers/CMSIS/Include/arm_math.h ****  *     {
 203:Drivers/CMSIS/Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 204:Drivers/CMSIS/Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 205:Drivers/CMSIS/Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 206:Drivers/CMSIS/Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 207:Drivers/CMSIS/Include/arm_math.h ****  * </pre>
 208:Drivers/CMSIS/Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 209:Drivers/CMSIS/Include/arm_math.h ****  *
 210:Drivers/CMSIS/Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 211:Drivers/CMSIS/Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 212:Drivers/CMSIS/Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 213:Drivers/CMSIS/Include/arm_math.h ****  * matrix element (i, j) is stored at:
 214:Drivers/CMSIS/Include/arm_math.h ****  * <pre>
 215:Drivers/CMSIS/Include/arm_math.h ****  *     pData[i*numCols + j]
 216:Drivers/CMSIS/Include/arm_math.h ****  * </pre>
 217:Drivers/CMSIS/Include/arm_math.h ****  *
 218:Drivers/CMSIS/Include/arm_math.h ****  * \par Init Functions
 219:Drivers/CMSIS/Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 220:Drivers/CMSIS/Include/arm_math.h ****  * data structure.
 221:Drivers/CMSIS/Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 222:Drivers/CMSIS/Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 223:Drivers/CMSIS/Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 224:Drivers/CMSIS/Include/arm_math.h ****  *
 225:Drivers/CMSIS/Include/arm_math.h ****  * \par
 226:Drivers/CMSIS/Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 227:Drivers/CMSIS/Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 228:Drivers/CMSIS/Include/arm_math.h ****  * To place the instance structure in a const data
 229:Drivers/CMSIS/Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 28


 230:Drivers/CMSIS/Include/arm_math.h ****  * <pre>
 231:Drivers/CMSIS/Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 232:Drivers/CMSIS/Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 233:Drivers/CMSIS/Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 234:Drivers/CMSIS/Include/arm_math.h ****  * </pre>
 235:Drivers/CMSIS/Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 236:Drivers/CMSIS/Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 237:Drivers/CMSIS/Include/arm_math.h ****  * data array.
 238:Drivers/CMSIS/Include/arm_math.h ****  *
 239:Drivers/CMSIS/Include/arm_math.h ****  * \par Size Checking
 240:Drivers/CMSIS/Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 241:Drivers/CMSIS/Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 242:Drivers/CMSIS/Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 243:Drivers/CMSIS/Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 244:Drivers/CMSIS/Include/arm_math.h ****  * <pre>
 245:Drivers/CMSIS/Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 246:Drivers/CMSIS/Include/arm_math.h ****  * </pre>
 247:Drivers/CMSIS/Include/arm_math.h ****  * Otherwise the functions return
 248:Drivers/CMSIS/Include/arm_math.h ****  * <pre>
 249:Drivers/CMSIS/Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 250:Drivers/CMSIS/Include/arm_math.h ****  * </pre>
 251:Drivers/CMSIS/Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 252:Drivers/CMSIS/Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 253:Drivers/CMSIS/Include/arm_math.h ****  * <pre>
 254:Drivers/CMSIS/Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 255:Drivers/CMSIS/Include/arm_math.h ****  * </pre>
 256:Drivers/CMSIS/Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 257:Drivers/CMSIS/Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 258:Drivers/CMSIS/Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 259:Drivers/CMSIS/Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 260:Drivers/CMSIS/Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 261:Drivers/CMSIS/Include/arm_math.h ****  */
 262:Drivers/CMSIS/Include/arm_math.h **** 
 263:Drivers/CMSIS/Include/arm_math.h **** /**
 264:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 265:Drivers/CMSIS/Include/arm_math.h ****  */
 266:Drivers/CMSIS/Include/arm_math.h **** 
 267:Drivers/CMSIS/Include/arm_math.h **** /**
 268:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupController Controller Functions
 269:Drivers/CMSIS/Include/arm_math.h ****  */
 270:Drivers/CMSIS/Include/arm_math.h **** 
 271:Drivers/CMSIS/Include/arm_math.h **** /**
 272:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 273:Drivers/CMSIS/Include/arm_math.h ****  */
 274:Drivers/CMSIS/Include/arm_math.h **** /**
 275:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 276:Drivers/CMSIS/Include/arm_math.h ****  */
 277:Drivers/CMSIS/Include/arm_math.h **** 
 278:Drivers/CMSIS/Include/arm_math.h **** /**
 279:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 280:Drivers/CMSIS/Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 281:Drivers/CMSIS/Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 282:Drivers/CMSIS/Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 283:Drivers/CMSIS/Include/arm_math.h ****  */
 284:Drivers/CMSIS/Include/arm_math.h **** 
 285:Drivers/CMSIS/Include/arm_math.h **** /**
 286:Drivers/CMSIS/Include/arm_math.h ****  * @defgroup groupExamples Examples
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 29


 287:Drivers/CMSIS/Include/arm_math.h ****  */
 288:Drivers/CMSIS/Include/arm_math.h **** #ifndef _ARM_MATH_H
 289:Drivers/CMSIS/Include/arm_math.h **** #define _ARM_MATH_H
 290:Drivers/CMSIS/Include/arm_math.h **** 
 291:Drivers/CMSIS/Include/arm_math.h **** /* ignore some GCC warnings */
 292:Drivers/CMSIS/Include/arm_math.h **** #if defined ( __GNUC__ )
 293:Drivers/CMSIS/Include/arm_math.h **** #pragma GCC diagnostic push
 294:Drivers/CMSIS/Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 295:Drivers/CMSIS/Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 296:Drivers/CMSIS/Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 297:Drivers/CMSIS/Include/arm_math.h **** #endif
 298:Drivers/CMSIS/Include/arm_math.h **** 
 299:Drivers/CMSIS/Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 300:Drivers/CMSIS/Include/arm_math.h **** 
 301:Drivers/CMSIS/Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 302:Drivers/CMSIS/Include/arm_math.h ****   #include "core_cm7.h"
 303:Drivers/CMSIS/Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 304:Drivers/CMSIS/Include/arm_math.h ****   #include "core_cm4.h"
 305:Drivers/CMSIS/Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 306:Drivers/CMSIS/Include/arm_math.h ****   #include "core_cm3.h"
 307:Drivers/CMSIS/Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 308:Drivers/CMSIS/Include/arm_math.h ****   #include "core_cm0.h"
 309:Drivers/CMSIS/Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 310:Drivers/CMSIS/Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 311:Drivers/CMSIS/Include/arm_math.h ****   #include "core_cm0plus.h"
 312:Drivers/CMSIS/Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 313:Drivers/CMSIS/Include/arm_math.h **** #else
 314:Drivers/CMSIS/Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 315:Drivers/CMSIS/Include/arm_math.h **** #endif
 316:Drivers/CMSIS/Include/arm_math.h **** 
 317:Drivers/CMSIS/Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 318:Drivers/CMSIS/Include/arm_math.h **** #include "string.h"
 319:Drivers/CMSIS/Include/arm_math.h **** #include "math.h"
 320:Drivers/CMSIS/Include/arm_math.h **** #ifdef   __cplusplus
 321:Drivers/CMSIS/Include/arm_math.h **** extern "C"
 322:Drivers/CMSIS/Include/arm_math.h **** {
 323:Drivers/CMSIS/Include/arm_math.h **** #endif
 324:Drivers/CMSIS/Include/arm_math.h **** 
 325:Drivers/CMSIS/Include/arm_math.h **** 
 326:Drivers/CMSIS/Include/arm_math.h ****   /**
 327:Drivers/CMSIS/Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 328:Drivers/CMSIS/Include/arm_math.h ****    */
 329:Drivers/CMSIS/Include/arm_math.h **** 
 330:Drivers/CMSIS/Include/arm_math.h **** #define DELTA_Q31          (0x100)
 331:Drivers/CMSIS/Include/arm_math.h **** #define DELTA_Q15          0x5
 332:Drivers/CMSIS/Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 333:Drivers/CMSIS/Include/arm_math.h **** #ifndef PI
 334:Drivers/CMSIS/Include/arm_math.h **** #define PI                 3.14159265358979f
 335:Drivers/CMSIS/Include/arm_math.h **** #endif
 336:Drivers/CMSIS/Include/arm_math.h **** 
 337:Drivers/CMSIS/Include/arm_math.h ****   /**
 338:Drivers/CMSIS/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 339:Drivers/CMSIS/Include/arm_math.h ****    */
 340:Drivers/CMSIS/Include/arm_math.h **** 
 341:Drivers/CMSIS/Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 342:Drivers/CMSIS/Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 343:Drivers/CMSIS/Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 30


 344:Drivers/CMSIS/Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 345:Drivers/CMSIS/Include/arm_math.h **** #define TABLE_SIZE  256
 346:Drivers/CMSIS/Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 347:Drivers/CMSIS/Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 348:Drivers/CMSIS/Include/arm_math.h **** 
 349:Drivers/CMSIS/Include/arm_math.h ****   /**
 350:Drivers/CMSIS/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 351:Drivers/CMSIS/Include/arm_math.h ****    */
 352:Drivers/CMSIS/Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 353:Drivers/CMSIS/Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 354:Drivers/CMSIS/Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 355:Drivers/CMSIS/Include/arm_math.h **** 
 356:Drivers/CMSIS/Include/arm_math.h ****   /**
 357:Drivers/CMSIS/Include/arm_math.h ****    * @brief Macro for Unaligned Support
 358:Drivers/CMSIS/Include/arm_math.h ****    */
 359:Drivers/CMSIS/Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 360:Drivers/CMSIS/Include/arm_math.h ****     #define ALIGN4
 361:Drivers/CMSIS/Include/arm_math.h **** #else
 362:Drivers/CMSIS/Include/arm_math.h ****   #if defined  (__GNUC__)
 363:Drivers/CMSIS/Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 364:Drivers/CMSIS/Include/arm_math.h ****   #else
 365:Drivers/CMSIS/Include/arm_math.h ****     #define ALIGN4 __align(4)
 366:Drivers/CMSIS/Include/arm_math.h ****   #endif
 367:Drivers/CMSIS/Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 368:Drivers/CMSIS/Include/arm_math.h **** 
 369:Drivers/CMSIS/Include/arm_math.h ****   /**
 370:Drivers/CMSIS/Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 371:Drivers/CMSIS/Include/arm_math.h ****    */
 372:Drivers/CMSIS/Include/arm_math.h **** 
 373:Drivers/CMSIS/Include/arm_math.h ****   typedef enum
 374:Drivers/CMSIS/Include/arm_math.h ****   {
 375:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 376:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 377:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 378:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 379:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 380:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 381:Drivers/CMSIS/Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 382:Drivers/CMSIS/Include/arm_math.h ****   } arm_status;
 383:Drivers/CMSIS/Include/arm_math.h **** 
 384:Drivers/CMSIS/Include/arm_math.h ****   /**
 385:Drivers/CMSIS/Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 386:Drivers/CMSIS/Include/arm_math.h ****    */
 387:Drivers/CMSIS/Include/arm_math.h ****   typedef int8_t q7_t;
 388:Drivers/CMSIS/Include/arm_math.h **** 
 389:Drivers/CMSIS/Include/arm_math.h ****   /**
 390:Drivers/CMSIS/Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 391:Drivers/CMSIS/Include/arm_math.h ****    */
 392:Drivers/CMSIS/Include/arm_math.h ****   typedef int16_t q15_t;
 393:Drivers/CMSIS/Include/arm_math.h **** 
 394:Drivers/CMSIS/Include/arm_math.h ****   /**
 395:Drivers/CMSIS/Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 396:Drivers/CMSIS/Include/arm_math.h ****    */
 397:Drivers/CMSIS/Include/arm_math.h ****   typedef int32_t q31_t;
 398:Drivers/CMSIS/Include/arm_math.h **** 
 399:Drivers/CMSIS/Include/arm_math.h ****   /**
 400:Drivers/CMSIS/Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 31


 401:Drivers/CMSIS/Include/arm_math.h ****    */
 402:Drivers/CMSIS/Include/arm_math.h ****   typedef int64_t q63_t;
 403:Drivers/CMSIS/Include/arm_math.h **** 
 404:Drivers/CMSIS/Include/arm_math.h ****   /**
 405:Drivers/CMSIS/Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 406:Drivers/CMSIS/Include/arm_math.h ****    */
 407:Drivers/CMSIS/Include/arm_math.h ****   typedef float float32_t;
 408:Drivers/CMSIS/Include/arm_math.h **** 
 409:Drivers/CMSIS/Include/arm_math.h ****   /**
 410:Drivers/CMSIS/Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 411:Drivers/CMSIS/Include/arm_math.h ****    */
 412:Drivers/CMSIS/Include/arm_math.h ****   typedef double float64_t;
 413:Drivers/CMSIS/Include/arm_math.h **** 
 414:Drivers/CMSIS/Include/arm_math.h ****   /**
 415:Drivers/CMSIS/Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 416:Drivers/CMSIS/Include/arm_math.h ****    */
 417:Drivers/CMSIS/Include/arm_math.h **** #if defined __CC_ARM
 418:Drivers/CMSIS/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 419:Drivers/CMSIS/Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 420:Drivers/CMSIS/Include/arm_math.h **** 
 421:Drivers/CMSIS/Include/arm_math.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 422:Drivers/CMSIS/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 423:Drivers/CMSIS/Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 424:Drivers/CMSIS/Include/arm_math.h **** 
 425:Drivers/CMSIS/Include/arm_math.h **** #elif defined __GNUC__
 426:Drivers/CMSIS/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 427:Drivers/CMSIS/Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 428:Drivers/CMSIS/Include/arm_math.h **** 
 429:Drivers/CMSIS/Include/arm_math.h **** #elif defined __ICCARM__
 430:Drivers/CMSIS/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 431:Drivers/CMSIS/Include/arm_math.h ****   #define CMSIS_UNUSED
 432:Drivers/CMSIS/Include/arm_math.h **** 
 433:Drivers/CMSIS/Include/arm_math.h **** #elif defined __CSMC__
 434:Drivers/CMSIS/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 435:Drivers/CMSIS/Include/arm_math.h ****   #define CMSIS_UNUSED
 436:Drivers/CMSIS/Include/arm_math.h **** 
 437:Drivers/CMSIS/Include/arm_math.h **** #elif defined __TASKING__
 438:Drivers/CMSIS/Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 439:Drivers/CMSIS/Include/arm_math.h ****   #define CMSIS_UNUSED
 440:Drivers/CMSIS/Include/arm_math.h **** 
 441:Drivers/CMSIS/Include/arm_math.h **** #else
 442:Drivers/CMSIS/Include/arm_math.h ****   #error Unknown compiler
 443:Drivers/CMSIS/Include/arm_math.h **** #endif
 444:Drivers/CMSIS/Include/arm_math.h **** 
 445:Drivers/CMSIS/Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 446:Drivers/CMSIS/Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 447:Drivers/CMSIS/Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 448:Drivers/CMSIS/Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 449:Drivers/CMSIS/Include/arm_math.h **** 
 450:Drivers/CMSIS/Include/arm_math.h **** #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY)
 451:Drivers/CMSIS/Include/arm_math.h ****   /**
 452:Drivers/CMSIS/Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 453:Drivers/CMSIS/Include/arm_math.h ****    */
 454:Drivers/CMSIS/Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3)      ( (((int32_t)(ARG1) <<  0) & (int32_t)0x0000FFFF) | \
 455:Drivers/CMSIS/Include/arm_math.h ****                                          (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 456:Drivers/CMSIS/Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3)      ( (((int32_t)(ARG1) <<  0) & (int32_t)0xFFFF0000) | \
 457:Drivers/CMSIS/Include/arm_math.h ****                                          (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 32


 458:Drivers/CMSIS/Include/arm_math.h **** 
 459:Drivers/CMSIS/Include/arm_math.h **** #endif
 460:Drivers/CMSIS/Include/arm_math.h **** 
 461:Drivers/CMSIS/Include/arm_math.h **** 
 462:Drivers/CMSIS/Include/arm_math.h ****    /**
 463:Drivers/CMSIS/Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 464:Drivers/CMSIS/Include/arm_math.h ****    */
 465:Drivers/CMSIS/Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 466:Drivers/CMSIS/Include/arm_math.h **** 
 467:Drivers/CMSIS/Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 468:Drivers/CMSIS/Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 469:Drivers/CMSIS/Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 470:Drivers/CMSIS/Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 471:Drivers/CMSIS/Include/arm_math.h **** #else
 472:Drivers/CMSIS/Include/arm_math.h **** 
 473:Drivers/CMSIS/Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 474:Drivers/CMSIS/Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 475:Drivers/CMSIS/Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 476:Drivers/CMSIS/Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 477:Drivers/CMSIS/Include/arm_math.h **** 
 478:Drivers/CMSIS/Include/arm_math.h **** #endif
 479:Drivers/CMSIS/Include/arm_math.h **** 
 480:Drivers/CMSIS/Include/arm_math.h **** 
 481:Drivers/CMSIS/Include/arm_math.h ****   /**
 482:Drivers/CMSIS/Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 483:Drivers/CMSIS/Include/arm_math.h ****    */
 484:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q31_t clip_q63_to_q31(
 485:Drivers/CMSIS/Include/arm_math.h ****   q63_t x)
 486:Drivers/CMSIS/Include/arm_math.h ****   {
 487:Drivers/CMSIS/Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 488:Drivers/CMSIS/Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 489:Drivers/CMSIS/Include/arm_math.h ****   }
 490:Drivers/CMSIS/Include/arm_math.h **** 
 491:Drivers/CMSIS/Include/arm_math.h ****   /**
 492:Drivers/CMSIS/Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 493:Drivers/CMSIS/Include/arm_math.h ****    */
 494:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q15_t clip_q63_to_q15(
 495:Drivers/CMSIS/Include/arm_math.h ****   q63_t x)
 496:Drivers/CMSIS/Include/arm_math.h ****   {
 497:Drivers/CMSIS/Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 498:Drivers/CMSIS/Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 499:Drivers/CMSIS/Include/arm_math.h ****   }
 500:Drivers/CMSIS/Include/arm_math.h **** 
 501:Drivers/CMSIS/Include/arm_math.h ****   /**
 502:Drivers/CMSIS/Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 503:Drivers/CMSIS/Include/arm_math.h ****    */
 504:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q7_t clip_q31_to_q7(
 505:Drivers/CMSIS/Include/arm_math.h ****   q31_t x)
 506:Drivers/CMSIS/Include/arm_math.h ****   {
 507:Drivers/CMSIS/Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 508:Drivers/CMSIS/Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 509:Drivers/CMSIS/Include/arm_math.h ****   }
 510:Drivers/CMSIS/Include/arm_math.h **** 
 511:Drivers/CMSIS/Include/arm_math.h ****   /**
 512:Drivers/CMSIS/Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 513:Drivers/CMSIS/Include/arm_math.h ****    */
 514:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q15_t clip_q31_to_q15(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 33


 515:Drivers/CMSIS/Include/arm_math.h ****   q31_t x)
 516:Drivers/CMSIS/Include/arm_math.h ****   {
 517:Drivers/CMSIS/Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 518:Drivers/CMSIS/Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 519:Drivers/CMSIS/Include/arm_math.h ****   }
 520:Drivers/CMSIS/Include/arm_math.h **** 
 521:Drivers/CMSIS/Include/arm_math.h ****   /**
 522:Drivers/CMSIS/Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 523:Drivers/CMSIS/Include/arm_math.h ****    */
 524:Drivers/CMSIS/Include/arm_math.h **** 
 525:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q63_t mult32x64(
 526:Drivers/CMSIS/Include/arm_math.h ****   q63_t x,
 527:Drivers/CMSIS/Include/arm_math.h ****   q31_t y)
 528:Drivers/CMSIS/Include/arm_math.h ****   {
 529:Drivers/CMSIS/Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 530:Drivers/CMSIS/Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 531:Drivers/CMSIS/Include/arm_math.h ****   }
 532:Drivers/CMSIS/Include/arm_math.h **** 
 533:Drivers/CMSIS/Include/arm_math.h **** /*
 534:Drivers/CMSIS/Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 535:Drivers/CMSIS/Include/arm_math.h ****   #define __CLZ __clz
 536:Drivers/CMSIS/Include/arm_math.h ****   #endif
 537:Drivers/CMSIS/Include/arm_math.h ****  */
 538:Drivers/CMSIS/Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 539:Drivers/CMSIS/Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 540:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __CLZ(
 541:Drivers/CMSIS/Include/arm_math.h ****   q31_t data);
 542:Drivers/CMSIS/Include/arm_math.h **** 
 543:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __CLZ(
 544:Drivers/CMSIS/Include/arm_math.h ****   q31_t data)
 545:Drivers/CMSIS/Include/arm_math.h ****   {
 546:Drivers/CMSIS/Include/arm_math.h ****     uint32_t count = 0;
 547:Drivers/CMSIS/Include/arm_math.h ****     uint32_t mask = 0x80000000;
 548:Drivers/CMSIS/Include/arm_math.h **** 
 549:Drivers/CMSIS/Include/arm_math.h ****     while((data & mask) == 0)
 550:Drivers/CMSIS/Include/arm_math.h ****     {
 551:Drivers/CMSIS/Include/arm_math.h ****       count += 1u;
 552:Drivers/CMSIS/Include/arm_math.h ****       mask = mask >> 1u;
 553:Drivers/CMSIS/Include/arm_math.h ****     }
 554:Drivers/CMSIS/Include/arm_math.h **** 
 555:Drivers/CMSIS/Include/arm_math.h ****     return (count);
 556:Drivers/CMSIS/Include/arm_math.h ****   }
 557:Drivers/CMSIS/Include/arm_math.h **** #endif
 558:Drivers/CMSIS/Include/arm_math.h **** 
 559:Drivers/CMSIS/Include/arm_math.h ****   /**
 560:Drivers/CMSIS/Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 561:Drivers/CMSIS/Include/arm_math.h ****    */
 562:Drivers/CMSIS/Include/arm_math.h **** 
 563:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t arm_recip_q31(
 564:Drivers/CMSIS/Include/arm_math.h ****   q31_t in,
 565:Drivers/CMSIS/Include/arm_math.h ****   q31_t * dst,
 566:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pRecipTable)
 567:Drivers/CMSIS/Include/arm_math.h ****   {
 568:Drivers/CMSIS/Include/arm_math.h ****     q31_t out;
 569:Drivers/CMSIS/Include/arm_math.h ****     uint32_t tempVal;
 570:Drivers/CMSIS/Include/arm_math.h ****     uint32_t index, i;
 571:Drivers/CMSIS/Include/arm_math.h ****     uint32_t signBits;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 34


 572:Drivers/CMSIS/Include/arm_math.h **** 
 573:Drivers/CMSIS/Include/arm_math.h ****     if(in > 0)
 574:Drivers/CMSIS/Include/arm_math.h ****     {
 575:Drivers/CMSIS/Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 576:Drivers/CMSIS/Include/arm_math.h ****     }
 577:Drivers/CMSIS/Include/arm_math.h ****     else
 578:Drivers/CMSIS/Include/arm_math.h ****     {
 579:Drivers/CMSIS/Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 580:Drivers/CMSIS/Include/arm_math.h ****     }
 581:Drivers/CMSIS/Include/arm_math.h **** 
 582:Drivers/CMSIS/Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 583:Drivers/CMSIS/Include/arm_math.h ****     in = (in << signBits);
 584:Drivers/CMSIS/Include/arm_math.h **** 
 585:Drivers/CMSIS/Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 586:Drivers/CMSIS/Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 587:Drivers/CMSIS/Include/arm_math.h ****     index = (index & INDEX_MASK);
 588:Drivers/CMSIS/Include/arm_math.h **** 
 589:Drivers/CMSIS/Include/arm_math.h ****     /* 1.31 with exp 1 */
 590:Drivers/CMSIS/Include/arm_math.h ****     out = pRecipTable[index];
 591:Drivers/CMSIS/Include/arm_math.h **** 
 592:Drivers/CMSIS/Include/arm_math.h ****     /* calculation of reciprocal value */
 593:Drivers/CMSIS/Include/arm_math.h ****     /* running approximation for two iterations */
 594:Drivers/CMSIS/Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 595:Drivers/CMSIS/Include/arm_math.h ****     {
 596:Drivers/CMSIS/Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 597:Drivers/CMSIS/Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 598:Drivers/CMSIS/Include/arm_math.h ****       /*      1.31 with exp 1 */
 599:Drivers/CMSIS/Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 600:Drivers/CMSIS/Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 601:Drivers/CMSIS/Include/arm_math.h ****     }
 602:Drivers/CMSIS/Include/arm_math.h **** 
 603:Drivers/CMSIS/Include/arm_math.h ****     /* write output */
 604:Drivers/CMSIS/Include/arm_math.h ****     *dst = out;
 605:Drivers/CMSIS/Include/arm_math.h **** 
 606:Drivers/CMSIS/Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 607:Drivers/CMSIS/Include/arm_math.h ****     return (signBits + 1u);
 608:Drivers/CMSIS/Include/arm_math.h ****   }
 609:Drivers/CMSIS/Include/arm_math.h **** 
 610:Drivers/CMSIS/Include/arm_math.h **** 
 611:Drivers/CMSIS/Include/arm_math.h ****   /**
 612:Drivers/CMSIS/Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 613:Drivers/CMSIS/Include/arm_math.h ****    */
 614:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t arm_recip_q15(
 615:Drivers/CMSIS/Include/arm_math.h ****   q15_t in,
 616:Drivers/CMSIS/Include/arm_math.h ****   q15_t * dst,
 617:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pRecipTable)
 618:Drivers/CMSIS/Include/arm_math.h ****   {
 619:Drivers/CMSIS/Include/arm_math.h ****     q15_t out = 0;
 620:Drivers/CMSIS/Include/arm_math.h ****     uint32_t tempVal = 0;
 621:Drivers/CMSIS/Include/arm_math.h ****     uint32_t index = 0, i = 0;
 622:Drivers/CMSIS/Include/arm_math.h ****     uint32_t signBits = 0;
 623:Drivers/CMSIS/Include/arm_math.h **** 
 624:Drivers/CMSIS/Include/arm_math.h ****     if(in > 0)
 625:Drivers/CMSIS/Include/arm_math.h ****     {
 626:Drivers/CMSIS/Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 627:Drivers/CMSIS/Include/arm_math.h ****     }
 628:Drivers/CMSIS/Include/arm_math.h ****     else
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 35


 629:Drivers/CMSIS/Include/arm_math.h ****     {
 630:Drivers/CMSIS/Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 631:Drivers/CMSIS/Include/arm_math.h ****     }
 632:Drivers/CMSIS/Include/arm_math.h **** 
 633:Drivers/CMSIS/Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 634:Drivers/CMSIS/Include/arm_math.h ****     in = (in << signBits);
 635:Drivers/CMSIS/Include/arm_math.h **** 
 636:Drivers/CMSIS/Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 637:Drivers/CMSIS/Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 638:Drivers/CMSIS/Include/arm_math.h ****     index = (index & INDEX_MASK);
 639:Drivers/CMSIS/Include/arm_math.h **** 
 640:Drivers/CMSIS/Include/arm_math.h ****     /*      1.15 with exp 1  */
 641:Drivers/CMSIS/Include/arm_math.h ****     out = pRecipTable[index];
 642:Drivers/CMSIS/Include/arm_math.h **** 
 643:Drivers/CMSIS/Include/arm_math.h ****     /* calculation of reciprocal value */
 644:Drivers/CMSIS/Include/arm_math.h ****     /* running approximation for two iterations */
 645:Drivers/CMSIS/Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 646:Drivers/CMSIS/Include/arm_math.h ****     {
 647:Drivers/CMSIS/Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 648:Drivers/CMSIS/Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 649:Drivers/CMSIS/Include/arm_math.h ****       /*      1.15 with exp 1 */
 650:Drivers/CMSIS/Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 651:Drivers/CMSIS/Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 652:Drivers/CMSIS/Include/arm_math.h ****     }
 653:Drivers/CMSIS/Include/arm_math.h **** 
 654:Drivers/CMSIS/Include/arm_math.h ****     /* write output */
 655:Drivers/CMSIS/Include/arm_math.h ****     *dst = out;
 656:Drivers/CMSIS/Include/arm_math.h **** 
 657:Drivers/CMSIS/Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 658:Drivers/CMSIS/Include/arm_math.h ****     return (signBits + 1);
 659:Drivers/CMSIS/Include/arm_math.h ****   }
 660:Drivers/CMSIS/Include/arm_math.h **** 
 661:Drivers/CMSIS/Include/arm_math.h **** 
 662:Drivers/CMSIS/Include/arm_math.h ****   /*
 663:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 664:Drivers/CMSIS/Include/arm_math.h ****    */
 665:Drivers/CMSIS/Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 666:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q31_t __SSAT(
 667:Drivers/CMSIS/Include/arm_math.h ****   q31_t x,
 668:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 669:Drivers/CMSIS/Include/arm_math.h ****   {
 670:Drivers/CMSIS/Include/arm_math.h ****     int32_t posMax, negMin;
 671:Drivers/CMSIS/Include/arm_math.h ****     uint32_t i;
 672:Drivers/CMSIS/Include/arm_math.h **** 
 673:Drivers/CMSIS/Include/arm_math.h ****     posMax = 1;
 674:Drivers/CMSIS/Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 675:Drivers/CMSIS/Include/arm_math.h ****     {
 676:Drivers/CMSIS/Include/arm_math.h ****       posMax = posMax * 2;
 677:Drivers/CMSIS/Include/arm_math.h ****     }
 678:Drivers/CMSIS/Include/arm_math.h **** 
 679:Drivers/CMSIS/Include/arm_math.h ****     if(x > 0)
 680:Drivers/CMSIS/Include/arm_math.h ****     {
 681:Drivers/CMSIS/Include/arm_math.h ****       posMax = (posMax - 1);
 682:Drivers/CMSIS/Include/arm_math.h **** 
 683:Drivers/CMSIS/Include/arm_math.h ****       if(x > posMax)
 684:Drivers/CMSIS/Include/arm_math.h ****       {
 685:Drivers/CMSIS/Include/arm_math.h ****         x = posMax;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 36


 686:Drivers/CMSIS/Include/arm_math.h ****       }
 687:Drivers/CMSIS/Include/arm_math.h ****     }
 688:Drivers/CMSIS/Include/arm_math.h ****     else
 689:Drivers/CMSIS/Include/arm_math.h ****     {
 690:Drivers/CMSIS/Include/arm_math.h ****       negMin = -posMax;
 691:Drivers/CMSIS/Include/arm_math.h **** 
 692:Drivers/CMSIS/Include/arm_math.h ****       if(x < negMin)
 693:Drivers/CMSIS/Include/arm_math.h ****       {
 694:Drivers/CMSIS/Include/arm_math.h ****         x = negMin;
 695:Drivers/CMSIS/Include/arm_math.h ****       }
 696:Drivers/CMSIS/Include/arm_math.h ****     }
 697:Drivers/CMSIS/Include/arm_math.h ****     return (x);
 698:Drivers/CMSIS/Include/arm_math.h ****   }
 699:Drivers/CMSIS/Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 700:Drivers/CMSIS/Include/arm_math.h **** 
 701:Drivers/CMSIS/Include/arm_math.h **** 
 702:Drivers/CMSIS/Include/arm_math.h ****   /*
 703:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 704:Drivers/CMSIS/Include/arm_math.h ****    */
 705:Drivers/CMSIS/Include/arm_math.h **** #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY)
 706:Drivers/CMSIS/Include/arm_math.h **** 
 707:Drivers/CMSIS/Include/arm_math.h ****   /*
 708:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 709:Drivers/CMSIS/Include/arm_math.h ****    */
 710:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __QADD8(
 711:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 712:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 713:Drivers/CMSIS/Include/arm_math.h ****   {
 714:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s, t, u;
 715:Drivers/CMSIS/Include/arm_math.h **** 
 716:Drivers/CMSIS/Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 717:Drivers/CMSIS/Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 718:Drivers/CMSIS/Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 719:Drivers/CMSIS/Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 720:Drivers/CMSIS/Include/arm_math.h **** 
 721:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 722:Drivers/CMSIS/Include/arm_math.h ****   }
 723:Drivers/CMSIS/Include/arm_math.h **** 
 724:Drivers/CMSIS/Include/arm_math.h **** 
 725:Drivers/CMSIS/Include/arm_math.h ****   /*
 726:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 727:Drivers/CMSIS/Include/arm_math.h ****    */
 728:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __QSUB8(
 729:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 730:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 731:Drivers/CMSIS/Include/arm_math.h ****   {
 732:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s, t, u;
 733:Drivers/CMSIS/Include/arm_math.h **** 
 734:Drivers/CMSIS/Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 735:Drivers/CMSIS/Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 736:Drivers/CMSIS/Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 737:Drivers/CMSIS/Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 738:Drivers/CMSIS/Include/arm_math.h **** 
 739:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 740:Drivers/CMSIS/Include/arm_math.h ****   }
 741:Drivers/CMSIS/Include/arm_math.h **** 
 742:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 37


 743:Drivers/CMSIS/Include/arm_math.h ****   /*
 744:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 745:Drivers/CMSIS/Include/arm_math.h ****    */
 746:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __QADD16(
 747:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 748:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 749:Drivers/CMSIS/Include/arm_math.h ****   {
 750:Drivers/CMSIS/Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 751:Drivers/CMSIS/Include/arm_math.h ****     q31_t r = 0, s = 0;
 752:Drivers/CMSIS/Include/arm_math.h **** 
 753:Drivers/CMSIS/Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 754:Drivers/CMSIS/Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 755:Drivers/CMSIS/Include/arm_math.h **** 
 756:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 757:Drivers/CMSIS/Include/arm_math.h ****   }
 758:Drivers/CMSIS/Include/arm_math.h **** 
 759:Drivers/CMSIS/Include/arm_math.h **** 
 760:Drivers/CMSIS/Include/arm_math.h ****   /*
 761:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 762:Drivers/CMSIS/Include/arm_math.h ****    */
 763:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SHADD16(
 764:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 765:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 766:Drivers/CMSIS/Include/arm_math.h ****   {
 767:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
 768:Drivers/CMSIS/Include/arm_math.h **** 
 769:Drivers/CMSIS/Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 770:Drivers/CMSIS/Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 771:Drivers/CMSIS/Include/arm_math.h **** 
 772:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 773:Drivers/CMSIS/Include/arm_math.h ****   }
 774:Drivers/CMSIS/Include/arm_math.h **** 
 775:Drivers/CMSIS/Include/arm_math.h **** 
 776:Drivers/CMSIS/Include/arm_math.h ****   /*
 777:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 778:Drivers/CMSIS/Include/arm_math.h ****    */
 779:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __QSUB16(
 780:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 781:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 782:Drivers/CMSIS/Include/arm_math.h ****   {
 783:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
 784:Drivers/CMSIS/Include/arm_math.h **** 
 785:Drivers/CMSIS/Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 786:Drivers/CMSIS/Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 787:Drivers/CMSIS/Include/arm_math.h **** 
 788:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 789:Drivers/CMSIS/Include/arm_math.h ****   }
 790:Drivers/CMSIS/Include/arm_math.h **** 
 791:Drivers/CMSIS/Include/arm_math.h **** 
 792:Drivers/CMSIS/Include/arm_math.h ****   /*
 793:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 794:Drivers/CMSIS/Include/arm_math.h ****    */
 795:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SHSUB16(
 796:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 797:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 798:Drivers/CMSIS/Include/arm_math.h ****   {
 799:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 38


 800:Drivers/CMSIS/Include/arm_math.h **** 
 801:Drivers/CMSIS/Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 802:Drivers/CMSIS/Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 803:Drivers/CMSIS/Include/arm_math.h **** 
 804:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 805:Drivers/CMSIS/Include/arm_math.h ****   }
 806:Drivers/CMSIS/Include/arm_math.h **** 
 807:Drivers/CMSIS/Include/arm_math.h **** 
 808:Drivers/CMSIS/Include/arm_math.h ****   /*
 809:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 810:Drivers/CMSIS/Include/arm_math.h ****    */
 811:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __QASX(
 812:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 813:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 814:Drivers/CMSIS/Include/arm_math.h ****   {
 815:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
 816:Drivers/CMSIS/Include/arm_math.h **** 
 817:Drivers/CMSIS/Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 818:Drivers/CMSIS/Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 819:Drivers/CMSIS/Include/arm_math.h **** 
 820:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 821:Drivers/CMSIS/Include/arm_math.h ****   }
 822:Drivers/CMSIS/Include/arm_math.h **** 
 823:Drivers/CMSIS/Include/arm_math.h **** 
 824:Drivers/CMSIS/Include/arm_math.h ****   /*
 825:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 826:Drivers/CMSIS/Include/arm_math.h ****    */
 827:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SHASX(
 828:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 829:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 830:Drivers/CMSIS/Include/arm_math.h ****   {
 831:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
 832:Drivers/CMSIS/Include/arm_math.h **** 
 833:Drivers/CMSIS/Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 834:Drivers/CMSIS/Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 835:Drivers/CMSIS/Include/arm_math.h **** 
 836:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 837:Drivers/CMSIS/Include/arm_math.h ****   }
 838:Drivers/CMSIS/Include/arm_math.h **** 
 839:Drivers/CMSIS/Include/arm_math.h **** 
 840:Drivers/CMSIS/Include/arm_math.h ****   /*
 841:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 842:Drivers/CMSIS/Include/arm_math.h ****    */
 843:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __QSAX(
 844:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 845:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 846:Drivers/CMSIS/Include/arm_math.h ****   {
 847:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
 848:Drivers/CMSIS/Include/arm_math.h **** 
 849:Drivers/CMSIS/Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 850:Drivers/CMSIS/Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 851:Drivers/CMSIS/Include/arm_math.h **** 
 852:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 853:Drivers/CMSIS/Include/arm_math.h ****   }
 854:Drivers/CMSIS/Include/arm_math.h **** 
 855:Drivers/CMSIS/Include/arm_math.h **** 
 856:Drivers/CMSIS/Include/arm_math.h ****   /*
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 39


 857:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 858:Drivers/CMSIS/Include/arm_math.h ****    */
 859:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SHSAX(
 860:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 861:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 862:Drivers/CMSIS/Include/arm_math.h ****   {
 863:Drivers/CMSIS/Include/arm_math.h ****     q31_t r, s;
 864:Drivers/CMSIS/Include/arm_math.h **** 
 865:Drivers/CMSIS/Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 866:Drivers/CMSIS/Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 867:Drivers/CMSIS/Include/arm_math.h **** 
 868:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 869:Drivers/CMSIS/Include/arm_math.h ****   }
 870:Drivers/CMSIS/Include/arm_math.h **** 
 871:Drivers/CMSIS/Include/arm_math.h **** 
 872:Drivers/CMSIS/Include/arm_math.h ****   /*
 873:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 874:Drivers/CMSIS/Include/arm_math.h ****    */
 875:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMUSDX(
 876:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 877:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 878:Drivers/CMSIS/Include/arm_math.h ****   {
 879:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 880:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 881:Drivers/CMSIS/Include/arm_math.h ****   }
 882:Drivers/CMSIS/Include/arm_math.h **** 
 883:Drivers/CMSIS/Include/arm_math.h ****   /*
 884:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 885:Drivers/CMSIS/Include/arm_math.h ****    */
 886:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMUADX(
 887:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 888:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 889:Drivers/CMSIS/Include/arm_math.h ****   {
 890:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 891:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 892:Drivers/CMSIS/Include/arm_math.h ****   }
 893:Drivers/CMSIS/Include/arm_math.h **** 
 894:Drivers/CMSIS/Include/arm_math.h **** 
 895:Drivers/CMSIS/Include/arm_math.h ****   /*
 896:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 897:Drivers/CMSIS/Include/arm_math.h ****    */
 898:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE int32_t __QADD(
 899:Drivers/CMSIS/Include/arm_math.h ****   int32_t x,
 900:Drivers/CMSIS/Include/arm_math.h ****   int32_t y)
 901:Drivers/CMSIS/Include/arm_math.h ****   {
 902:Drivers/CMSIS/Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 903:Drivers/CMSIS/Include/arm_math.h ****   }
 904:Drivers/CMSIS/Include/arm_math.h **** 
 905:Drivers/CMSIS/Include/arm_math.h **** 
 906:Drivers/CMSIS/Include/arm_math.h ****   /*
 907:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 908:Drivers/CMSIS/Include/arm_math.h ****    */
 909:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE int32_t __QSUB(
 910:Drivers/CMSIS/Include/arm_math.h ****   int32_t x,
 911:Drivers/CMSIS/Include/arm_math.h ****   int32_t y)
 912:Drivers/CMSIS/Include/arm_math.h ****   {
 913:Drivers/CMSIS/Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 40


 914:Drivers/CMSIS/Include/arm_math.h ****   }
 915:Drivers/CMSIS/Include/arm_math.h **** 
 916:Drivers/CMSIS/Include/arm_math.h **** 
 917:Drivers/CMSIS/Include/arm_math.h ****   /*
 918:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 919:Drivers/CMSIS/Include/arm_math.h ****    */
 920:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMLAD(
 921:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 922:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y,
 923:Drivers/CMSIS/Include/arm_math.h ****   uint32_t sum)
 924:Drivers/CMSIS/Include/arm_math.h ****   {
 925:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 926:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 927:Drivers/CMSIS/Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 928:Drivers/CMSIS/Include/arm_math.h ****   }
 929:Drivers/CMSIS/Include/arm_math.h **** 
 930:Drivers/CMSIS/Include/arm_math.h **** 
 931:Drivers/CMSIS/Include/arm_math.h ****   /*
 932:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 933:Drivers/CMSIS/Include/arm_math.h ****    */
 934:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMLADX(
 935:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 936:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y,
 937:Drivers/CMSIS/Include/arm_math.h ****   uint32_t sum)
 938:Drivers/CMSIS/Include/arm_math.h ****   {
 939:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 940:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 941:Drivers/CMSIS/Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 942:Drivers/CMSIS/Include/arm_math.h ****   }
 943:Drivers/CMSIS/Include/arm_math.h **** 
 944:Drivers/CMSIS/Include/arm_math.h **** 
 945:Drivers/CMSIS/Include/arm_math.h ****   /*
 946:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMLSDX for M3 and M0 processors
 947:Drivers/CMSIS/Include/arm_math.h ****    */
 948:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMLSDX(
 949:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 950:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y,
 951:Drivers/CMSIS/Include/arm_math.h ****   uint32_t sum)
 952:Drivers/CMSIS/Include/arm_math.h ****   {
 953:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 954:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 955:Drivers/CMSIS/Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 956:Drivers/CMSIS/Include/arm_math.h ****   }
 957:Drivers/CMSIS/Include/arm_math.h **** 
 958:Drivers/CMSIS/Include/arm_math.h **** 
 959:Drivers/CMSIS/Include/arm_math.h ****   /*
 960:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMLALD for M3 and M0 processors
 961:Drivers/CMSIS/Include/arm_math.h ****    */
 962:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint64_t __SMLALD(
 963:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 964:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y,
 965:Drivers/CMSIS/Include/arm_math.h ****   uint64_t sum)
 966:Drivers/CMSIS/Include/arm_math.h ****   {
 967:Drivers/CMSIS/Include/arm_math.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) (y >> 16)) + ((q15_t) x * (q15_t) y)); */
 968:Drivers/CMSIS/Include/arm_math.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 969:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 970:Drivers/CMSIS/Include/arm_math.h ****                        ( ((q63_t)sum    )                                  )   ));
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 41


 971:Drivers/CMSIS/Include/arm_math.h ****   }
 972:Drivers/CMSIS/Include/arm_math.h **** 
 973:Drivers/CMSIS/Include/arm_math.h **** 
 974:Drivers/CMSIS/Include/arm_math.h ****   /*
 975:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMLALDX for M3 and M0 processors
 976:Drivers/CMSIS/Include/arm_math.h ****    */
 977:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint64_t __SMLALDX(
 978:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 979:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y,
 980:Drivers/CMSIS/Include/arm_math.h ****   uint64_t sum)
 981:Drivers/CMSIS/Include/arm_math.h ****   {
 982:Drivers/CMSIS/Include/arm_math.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) y)) + ((q15_t) x * (q15_t) (y >> 16)); */
 983:Drivers/CMSIS/Include/arm_math.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 984:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 985:Drivers/CMSIS/Include/arm_math.h ****                        ( ((q63_t)sum    )                                  )   ));
 986:Drivers/CMSIS/Include/arm_math.h ****   }
 987:Drivers/CMSIS/Include/arm_math.h **** 
 988:Drivers/CMSIS/Include/arm_math.h **** 
 989:Drivers/CMSIS/Include/arm_math.h ****   /*
 990:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMUAD for M3 and M0 processors
 991:Drivers/CMSIS/Include/arm_math.h ****    */
 992:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMUAD(
 993:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
 994:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
 995:Drivers/CMSIS/Include/arm_math.h ****   {
 996:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 997:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 998:Drivers/CMSIS/Include/arm_math.h ****   }
 999:Drivers/CMSIS/Include/arm_math.h **** 
1000:Drivers/CMSIS/Include/arm_math.h **** 
1001:Drivers/CMSIS/Include/arm_math.h ****   /*
1002:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SMUSD for M3 and M0 processors
1003:Drivers/CMSIS/Include/arm_math.h ****    */
1004:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SMUSD(
1005:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x,
1006:Drivers/CMSIS/Include/arm_math.h ****   uint32_t y)
1007:Drivers/CMSIS/Include/arm_math.h ****   {
1008:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) -
1009:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
1010:Drivers/CMSIS/Include/arm_math.h ****   }
1011:Drivers/CMSIS/Include/arm_math.h **** 
1012:Drivers/CMSIS/Include/arm_math.h **** 
1013:Drivers/CMSIS/Include/arm_math.h ****   /*
1014:Drivers/CMSIS/Include/arm_math.h ****    * @brief C custom defined SXTB16 for M3 and M0 processors
1015:Drivers/CMSIS/Include/arm_math.h ****    */
1016:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE uint32_t __SXTB16(
1017:Drivers/CMSIS/Include/arm_math.h ****   uint32_t x)
1018:Drivers/CMSIS/Include/arm_math.h ****   {
1019:Drivers/CMSIS/Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 24) >> 24) & (q31_t)0x0000FFFF) |
1020:Drivers/CMSIS/Include/arm_math.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
1021:Drivers/CMSIS/Include/arm_math.h ****   }
1022:Drivers/CMSIS/Include/arm_math.h **** 
1023:Drivers/CMSIS/Include/arm_math.h **** #endif /* defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
1024:Drivers/CMSIS/Include/arm_math.h **** 
1025:Drivers/CMSIS/Include/arm_math.h **** 
1026:Drivers/CMSIS/Include/arm_math.h ****   /**
1027:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q7 FIR filter.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 42


1028:Drivers/CMSIS/Include/arm_math.h ****    */
1029:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1030:Drivers/CMSIS/Include/arm_math.h ****   {
1031:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;        /**< number of filter coefficients in the filter. */
1032:Drivers/CMSIS/Include/arm_math.h ****     q7_t *pState;            /**< points to the state variable array. The array is of length numTap
1033:Drivers/CMSIS/Include/arm_math.h ****     q7_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.*
1034:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_instance_q7;
1035:Drivers/CMSIS/Include/arm_math.h **** 
1036:Drivers/CMSIS/Include/arm_math.h ****   /**
1037:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 FIR filter.
1038:Drivers/CMSIS/Include/arm_math.h ****    */
1039:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1040:Drivers/CMSIS/Include/arm_math.h ****   {
1041:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;         /**< number of filter coefficients in the filter. */
1042:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;            /**< points to the state variable array. The array is of length numTa
1043:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.
1044:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_instance_q15;
1045:Drivers/CMSIS/Include/arm_math.h **** 
1046:Drivers/CMSIS/Include/arm_math.h ****   /**
1047:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 FIR filter.
1048:Drivers/CMSIS/Include/arm_math.h ****    */
1049:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1050:Drivers/CMSIS/Include/arm_math.h ****   {
1051:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;         /**< number of filter coefficients in the filter. */
1052:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;            /**< points to the state variable array. The array is of length numTa
1053:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;           /**< points to the coefficient array. The array is of length numTaps.
1054:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_instance_q31;
1055:Drivers/CMSIS/Include/arm_math.h **** 
1056:Drivers/CMSIS/Include/arm_math.h ****   /**
1057:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point FIR filter.
1058:Drivers/CMSIS/Include/arm_math.h ****    */
1059:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1060:Drivers/CMSIS/Include/arm_math.h ****   {
1061:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;     /**< number of filter coefficients in the filter. */
1062:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;    /**< points to the state variable array. The array is of length numTaps+b
1063:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;   /**< points to the coefficient array. The array is of length numTaps. */
1064:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_instance_f32;
1065:Drivers/CMSIS/Include/arm_math.h **** 
1066:Drivers/CMSIS/Include/arm_math.h **** 
1067:Drivers/CMSIS/Include/arm_math.h ****   /**
1068:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q7 FIR filter.
1069:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q7 FIR filter structure.
1070:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1071:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1072:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1073:Drivers/CMSIS/Include/arm_math.h ****    */
1074:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_q7(
1075:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_instance_q7 * S,
1076:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
1077:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
1078:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1079:Drivers/CMSIS/Include/arm_math.h **** 
1080:Drivers/CMSIS/Include/arm_math.h **** 
1081:Drivers/CMSIS/Include/arm_math.h ****   /**
1082:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q7 FIR filter.
1083:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q7 FIR structure.
1084:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 43


1085:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1086:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1087:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that are processed.
1088:Drivers/CMSIS/Include/arm_math.h ****    */
1089:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_init_q7(
1090:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_instance_q7 * S,
1091:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
1092:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pCoeffs,
1093:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pState,
1094:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1095:Drivers/CMSIS/Include/arm_math.h **** 
1096:Drivers/CMSIS/Include/arm_math.h **** 
1097:Drivers/CMSIS/Include/arm_math.h ****   /**
1098:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 FIR filter.
1099:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR structure.
1100:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1101:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1102:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1103:Drivers/CMSIS/Include/arm_math.h ****    */
1104:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_q15(
1105:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_instance_q15 * S,
1106:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
1107:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
1108:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1109:Drivers/CMSIS/Include/arm_math.h **** 
1110:Drivers/CMSIS/Include/arm_math.h **** 
1111:Drivers/CMSIS/Include/arm_math.h ****   /**
1112:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the fast Q15 FIR filter for Cortex-M3 and Cortex-M4.
1113:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR filter structure.
1114:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1115:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1116:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1117:Drivers/CMSIS/Include/arm_math.h ****    */
1118:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_fast_q15(
1119:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_instance_q15 * S,
1120:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
1121:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
1122:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1123:Drivers/CMSIS/Include/arm_math.h **** 
1124:Drivers/CMSIS/Include/arm_math.h **** 
1125:Drivers/CMSIS/Include/arm_math.h ****   /**
1126:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 FIR filter.
1127:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 FIR filter structure.
1128:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter. Must be even and greate
1129:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1130:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1131:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that are processed at a time.
1132:Drivers/CMSIS/Include/arm_math.h ****    * @return The function returns ARM_MATH_SUCCESS if initialization was successful or ARM_MATH_ARG
1133:Drivers/CMSIS/Include/arm_math.h ****    * <code>numTaps</code> is not a supported value.
1134:Drivers/CMSIS/Include/arm_math.h ****    */
1135:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_init_q15(
1136:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_instance_q15 * S,
1137:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
1138:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
1139:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
1140:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1141:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 44


1142:Drivers/CMSIS/Include/arm_math.h **** 
1143:Drivers/CMSIS/Include/arm_math.h ****   /**
1144:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 FIR filter.
1145:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR filter structure.
1146:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1147:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1148:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1149:Drivers/CMSIS/Include/arm_math.h ****    */
1150:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_q31(
1151:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_instance_q31 * S,
1152:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
1153:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
1154:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1155:Drivers/CMSIS/Include/arm_math.h **** 
1156:Drivers/CMSIS/Include/arm_math.h **** 
1157:Drivers/CMSIS/Include/arm_math.h ****   /**
1158:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the fast Q31 FIR filter for Cortex-M3 and Cortex-M4.
1159:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR structure.
1160:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1161:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1162:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1163:Drivers/CMSIS/Include/arm_math.h ****    */
1164:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_fast_q31(
1165:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_instance_q31 * S,
1166:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
1167:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
1168:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1169:Drivers/CMSIS/Include/arm_math.h **** 
1170:Drivers/CMSIS/Include/arm_math.h **** 
1171:Drivers/CMSIS/Include/arm_math.h ****   /**
1172:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 FIR filter.
1173:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 FIR structure.
1174:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter.
1175:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1176:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1177:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that are processed at a time.
1178:Drivers/CMSIS/Include/arm_math.h ****    */
1179:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_init_q31(
1180:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_instance_q31 * S,
1181:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
1182:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
1183:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
1184:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1185:Drivers/CMSIS/Include/arm_math.h **** 
1186:Drivers/CMSIS/Include/arm_math.h **** 
1187:Drivers/CMSIS/Include/arm_math.h ****   /**
1188:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point FIR filter.
1189:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR structure.
1190:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1191:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1192:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1193:Drivers/CMSIS/Include/arm_math.h ****    */
1194:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_f32(
1195:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_instance_f32 * S,
1196:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
1197:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
1198:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 45


1199:Drivers/CMSIS/Include/arm_math.h **** 
1200:Drivers/CMSIS/Include/arm_math.h **** 
1201:Drivers/CMSIS/Include/arm_math.h ****   /**
1202:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point FIR filter.
1203:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point FIR filter structure.
1204:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    Number of filter coefficients in the filter.
1205:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1206:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1207:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that are processed at a time.
1208:Drivers/CMSIS/Include/arm_math.h ****    */
1209:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_init_f32(
1210:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_instance_f32 * S,
1211:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
1212:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
1213:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
1214:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1215:Drivers/CMSIS/Include/arm_math.h **** 
1216:Drivers/CMSIS/Include/arm_math.h **** 
1217:Drivers/CMSIS/Include/arm_math.h ****   /**
1218:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 Biquad cascade filter.
1219:Drivers/CMSIS/Include/arm_math.h ****    */
1220:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1221:Drivers/CMSIS/Include/arm_math.h ****   {
1222:Drivers/CMSIS/Include/arm_math.h ****     int8_t numStages;        /**< number of 2nd order stages in the filter.  Overall order is 2*num
1223:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;           /**< Points to the array of state coefficients.  The array is of lengt
1224:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;          /**< Points to the array of coefficients.  The array is of length 5*nu
1225:Drivers/CMSIS/Include/arm_math.h ****     int8_t postShift;        /**< Additional shift, in bits, applied to each output sample. */
1226:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_casd_df1_inst_q15;
1227:Drivers/CMSIS/Include/arm_math.h **** 
1228:Drivers/CMSIS/Include/arm_math.h ****   /**
1229:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 Biquad cascade filter.
1230:Drivers/CMSIS/Include/arm_math.h ****    */
1231:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1232:Drivers/CMSIS/Include/arm_math.h ****   {
1233:Drivers/CMSIS/Include/arm_math.h ****     uint32_t numStages;      /**< number of 2nd order stages in the filter.  Overall order is 2*num
1234:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;           /**< Points to the array of state coefficients.  The array is of lengt
1235:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;          /**< Points to the array of coefficients.  The array is of length 5*nu
1236:Drivers/CMSIS/Include/arm_math.h ****     uint8_t postShift;       /**< Additional shift, in bits, applied to each output sample. */
1237:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_casd_df1_inst_q31;
1238:Drivers/CMSIS/Include/arm_math.h **** 
1239:Drivers/CMSIS/Include/arm_math.h ****   /**
1240:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point Biquad cascade filter.
1241:Drivers/CMSIS/Include/arm_math.h ****    */
1242:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1243:Drivers/CMSIS/Include/arm_math.h ****   {
1244:Drivers/CMSIS/Include/arm_math.h ****     uint32_t numStages;      /**< number of 2nd order stages in the filter.  Overall order is 2*num
1245:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;       /**< Points to the array of state coefficients.  The array is of lengt
1246:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;      /**< Points to the array of coefficients.  The array is of length 5*nu
1247:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_casd_df1_inst_f32;
1248:Drivers/CMSIS/Include/arm_math.h **** 
1249:Drivers/CMSIS/Include/arm_math.h **** 
1250:Drivers/CMSIS/Include/arm_math.h ****   /**
1251:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 Biquad cascade filter.
1252:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 Biquad cascade structure.
1253:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1254:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1255:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 46


1256:Drivers/CMSIS/Include/arm_math.h ****    */
1257:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_q15(
1258:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_casd_df1_inst_q15 * S,
1259:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
1260:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
1261:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1262:Drivers/CMSIS/Include/arm_math.h **** 
1263:Drivers/CMSIS/Include/arm_math.h **** 
1264:Drivers/CMSIS/Include/arm_math.h ****   /**
1265:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 Biquad cascade filter.
1266:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 Biquad cascade structure.
1267:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
1268:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1269:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1270:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     postShift  Shift to be applied to the output. Varies according to the coefficie
1271:Drivers/CMSIS/Include/arm_math.h ****    */
1272:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_init_q15(
1273:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_casd_df1_inst_q15 * S,
1274:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
1275:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
1276:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
1277:Drivers/CMSIS/Include/arm_math.h ****   int8_t postShift);
1278:Drivers/CMSIS/Include/arm_math.h **** 
1279:Drivers/CMSIS/Include/arm_math.h **** 
1280:Drivers/CMSIS/Include/arm_math.h ****   /**
1281:Drivers/CMSIS/Include/arm_math.h ****    * @brief Fast but less precise processing function for the Q15 Biquad cascade filter for Cortex-
1282:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 Biquad cascade structure.
1283:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1284:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1285:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1286:Drivers/CMSIS/Include/arm_math.h ****    */
1287:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_fast_q15(
1288:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_casd_df1_inst_q15 * S,
1289:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
1290:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
1291:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1292:Drivers/CMSIS/Include/arm_math.h **** 
1293:Drivers/CMSIS/Include/arm_math.h **** 
1294:Drivers/CMSIS/Include/arm_math.h ****   /**
1295:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 Biquad cascade filter
1296:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 Biquad cascade structure.
1297:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1298:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1299:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1300:Drivers/CMSIS/Include/arm_math.h ****    */
1301:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_q31(
1302:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_casd_df1_inst_q31 * S,
1303:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
1304:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
1305:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1306:Drivers/CMSIS/Include/arm_math.h **** 
1307:Drivers/CMSIS/Include/arm_math.h **** 
1308:Drivers/CMSIS/Include/arm_math.h ****   /**
1309:Drivers/CMSIS/Include/arm_math.h ****    * @brief Fast but less precise processing function for the Q31 Biquad cascade filter for Cortex-
1310:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 Biquad cascade structure.
1311:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1312:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 47


1313:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1314:Drivers/CMSIS/Include/arm_math.h ****    */
1315:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_fast_q31(
1316:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_casd_df1_inst_q31 * S,
1317:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
1318:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
1319:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1320:Drivers/CMSIS/Include/arm_math.h **** 
1321:Drivers/CMSIS/Include/arm_math.h **** 
1322:Drivers/CMSIS/Include/arm_math.h ****   /**
1323:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 Biquad cascade filter.
1324:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 Biquad cascade structure.
1325:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
1326:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1327:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1328:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     postShift  Shift to be applied to the output. Varies according to the coefficie
1329:Drivers/CMSIS/Include/arm_math.h ****    */
1330:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_init_q31(
1331:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_casd_df1_inst_q31 * S,
1332:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
1333:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
1334:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
1335:Drivers/CMSIS/Include/arm_math.h ****   int8_t postShift);
1336:Drivers/CMSIS/Include/arm_math.h **** 
1337:Drivers/CMSIS/Include/arm_math.h **** 
1338:Drivers/CMSIS/Include/arm_math.h ****   /**
1339:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point Biquad cascade filter.
1340:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point Biquad cascade structure.
1341:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
1342:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
1343:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
1344:Drivers/CMSIS/Include/arm_math.h ****    */
1345:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_f32(
1346:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_casd_df1_inst_f32 * S,
1347:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
1348:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
1349:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1350:Drivers/CMSIS/Include/arm_math.h **** 
1351:Drivers/CMSIS/Include/arm_math.h **** 
1352:Drivers/CMSIS/Include/arm_math.h ****   /**
1353:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point Biquad cascade filter.
1354:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point Biquad cascade structure
1355:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
1356:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
1357:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
1358:Drivers/CMSIS/Include/arm_math.h ****    */
1359:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df1_init_f32(
1360:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_casd_df1_inst_f32 * S,
1361:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
1362:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
1363:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState);
1364:Drivers/CMSIS/Include/arm_math.h **** 
1365:Drivers/CMSIS/Include/arm_math.h **** 
1366:Drivers/CMSIS/Include/arm_math.h ****   /**
1367:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point matrix structure.
1368:Drivers/CMSIS/Include/arm_math.h ****    */
1369:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 48


1370:Drivers/CMSIS/Include/arm_math.h ****   {
1371:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1372:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1373:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pData;     /**< points to the data of the matrix. */
1374:Drivers/CMSIS/Include/arm_math.h ****   } arm_matrix_instance_f32;
1375:Drivers/CMSIS/Include/arm_math.h **** 
1376:Drivers/CMSIS/Include/arm_math.h **** 
1377:Drivers/CMSIS/Include/arm_math.h ****   /**
1378:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point matrix structure.
1379:Drivers/CMSIS/Include/arm_math.h ****    */
1380:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1381:Drivers/CMSIS/Include/arm_math.h ****   {
1382:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1383:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1384:Drivers/CMSIS/Include/arm_math.h ****     float64_t *pData;     /**< points to the data of the matrix. */
1385:Drivers/CMSIS/Include/arm_math.h ****   } arm_matrix_instance_f64;
1386:Drivers/CMSIS/Include/arm_math.h **** 
1387:Drivers/CMSIS/Include/arm_math.h ****   /**
1388:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 matrix structure.
1389:Drivers/CMSIS/Include/arm_math.h ****    */
1390:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1391:Drivers/CMSIS/Include/arm_math.h ****   {
1392:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1393:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1394:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pData;         /**< points to the data of the matrix. */
1395:Drivers/CMSIS/Include/arm_math.h ****   } arm_matrix_instance_q15;
1396:Drivers/CMSIS/Include/arm_math.h **** 
1397:Drivers/CMSIS/Include/arm_math.h ****   /**
1398:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 matrix structure.
1399:Drivers/CMSIS/Include/arm_math.h ****    */
1400:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1401:Drivers/CMSIS/Include/arm_math.h ****   {
1402:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;     /**< number of rows of the matrix.     */
1403:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;     /**< number of columns of the matrix.  */
1404:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pData;         /**< points to the data of the matrix. */
1405:Drivers/CMSIS/Include/arm_math.h ****   } arm_matrix_instance_q31;
1406:Drivers/CMSIS/Include/arm_math.h **** 
1407:Drivers/CMSIS/Include/arm_math.h **** 
1408:Drivers/CMSIS/Include/arm_math.h ****   /**
1409:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix addition.
1410:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1411:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1412:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1413:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1414:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1415:Drivers/CMSIS/Include/arm_math.h ****    */
1416:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_add_f32(
1417:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1418:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1419:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * pDst);
1420:Drivers/CMSIS/Include/arm_math.h **** 
1421:Drivers/CMSIS/Include/arm_math.h **** 
1422:Drivers/CMSIS/Include/arm_math.h ****   /**
1423:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 matrix addition.
1424:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]   pSrcA  points to the first input matrix structure
1425:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]   pSrcB  points to the second input matrix structure
1426:Drivers/CMSIS/Include/arm_math.h ****    * @param[out]  pDst   points to output matrix structure
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 49


1427:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1428:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1429:Drivers/CMSIS/Include/arm_math.h ****    */
1430:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_add_q15(
1431:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1432:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1433:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst);
1434:Drivers/CMSIS/Include/arm_math.h **** 
1435:Drivers/CMSIS/Include/arm_math.h **** 
1436:Drivers/CMSIS/Include/arm_math.h ****   /**
1437:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 matrix addition.
1438:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1439:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1440:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1441:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1442:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1443:Drivers/CMSIS/Include/arm_math.h ****    */
1444:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_add_q31(
1445:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1446:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1447:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1448:Drivers/CMSIS/Include/arm_math.h **** 
1449:Drivers/CMSIS/Include/arm_math.h **** 
1450:Drivers/CMSIS/Include/arm_math.h ****   /**
1451:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point, complex, matrix multiplication.
1452:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1453:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1454:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1455:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1456:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1457:Drivers/CMSIS/Include/arm_math.h ****    */
1458:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_cmplx_mult_f32(
1459:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1460:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1461:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * pDst);
1462:Drivers/CMSIS/Include/arm_math.h **** 
1463:Drivers/CMSIS/Include/arm_math.h **** 
1464:Drivers/CMSIS/Include/arm_math.h ****   /**
1465:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15, complex,  matrix multiplication.
1466:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1467:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1468:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1469:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1470:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1471:Drivers/CMSIS/Include/arm_math.h ****    */
1472:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_cmplx_mult_q15(
1473:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1474:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1475:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst,
1476:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch);
1477:Drivers/CMSIS/Include/arm_math.h **** 
1478:Drivers/CMSIS/Include/arm_math.h **** 
1479:Drivers/CMSIS/Include/arm_math.h ****   /**
1480:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31, complex, matrix multiplication.
1481:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1482:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1483:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 50


1484:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1485:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1486:Drivers/CMSIS/Include/arm_math.h ****    */
1487:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_cmplx_mult_q31(
1488:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1489:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1490:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1491:Drivers/CMSIS/Include/arm_math.h **** 
1492:Drivers/CMSIS/Include/arm_math.h **** 
1493:Drivers/CMSIS/Include/arm_math.h ****   /**
1494:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix transpose.
1495:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc  points to the input matrix
1496:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst  points to the output matrix
1497:Drivers/CMSIS/Include/arm_math.h ****    * @return    The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
1498:Drivers/CMSIS/Include/arm_math.h ****    * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
1499:Drivers/CMSIS/Include/arm_math.h ****    */
1500:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_trans_f32(
1501:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrc,
1502:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * pDst);
1503:Drivers/CMSIS/Include/arm_math.h **** 
1504:Drivers/CMSIS/Include/arm_math.h **** 
1505:Drivers/CMSIS/Include/arm_math.h ****   /**
1506:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 matrix transpose.
1507:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc  points to the input matrix
1508:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst  points to the output matrix
1509:Drivers/CMSIS/Include/arm_math.h ****    * @return    The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
1510:Drivers/CMSIS/Include/arm_math.h ****    * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
1511:Drivers/CMSIS/Include/arm_math.h ****    */
1512:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_trans_q15(
1513:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrc,
1514:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst);
1515:Drivers/CMSIS/Include/arm_math.h **** 
1516:Drivers/CMSIS/Include/arm_math.h **** 
1517:Drivers/CMSIS/Include/arm_math.h ****   /**
1518:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 matrix transpose.
1519:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc  points to the input matrix
1520:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst  points to the output matrix
1521:Drivers/CMSIS/Include/arm_math.h ****    * @return    The function returns either  <code>ARM_MATH_SIZE_MISMATCH</code>
1522:Drivers/CMSIS/Include/arm_math.h ****    * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
1523:Drivers/CMSIS/Include/arm_math.h ****    */
1524:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_trans_q31(
1525:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrc,
1526:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1527:Drivers/CMSIS/Include/arm_math.h **** 
1528:Drivers/CMSIS/Include/arm_math.h **** 
1529:Drivers/CMSIS/Include/arm_math.h ****   /**
1530:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix multiplication
1531:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1532:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1533:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1534:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1535:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1536:Drivers/CMSIS/Include/arm_math.h ****    */
1537:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_mult_f32(
1538:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1539:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1540:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * pDst);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 51


1541:Drivers/CMSIS/Include/arm_math.h **** 
1542:Drivers/CMSIS/Include/arm_math.h **** 
1543:Drivers/CMSIS/Include/arm_math.h ****   /**
1544:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 matrix multiplication
1545:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA   points to the first input matrix structure
1546:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB   points to the second input matrix structure
1547:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst    points to output matrix structure
1548:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pState  points to the array for storing intermediate results
1549:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1550:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1551:Drivers/CMSIS/Include/arm_math.h ****    */
1552:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_mult_q15(
1553:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1554:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1555:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst,
1556:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState);
1557:Drivers/CMSIS/Include/arm_math.h **** 
1558:Drivers/CMSIS/Include/arm_math.h **** 
1559:Drivers/CMSIS/Include/arm_math.h ****   /**
1560:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
1561:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA   points to the first input matrix structure
1562:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB   points to the second input matrix structure
1563:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst    points to output matrix structure
1564:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pState  points to the array for storing intermediate results
1565:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1566:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1567:Drivers/CMSIS/Include/arm_math.h ****    */
1568:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_mult_fast_q15(
1569:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1570:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1571:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst,
1572:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState);
1573:Drivers/CMSIS/Include/arm_math.h **** 
1574:Drivers/CMSIS/Include/arm_math.h **** 
1575:Drivers/CMSIS/Include/arm_math.h ****   /**
1576:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 matrix multiplication
1577:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1578:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1579:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1580:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1581:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1582:Drivers/CMSIS/Include/arm_math.h ****    */
1583:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_mult_q31(
1584:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1585:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1586:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1587:Drivers/CMSIS/Include/arm_math.h **** 
1588:Drivers/CMSIS/Include/arm_math.h **** 
1589:Drivers/CMSIS/Include/arm_math.h ****   /**
1590:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
1591:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1592:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1593:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1594:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1595:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1596:Drivers/CMSIS/Include/arm_math.h ****    */
1597:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_mult_fast_q31(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 52


1598:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1599:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1600:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1601:Drivers/CMSIS/Include/arm_math.h **** 
1602:Drivers/CMSIS/Include/arm_math.h **** 
1603:Drivers/CMSIS/Include/arm_math.h ****   /**
1604:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix subtraction
1605:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1606:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1607:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1608:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1609:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1610:Drivers/CMSIS/Include/arm_math.h ****    */
1611:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_sub_f32(
1612:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcA,
1613:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrcB,
1614:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * pDst);
1615:Drivers/CMSIS/Include/arm_math.h **** 
1616:Drivers/CMSIS/Include/arm_math.h **** 
1617:Drivers/CMSIS/Include/arm_math.h ****   /**
1618:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 matrix subtraction
1619:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1620:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1621:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1622:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1623:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1624:Drivers/CMSIS/Include/arm_math.h ****    */
1625:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_sub_q15(
1626:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcA,
1627:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrcB,
1628:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst);
1629:Drivers/CMSIS/Include/arm_math.h **** 
1630:Drivers/CMSIS/Include/arm_math.h **** 
1631:Drivers/CMSIS/Include/arm_math.h ****   /**
1632:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 matrix subtraction
1633:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA  points to the first input matrix structure
1634:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB  points to the second input matrix structure
1635:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to output matrix structure
1636:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1637:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1638:Drivers/CMSIS/Include/arm_math.h ****    */
1639:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_sub_q31(
1640:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcA,
1641:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrcB,
1642:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1643:Drivers/CMSIS/Include/arm_math.h **** 
1644:Drivers/CMSIS/Include/arm_math.h **** 
1645:Drivers/CMSIS/Include/arm_math.h ****   /**
1646:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix scaling.
1647:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc   points to the input matrix
1648:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scale  scale factor
1649:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst   points to the output matrix
1650:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1651:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1652:Drivers/CMSIS/Include/arm_math.h ****    */
1653:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_scale_f32(
1654:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * pSrc,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 53


1655:Drivers/CMSIS/Include/arm_math.h ****   float32_t scale,
1656:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * pDst);
1657:Drivers/CMSIS/Include/arm_math.h **** 
1658:Drivers/CMSIS/Include/arm_math.h **** 
1659:Drivers/CMSIS/Include/arm_math.h ****   /**
1660:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 matrix scaling.
1661:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to input matrix
1662:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale factor
1663:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
1664:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to output matrix
1665:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1666:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1667:Drivers/CMSIS/Include/arm_math.h ****    */
1668:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_scale_q15(
1669:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q15 * pSrc,
1670:Drivers/CMSIS/Include/arm_math.h ****   q15_t scaleFract,
1671:Drivers/CMSIS/Include/arm_math.h ****   int32_t shift,
1672:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * pDst);
1673:Drivers/CMSIS/Include/arm_math.h **** 
1674:Drivers/CMSIS/Include/arm_math.h **** 
1675:Drivers/CMSIS/Include/arm_math.h ****   /**
1676:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 matrix scaling.
1677:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to input matrix
1678:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale factor
1679:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
1680:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to output matrix structure
1681:Drivers/CMSIS/Include/arm_math.h ****    * @return     The function returns either
1682:Drivers/CMSIS/Include/arm_math.h ****    * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of s
1683:Drivers/CMSIS/Include/arm_math.h ****    */
1684:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_scale_q31(
1685:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_q31 * pSrc,
1686:Drivers/CMSIS/Include/arm_math.h ****   q31_t scaleFract,
1687:Drivers/CMSIS/Include/arm_math.h ****   int32_t shift,
1688:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * pDst);
1689:Drivers/CMSIS/Include/arm_math.h **** 
1690:Drivers/CMSIS/Include/arm_math.h **** 
1691:Drivers/CMSIS/Include/arm_math.h ****   /**
1692:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q31 matrix initialization.
1693:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S         points to an instance of the floating-point matrix structure.
1694:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     nRows     number of rows in the matrix.
1695:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     nColumns  number of columns in the matrix.
1696:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pData     points to the matrix data array.
1697:Drivers/CMSIS/Include/arm_math.h ****    */
1698:Drivers/CMSIS/Include/arm_math.h ****   void arm_mat_init_q31(
1699:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q31 * S,
1700:Drivers/CMSIS/Include/arm_math.h ****   uint16_t nRows,
1701:Drivers/CMSIS/Include/arm_math.h ****   uint16_t nColumns,
1702:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pData);
1703:Drivers/CMSIS/Include/arm_math.h **** 
1704:Drivers/CMSIS/Include/arm_math.h **** 
1705:Drivers/CMSIS/Include/arm_math.h ****   /**
1706:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q15 matrix initialization.
1707:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S         points to an instance of the floating-point matrix structure.
1708:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     nRows     number of rows in the matrix.
1709:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     nColumns  number of columns in the matrix.
1710:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pData     points to the matrix data array.
1711:Drivers/CMSIS/Include/arm_math.h ****    */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 54


1712:Drivers/CMSIS/Include/arm_math.h ****   void arm_mat_init_q15(
1713:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_q15 * S,
1714:Drivers/CMSIS/Include/arm_math.h ****   uint16_t nRows,
1715:Drivers/CMSIS/Include/arm_math.h ****   uint16_t nColumns,
1716:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pData);
1717:Drivers/CMSIS/Include/arm_math.h **** 
1718:Drivers/CMSIS/Include/arm_math.h **** 
1719:Drivers/CMSIS/Include/arm_math.h ****   /**
1720:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point matrix initialization.
1721:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S         points to an instance of the floating-point matrix structure.
1722:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     nRows     number of rows in the matrix.
1723:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     nColumns  number of columns in the matrix.
1724:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pData     points to the matrix data array.
1725:Drivers/CMSIS/Include/arm_math.h ****    */
1726:Drivers/CMSIS/Include/arm_math.h ****   void arm_mat_init_f32(
1727:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * S,
1728:Drivers/CMSIS/Include/arm_math.h ****   uint16_t nRows,
1729:Drivers/CMSIS/Include/arm_math.h ****   uint16_t nColumns,
1730:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pData);
1731:Drivers/CMSIS/Include/arm_math.h **** 
1732:Drivers/CMSIS/Include/arm_math.h **** 
1733:Drivers/CMSIS/Include/arm_math.h **** 
1734:Drivers/CMSIS/Include/arm_math.h ****   /**
1735:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 PID Control.
1736:Drivers/CMSIS/Include/arm_math.h ****    */
1737:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1738:Drivers/CMSIS/Include/arm_math.h ****   {
1739:Drivers/CMSIS/Include/arm_math.h ****     q15_t A0;           /**< The derived gain, A0 = Kp + Ki + Kd . */
1740:Drivers/CMSIS/Include/arm_math.h **** #ifdef ARM_MATH_CM0_FAMILY
1741:Drivers/CMSIS/Include/arm_math.h ****     q15_t A1;
1742:Drivers/CMSIS/Include/arm_math.h ****     q15_t A2;
1743:Drivers/CMSIS/Include/arm_math.h **** #else
1744:Drivers/CMSIS/Include/arm_math.h ****     q31_t A1;           /**< The derived gain A1 = -Kp - 2Kd | Kd.*/
1745:Drivers/CMSIS/Include/arm_math.h **** #endif
1746:Drivers/CMSIS/Include/arm_math.h ****     q15_t state[3];     /**< The state array of length 3. */
1747:Drivers/CMSIS/Include/arm_math.h ****     q15_t Kp;           /**< The proportional gain. */
1748:Drivers/CMSIS/Include/arm_math.h ****     q15_t Ki;           /**< The integral gain. */
1749:Drivers/CMSIS/Include/arm_math.h ****     q15_t Kd;           /**< The derivative gain. */
1750:Drivers/CMSIS/Include/arm_math.h ****   } arm_pid_instance_q15;
1751:Drivers/CMSIS/Include/arm_math.h **** 
1752:Drivers/CMSIS/Include/arm_math.h ****   /**
1753:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 PID Control.
1754:Drivers/CMSIS/Include/arm_math.h ****    */
1755:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1756:Drivers/CMSIS/Include/arm_math.h ****   {
1757:Drivers/CMSIS/Include/arm_math.h ****     q31_t A0;            /**< The derived gain, A0 = Kp + Ki + Kd . */
1758:Drivers/CMSIS/Include/arm_math.h ****     q31_t A1;            /**< The derived gain, A1 = -Kp - 2Kd. */
1759:Drivers/CMSIS/Include/arm_math.h ****     q31_t A2;            /**< The derived gain, A2 = Kd . */
1760:Drivers/CMSIS/Include/arm_math.h ****     q31_t state[3];      /**< The state array of length 3. */
1761:Drivers/CMSIS/Include/arm_math.h ****     q31_t Kp;            /**< The proportional gain. */
1762:Drivers/CMSIS/Include/arm_math.h ****     q31_t Ki;            /**< The integral gain. */
1763:Drivers/CMSIS/Include/arm_math.h ****     q31_t Kd;            /**< The derivative gain. */
1764:Drivers/CMSIS/Include/arm_math.h ****   } arm_pid_instance_q31;
1765:Drivers/CMSIS/Include/arm_math.h **** 
1766:Drivers/CMSIS/Include/arm_math.h ****   /**
1767:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point PID Control.
1768:Drivers/CMSIS/Include/arm_math.h ****    */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 55


1769:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1770:Drivers/CMSIS/Include/arm_math.h ****   {
1771:Drivers/CMSIS/Include/arm_math.h ****     float32_t A0;          /**< The derived gain, A0 = Kp + Ki + Kd . */
1772:Drivers/CMSIS/Include/arm_math.h ****     float32_t A1;          /**< The derived gain, A1 = -Kp - 2Kd. */
1773:Drivers/CMSIS/Include/arm_math.h ****     float32_t A2;          /**< The derived gain, A2 = Kd . */
1774:Drivers/CMSIS/Include/arm_math.h ****     float32_t state[3];    /**< The state array of length 3. */
1775:Drivers/CMSIS/Include/arm_math.h ****     float32_t Kp;          /**< The proportional gain. */
1776:Drivers/CMSIS/Include/arm_math.h ****     float32_t Ki;          /**< The integral gain. */
1777:Drivers/CMSIS/Include/arm_math.h ****     float32_t Kd;          /**< The derivative gain. */
1778:Drivers/CMSIS/Include/arm_math.h ****   } arm_pid_instance_f32;
1779:Drivers/CMSIS/Include/arm_math.h **** 
1780:Drivers/CMSIS/Include/arm_math.h **** 
1781:Drivers/CMSIS/Include/arm_math.h **** 
1782:Drivers/CMSIS/Include/arm_math.h ****   /**
1783:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point PID Control.
1784:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S               points to an instance of the PID structure.
1785:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the s
1786:Drivers/CMSIS/Include/arm_math.h ****    */
1787:Drivers/CMSIS/Include/arm_math.h ****   void arm_pid_init_f32(
1788:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_f32 * S,
1789:Drivers/CMSIS/Include/arm_math.h ****   int32_t resetStateFlag);
1790:Drivers/CMSIS/Include/arm_math.h **** 
1791:Drivers/CMSIS/Include/arm_math.h **** 
1792:Drivers/CMSIS/Include/arm_math.h ****   /**
1793:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Reset function for the floating-point PID Control.
1794:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S  is an instance of the floating-point PID Control structure
1795:Drivers/CMSIS/Include/arm_math.h ****    */
1796:Drivers/CMSIS/Include/arm_math.h ****   void arm_pid_reset_f32(
1797:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_f32 * S);
1798:Drivers/CMSIS/Include/arm_math.h **** 
1799:Drivers/CMSIS/Include/arm_math.h **** 
1800:Drivers/CMSIS/Include/arm_math.h ****   /**
1801:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 PID Control.
1802:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S               points to an instance of the Q15 PID structure.
1803:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the s
1804:Drivers/CMSIS/Include/arm_math.h ****    */
1805:Drivers/CMSIS/Include/arm_math.h ****   void arm_pid_init_q31(
1806:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_q31 * S,
1807:Drivers/CMSIS/Include/arm_math.h ****   int32_t resetStateFlag);
1808:Drivers/CMSIS/Include/arm_math.h **** 
1809:Drivers/CMSIS/Include/arm_math.h **** 
1810:Drivers/CMSIS/Include/arm_math.h ****   /**
1811:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Reset function for the Q31 PID Control.
1812:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S   points to an instance of the Q31 PID Control structure
1813:Drivers/CMSIS/Include/arm_math.h ****    */
1814:Drivers/CMSIS/Include/arm_math.h **** 
1815:Drivers/CMSIS/Include/arm_math.h ****   void arm_pid_reset_q31(
1816:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_q31 * S);
1817:Drivers/CMSIS/Include/arm_math.h **** 
1818:Drivers/CMSIS/Include/arm_math.h **** 
1819:Drivers/CMSIS/Include/arm_math.h ****   /**
1820:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 PID Control.
1821:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S               points to an instance of the Q15 PID structure.
1822:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the s
1823:Drivers/CMSIS/Include/arm_math.h ****    */
1824:Drivers/CMSIS/Include/arm_math.h ****   void arm_pid_init_q15(
1825:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_q15 * S,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 56


1826:Drivers/CMSIS/Include/arm_math.h ****   int32_t resetStateFlag);
1827:Drivers/CMSIS/Include/arm_math.h **** 
1828:Drivers/CMSIS/Include/arm_math.h **** 
1829:Drivers/CMSIS/Include/arm_math.h ****   /**
1830:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Reset function for the Q15 PID Control.
1831:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S  points to an instance of the q15 PID Control structure
1832:Drivers/CMSIS/Include/arm_math.h ****    */
1833:Drivers/CMSIS/Include/arm_math.h ****   void arm_pid_reset_q15(
1834:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_q15 * S);
1835:Drivers/CMSIS/Include/arm_math.h **** 
1836:Drivers/CMSIS/Include/arm_math.h **** 
1837:Drivers/CMSIS/Include/arm_math.h ****   /**
1838:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point Linear Interpolate function.
1839:Drivers/CMSIS/Include/arm_math.h ****    */
1840:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1841:Drivers/CMSIS/Include/arm_math.h ****   {
1842:Drivers/CMSIS/Include/arm_math.h ****     uint32_t nValues;           /**< nValues */
1843:Drivers/CMSIS/Include/arm_math.h ****     float32_t x1;               /**< x1 */
1844:Drivers/CMSIS/Include/arm_math.h ****     float32_t xSpacing;         /**< xSpacing */
1845:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pYData;          /**< pointer to the table of Y values */
1846:Drivers/CMSIS/Include/arm_math.h ****   } arm_linear_interp_instance_f32;
1847:Drivers/CMSIS/Include/arm_math.h **** 
1848:Drivers/CMSIS/Include/arm_math.h ****   /**
1849:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point bilinear interpolation function.
1850:Drivers/CMSIS/Include/arm_math.h ****    */
1851:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1852:Drivers/CMSIS/Include/arm_math.h ****   {
1853:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1854:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1855:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pData;   /**< points to the data table. */
1856:Drivers/CMSIS/Include/arm_math.h ****   } arm_bilinear_interp_instance_f32;
1857:Drivers/CMSIS/Include/arm_math.h **** 
1858:Drivers/CMSIS/Include/arm_math.h ****    /**
1859:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 bilinear interpolation function.
1860:Drivers/CMSIS/Include/arm_math.h ****    */
1861:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1862:Drivers/CMSIS/Include/arm_math.h ****   {
1863:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1864:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1865:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pData;       /**< points to the data table. */
1866:Drivers/CMSIS/Include/arm_math.h ****   } arm_bilinear_interp_instance_q31;
1867:Drivers/CMSIS/Include/arm_math.h **** 
1868:Drivers/CMSIS/Include/arm_math.h ****    /**
1869:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 bilinear interpolation function.
1870:Drivers/CMSIS/Include/arm_math.h ****    */
1871:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1872:Drivers/CMSIS/Include/arm_math.h ****   {
1873:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1874:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1875:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pData;       /**< points to the data table. */
1876:Drivers/CMSIS/Include/arm_math.h ****   } arm_bilinear_interp_instance_q15;
1877:Drivers/CMSIS/Include/arm_math.h **** 
1878:Drivers/CMSIS/Include/arm_math.h ****    /**
1879:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 bilinear interpolation function.
1880:Drivers/CMSIS/Include/arm_math.h ****    */
1881:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1882:Drivers/CMSIS/Include/arm_math.h ****   {
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 57


1883:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numRows;   /**< number of rows in the data table. */
1884:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numCols;   /**< number of columns in the data table. */
1885:Drivers/CMSIS/Include/arm_math.h ****     q7_t *pData;        /**< points to the data table. */
1886:Drivers/CMSIS/Include/arm_math.h ****   } arm_bilinear_interp_instance_q7;
1887:Drivers/CMSIS/Include/arm_math.h **** 
1888:Drivers/CMSIS/Include/arm_math.h **** 
1889:Drivers/CMSIS/Include/arm_math.h ****   /**
1890:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q7 vector multiplication.
1891:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1892:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1893:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
1894:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1895:Drivers/CMSIS/Include/arm_math.h ****    */
1896:Drivers/CMSIS/Include/arm_math.h ****   void arm_mult_q7(
1897:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
1898:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
1899:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
1900:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1901:Drivers/CMSIS/Include/arm_math.h **** 
1902:Drivers/CMSIS/Include/arm_math.h **** 
1903:Drivers/CMSIS/Include/arm_math.h ****   /**
1904:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 vector multiplication.
1905:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1906:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1907:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
1908:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1909:Drivers/CMSIS/Include/arm_math.h ****    */
1910:Drivers/CMSIS/Include/arm_math.h ****   void arm_mult_q15(
1911:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
1912:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
1913:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
1914:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1915:Drivers/CMSIS/Include/arm_math.h **** 
1916:Drivers/CMSIS/Include/arm_math.h **** 
1917:Drivers/CMSIS/Include/arm_math.h ****   /**
1918:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 vector multiplication.
1919:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1920:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1921:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
1922:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1923:Drivers/CMSIS/Include/arm_math.h ****    */
1924:Drivers/CMSIS/Include/arm_math.h ****   void arm_mult_q31(
1925:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
1926:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
1927:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
1928:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1929:Drivers/CMSIS/Include/arm_math.h **** 
1930:Drivers/CMSIS/Include/arm_math.h **** 
1931:Drivers/CMSIS/Include/arm_math.h ****   /**
1932:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point vector multiplication.
1933:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
1934:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
1935:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
1936:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
1937:Drivers/CMSIS/Include/arm_math.h ****    */
1938:Drivers/CMSIS/Include/arm_math.h ****   void arm_mult_f32(
1939:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 58


1940:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
1941:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
1942:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
1943:Drivers/CMSIS/Include/arm_math.h **** 
1944:Drivers/CMSIS/Include/arm_math.h **** 
1945:Drivers/CMSIS/Include/arm_math.h ****   /**
1946:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 CFFT/CIFFT function.
1947:Drivers/CMSIS/Include/arm_math.h ****    */
1948:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1949:Drivers/CMSIS/Include/arm_math.h ****   {
1950:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
1951:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
1952:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
1953:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pTwiddle;                 /**< points to the Sin twiddle factor table. */
1954:Drivers/CMSIS/Include/arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
1955:Drivers/CMSIS/Include/arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
1956:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
1957:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_radix2_instance_q15;
1958:Drivers/CMSIS/Include/arm_math.h **** 
1959:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
1960:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_cfft_radix2_init_q15(
1961:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix2_instance_q15 * S,
1962:Drivers/CMSIS/Include/arm_math.h ****   uint16_t fftLen,
1963:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
1964:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
1965:Drivers/CMSIS/Include/arm_math.h **** 
1966:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
1967:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_radix2_q15(
1968:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_radix2_instance_q15 * S,
1969:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc);
1970:Drivers/CMSIS/Include/arm_math.h **** 
1971:Drivers/CMSIS/Include/arm_math.h **** 
1972:Drivers/CMSIS/Include/arm_math.h ****   /**
1973:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 CFFT/CIFFT function.
1974:Drivers/CMSIS/Include/arm_math.h ****    */
1975:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
1976:Drivers/CMSIS/Include/arm_math.h ****   {
1977:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
1978:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
1979:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
1980:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pTwiddle;                 /**< points to the twiddle factor table. */
1981:Drivers/CMSIS/Include/arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
1982:Drivers/CMSIS/Include/arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
1983:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
1984:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_radix4_instance_q15;
1985:Drivers/CMSIS/Include/arm_math.h **** 
1986:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
1987:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_cfft_radix4_init_q15(
1988:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_q15 * S,
1989:Drivers/CMSIS/Include/arm_math.h ****   uint16_t fftLen,
1990:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
1991:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
1992:Drivers/CMSIS/Include/arm_math.h **** 
1993:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
1994:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_radix4_q15(
1995:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_radix4_instance_q15 * S,
1996:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 59


1997:Drivers/CMSIS/Include/arm_math.h **** 
1998:Drivers/CMSIS/Include/arm_math.h ****   /**
1999:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Radix-2 Q31 CFFT/CIFFT function.
2000:Drivers/CMSIS/Include/arm_math.h ****    */
2001:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2002:Drivers/CMSIS/Include/arm_math.h ****   {
2003:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
2004:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
2005:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
2006:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pTwiddle;                 /**< points to the Twiddle factor table. */
2007:Drivers/CMSIS/Include/arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
2008:Drivers/CMSIS/Include/arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
2009:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
2010:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_radix2_instance_q31;
2011:Drivers/CMSIS/Include/arm_math.h **** 
2012:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2013:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_cfft_radix2_init_q31(
2014:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix2_instance_q31 * S,
2015:Drivers/CMSIS/Include/arm_math.h ****   uint16_t fftLen,
2016:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
2017:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
2018:Drivers/CMSIS/Include/arm_math.h **** 
2019:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2020:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_radix2_q31(
2021:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_radix2_instance_q31 * S,
2022:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc);
2023:Drivers/CMSIS/Include/arm_math.h **** 
2024:Drivers/CMSIS/Include/arm_math.h ****   /**
2025:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 CFFT/CIFFT function.
2026:Drivers/CMSIS/Include/arm_math.h ****    */
2027:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2028:Drivers/CMSIS/Include/arm_math.h ****   {
2029:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                 /**< length of the FFT. */
2030:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag;                /**< flag that selects forward (ifftFlag=0) or inverse (ifftFl
2031:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag;          /**< flag that enables (bitReverseFlag=1) or disables (bitReve
2032:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pTwiddle;                 /**< points to the twiddle factor table. */
2033:Drivers/CMSIS/Include/arm_math.h ****     uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
2034:Drivers/CMSIS/Include/arm_math.h ****     uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size
2035:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs w
2036:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_radix4_instance_q31;
2037:Drivers/CMSIS/Include/arm_math.h **** 
2038:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2039:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_radix4_q31(
2040:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_radix4_instance_q31 * S,
2041:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc);
2042:Drivers/CMSIS/Include/arm_math.h **** 
2043:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2044:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_cfft_radix4_init_q31(
2045:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_q31 * S,
2046:Drivers/CMSIS/Include/arm_math.h ****   uint16_t fftLen,
2047:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
2048:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
2049:Drivers/CMSIS/Include/arm_math.h **** 
2050:Drivers/CMSIS/Include/arm_math.h ****   /**
2051:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point CFFT/CIFFT function.
2052:Drivers/CMSIS/Include/arm_math.h ****    */
2053:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 60


2054:Drivers/CMSIS/Include/arm_math.h ****   {
2055:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2056:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag;                  /**< flag that selects forward (ifftFlag=0) or inverse (ifft
2057:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag;            /**< flag that enables (bitReverseFlag=1) or disables (bitRe
2058:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pTwiddle;               /**< points to the Twiddle factor table. */
2059:Drivers/CMSIS/Include/arm_math.h ****     uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
2060:Drivers/CMSIS/Include/arm_math.h ****     uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different si
2061:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs
2062:Drivers/CMSIS/Include/arm_math.h ****     float32_t onebyfftLen;             /**< value of 1/fftLen. */
2063:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_radix2_instance_f32;
2064:Drivers/CMSIS/Include/arm_math.h **** 
2065:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2066:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_cfft_radix2_init_f32(
2067:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix2_instance_f32 * S,
2068:Drivers/CMSIS/Include/arm_math.h ****   uint16_t fftLen,
2069:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
2070:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
2071:Drivers/CMSIS/Include/arm_math.h **** 
2072:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2073:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_radix2_f32(
2074:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_radix2_instance_f32 * S,
2075:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc);
2076:Drivers/CMSIS/Include/arm_math.h **** 
2077:Drivers/CMSIS/Include/arm_math.h ****   /**
2078:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point CFFT/CIFFT function.
2079:Drivers/CMSIS/Include/arm_math.h ****    */
2080:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2081:Drivers/CMSIS/Include/arm_math.h ****   {
2082:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2083:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag;                  /**< flag that selects forward (ifftFlag=0) or inverse (ifft
2084:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag;            /**< flag that enables (bitReverseFlag=1) or disables (bitRe
2085:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pTwiddle;               /**< points to the Twiddle factor table. */
2086:Drivers/CMSIS/Include/arm_math.h ****     uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
2087:Drivers/CMSIS/Include/arm_math.h ****     uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different si
2088:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs
2089:Drivers/CMSIS/Include/arm_math.h ****     float32_t onebyfftLen;             /**< value of 1/fftLen. */
2090:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_radix4_instance_f32;
2091:Drivers/CMSIS/Include/arm_math.h **** 
2092:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2093:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_cfft_radix4_init_f32(
2094:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_f32 * S,
2095:Drivers/CMSIS/Include/arm_math.h ****   uint16_t fftLen,
2096:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
2097:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
2098:Drivers/CMSIS/Include/arm_math.h **** 
2099:Drivers/CMSIS/Include/arm_math.h **** /* Deprecated */
2100:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_radix4_f32(
2101:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_radix4_instance_f32 * S,
2102:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc);
2103:Drivers/CMSIS/Include/arm_math.h **** 
2104:Drivers/CMSIS/Include/arm_math.h ****   /**
2105:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the fixed-point CFFT/CIFFT function.
2106:Drivers/CMSIS/Include/arm_math.h ****    */
2107:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2108:Drivers/CMSIS/Include/arm_math.h ****   {
2109:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2110:Drivers/CMSIS/Include/arm_math.h ****     const q15_t *pTwiddle;             /**< points to the Twiddle factor table. */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 61


2111:Drivers/CMSIS/Include/arm_math.h ****     const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
2112:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevLength;             /**< bit reversal table length. */
2113:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_instance_q15;
2114:Drivers/CMSIS/Include/arm_math.h **** 
2115:Drivers/CMSIS/Include/arm_math.h **** void arm_cfft_q15(
2116:Drivers/CMSIS/Include/arm_math.h ****     const arm_cfft_instance_q15 * S,
2117:Drivers/CMSIS/Include/arm_math.h ****     q15_t * p1,
2118:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag,
2119:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag);
2120:Drivers/CMSIS/Include/arm_math.h **** 
2121:Drivers/CMSIS/Include/arm_math.h ****   /**
2122:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the fixed-point CFFT/CIFFT function.
2123:Drivers/CMSIS/Include/arm_math.h ****    */
2124:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2125:Drivers/CMSIS/Include/arm_math.h ****   {
2126:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2127:Drivers/CMSIS/Include/arm_math.h ****     const q31_t *pTwiddle;             /**< points to the Twiddle factor table. */
2128:Drivers/CMSIS/Include/arm_math.h ****     const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
2129:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevLength;             /**< bit reversal table length. */
2130:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_instance_q31;
2131:Drivers/CMSIS/Include/arm_math.h **** 
2132:Drivers/CMSIS/Include/arm_math.h **** void arm_cfft_q31(
2133:Drivers/CMSIS/Include/arm_math.h ****     const arm_cfft_instance_q31 * S,
2134:Drivers/CMSIS/Include/arm_math.h ****     q31_t * p1,
2135:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlag,
2136:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlag);
2137:Drivers/CMSIS/Include/arm_math.h **** 
2138:Drivers/CMSIS/Include/arm_math.h ****   /**
2139:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point CFFT/CIFFT function.
2140:Drivers/CMSIS/Include/arm_math.h ****    */
2141:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2142:Drivers/CMSIS/Include/arm_math.h ****   {
2143:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLen;                   /**< length of the FFT. */
2144:Drivers/CMSIS/Include/arm_math.h ****     const float32_t *pTwiddle;         /**< points to the Twiddle factor table. */
2145:Drivers/CMSIS/Include/arm_math.h ****     const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
2146:Drivers/CMSIS/Include/arm_math.h ****     uint16_t bitRevLength;             /**< bit reversal table length. */
2147:Drivers/CMSIS/Include/arm_math.h ****   } arm_cfft_instance_f32;
2148:Drivers/CMSIS/Include/arm_math.h **** 
2149:Drivers/CMSIS/Include/arm_math.h ****   void arm_cfft_f32(
2150:Drivers/CMSIS/Include/arm_math.h ****   const arm_cfft_instance_f32 * S,
2151:Drivers/CMSIS/Include/arm_math.h ****   float32_t * p1,
2152:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag,
2153:Drivers/CMSIS/Include/arm_math.h ****   uint8_t bitReverseFlag);
2154:Drivers/CMSIS/Include/arm_math.h **** 
2155:Drivers/CMSIS/Include/arm_math.h ****   /**
2156:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 RFFT/RIFFT function.
2157:Drivers/CMSIS/Include/arm_math.h ****    */
2158:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2159:Drivers/CMSIS/Include/arm_math.h ****   {
2160:Drivers/CMSIS/Include/arm_math.h ****     uint32_t fftLenReal;                      /**< length of the real FFT. */
2161:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlagR;                        /**< flag that selects forward (ifftFlagR=0) or inver
2162:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlagR;                  /**< flag that enables (bitReverseFlagR=1) or disable
2163:Drivers/CMSIS/Include/arm_math.h ****     uint32_t twidCoefRModifier;               /**< twiddle coefficient modifier that supports diffe
2164:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pTwiddleAReal;                     /**< points to the real twiddle factor table. */
2165:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pTwiddleBReal;                     /**< points to the imag twiddle factor table. */
2166:Drivers/CMSIS/Include/arm_math.h ****     const arm_cfft_instance_q15 *pCfft;       /**< points to the complex FFT instance. */
2167:Drivers/CMSIS/Include/arm_math.h ****   } arm_rfft_instance_q15;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 62


2168:Drivers/CMSIS/Include/arm_math.h **** 
2169:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_rfft_init_q15(
2170:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_instance_q15 * S,
2171:Drivers/CMSIS/Include/arm_math.h ****   uint32_t fftLenReal,
2172:Drivers/CMSIS/Include/arm_math.h ****   uint32_t ifftFlagR,
2173:Drivers/CMSIS/Include/arm_math.h ****   uint32_t bitReverseFlag);
2174:Drivers/CMSIS/Include/arm_math.h **** 
2175:Drivers/CMSIS/Include/arm_math.h ****   void arm_rfft_q15(
2176:Drivers/CMSIS/Include/arm_math.h ****   const arm_rfft_instance_q15 * S,
2177:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2178:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst);
2179:Drivers/CMSIS/Include/arm_math.h **** 
2180:Drivers/CMSIS/Include/arm_math.h ****   /**
2181:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 RFFT/RIFFT function.
2182:Drivers/CMSIS/Include/arm_math.h ****    */
2183:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2184:Drivers/CMSIS/Include/arm_math.h ****   {
2185:Drivers/CMSIS/Include/arm_math.h ****     uint32_t fftLenReal;                        /**< length of the real FFT. */
2186:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlagR;                          /**< flag that selects forward (ifftFlagR=0) or inv
2187:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlagR;                    /**< flag that enables (bitReverseFlagR=1) or disab
2188:Drivers/CMSIS/Include/arm_math.h ****     uint32_t twidCoefRModifier;                 /**< twiddle coefficient modifier that supports dif
2189:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pTwiddleAReal;                       /**< points to the real twiddle factor table. */
2190:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pTwiddleBReal;                       /**< points to the imag twiddle factor table. */
2191:Drivers/CMSIS/Include/arm_math.h ****     const arm_cfft_instance_q31 *pCfft;         /**< points to the complex FFT instance. */
2192:Drivers/CMSIS/Include/arm_math.h ****   } arm_rfft_instance_q31;
2193:Drivers/CMSIS/Include/arm_math.h **** 
2194:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_rfft_init_q31(
2195:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_instance_q31 * S,
2196:Drivers/CMSIS/Include/arm_math.h ****   uint32_t fftLenReal,
2197:Drivers/CMSIS/Include/arm_math.h ****   uint32_t ifftFlagR,
2198:Drivers/CMSIS/Include/arm_math.h ****   uint32_t bitReverseFlag);
2199:Drivers/CMSIS/Include/arm_math.h **** 
2200:Drivers/CMSIS/Include/arm_math.h ****   void arm_rfft_q31(
2201:Drivers/CMSIS/Include/arm_math.h ****   const arm_rfft_instance_q31 * S,
2202:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2203:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst);
2204:Drivers/CMSIS/Include/arm_math.h **** 
2205:Drivers/CMSIS/Include/arm_math.h ****   /**
2206:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point RFFT/RIFFT function.
2207:Drivers/CMSIS/Include/arm_math.h ****    */
2208:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2209:Drivers/CMSIS/Include/arm_math.h ****   {
2210:Drivers/CMSIS/Include/arm_math.h ****     uint32_t fftLenReal;                        /**< length of the real FFT. */
2211:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLenBy2;                         /**< length of the complex FFT. */
2212:Drivers/CMSIS/Include/arm_math.h ****     uint8_t ifftFlagR;                          /**< flag that selects forward (ifftFlagR=0) or inv
2213:Drivers/CMSIS/Include/arm_math.h ****     uint8_t bitReverseFlagR;                    /**< flag that enables (bitReverseFlagR=1) or disab
2214:Drivers/CMSIS/Include/arm_math.h ****     uint32_t twidCoefRModifier;                     /**< twiddle coefficient modifier that supports
2215:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pTwiddleAReal;                   /**< points to the real twiddle factor table. */
2216:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pTwiddleBReal;                   /**< points to the imag twiddle factor table. */
2217:Drivers/CMSIS/Include/arm_math.h ****     arm_cfft_radix4_instance_f32 *pCfft;        /**< points to the complex FFT instance. */
2218:Drivers/CMSIS/Include/arm_math.h ****   } arm_rfft_instance_f32;
2219:Drivers/CMSIS/Include/arm_math.h **** 
2220:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_rfft_init_f32(
2221:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_instance_f32 * S,
2222:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_f32 * S_CFFT,
2223:Drivers/CMSIS/Include/arm_math.h ****   uint32_t fftLenReal,
2224:Drivers/CMSIS/Include/arm_math.h ****   uint32_t ifftFlagR,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 63


2225:Drivers/CMSIS/Include/arm_math.h ****   uint32_t bitReverseFlag);
2226:Drivers/CMSIS/Include/arm_math.h **** 
2227:Drivers/CMSIS/Include/arm_math.h ****   void arm_rfft_f32(
2228:Drivers/CMSIS/Include/arm_math.h ****   const arm_rfft_instance_f32 * S,
2229:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
2230:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst);
2231:Drivers/CMSIS/Include/arm_math.h **** 
2232:Drivers/CMSIS/Include/arm_math.h ****   /**
2233:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point RFFT/RIFFT function.
2234:Drivers/CMSIS/Include/arm_math.h ****    */
2235:Drivers/CMSIS/Include/arm_math.h **** typedef struct
2236:Drivers/CMSIS/Include/arm_math.h ****   {
2237:Drivers/CMSIS/Include/arm_math.h ****     arm_cfft_instance_f32 Sint;      /**< Internal CFFT structure. */
2238:Drivers/CMSIS/Include/arm_math.h ****     uint16_t fftLenRFFT;             /**< length of the real sequence */
2239:Drivers/CMSIS/Include/arm_math.h ****     float32_t * pTwiddleRFFT;        /**< Twiddle factors real stage  */
2240:Drivers/CMSIS/Include/arm_math.h ****   } arm_rfft_fast_instance_f32 ;
2241:Drivers/CMSIS/Include/arm_math.h **** 
2242:Drivers/CMSIS/Include/arm_math.h **** arm_status arm_rfft_fast_init_f32 (
2243:Drivers/CMSIS/Include/arm_math.h ****    arm_rfft_fast_instance_f32 * S,
2244:Drivers/CMSIS/Include/arm_math.h ****    uint16_t fftLen);
2245:Drivers/CMSIS/Include/arm_math.h **** 
2246:Drivers/CMSIS/Include/arm_math.h **** void arm_rfft_fast_f32(
2247:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_fast_instance_f32 * S,
2248:Drivers/CMSIS/Include/arm_math.h ****   float32_t * p, float32_t * pOut,
2249:Drivers/CMSIS/Include/arm_math.h ****   uint8_t ifftFlag);
2250:Drivers/CMSIS/Include/arm_math.h **** 
2251:Drivers/CMSIS/Include/arm_math.h ****   /**
2252:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point DCT4/IDCT4 function.
2253:Drivers/CMSIS/Include/arm_math.h ****    */
2254:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2255:Drivers/CMSIS/Include/arm_math.h ****   {
2256:Drivers/CMSIS/Include/arm_math.h ****     uint16_t N;                          /**< length of the DCT4. */
2257:Drivers/CMSIS/Include/arm_math.h ****     uint16_t Nby2;                       /**< half of the length of the DCT4. */
2258:Drivers/CMSIS/Include/arm_math.h ****     float32_t normalize;                 /**< normalizing factor. */
2259:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pTwiddle;                 /**< points to the twiddle factor table. */
2260:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCosFactor;               /**< points to the cosFactor table. */
2261:Drivers/CMSIS/Include/arm_math.h ****     arm_rfft_instance_f32 *pRfft;        /**< points to the real FFT instance. */
2262:Drivers/CMSIS/Include/arm_math.h ****     arm_cfft_radix4_instance_f32 *pCfft; /**< points to the complex FFT instance. */
2263:Drivers/CMSIS/Include/arm_math.h ****   } arm_dct4_instance_f32;
2264:Drivers/CMSIS/Include/arm_math.h **** 
2265:Drivers/CMSIS/Include/arm_math.h **** 
2266:Drivers/CMSIS/Include/arm_math.h ****   /**
2267:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point DCT4/IDCT4.
2268:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of floating-point DCT4/IDCT4 structure.
2269:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S_RFFT     points to an instance of floating-point RFFT/RIFFT structure.
2270:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S_CFFT     points to an instance of floating-point CFFT/CIFFT structure.
2271:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     N          length of the DCT4.
2272:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     Nby2       half of the length of the DCT4.
2273:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     normalize  normalizing factor.
2274:Drivers/CMSIS/Include/arm_math.h ****    * @return      arm_status function returns ARM_MATH_SUCCESS if initialization is successful or A
2275:Drivers/CMSIS/Include/arm_math.h ****    */
2276:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_dct4_init_f32(
2277:Drivers/CMSIS/Include/arm_math.h ****   arm_dct4_instance_f32 * S,
2278:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_instance_f32 * S_RFFT,
2279:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_f32 * S_CFFT,
2280:Drivers/CMSIS/Include/arm_math.h ****   uint16_t N,
2281:Drivers/CMSIS/Include/arm_math.h ****   uint16_t Nby2,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 64


2282:Drivers/CMSIS/Include/arm_math.h ****   float32_t normalize);
2283:Drivers/CMSIS/Include/arm_math.h **** 
2284:Drivers/CMSIS/Include/arm_math.h **** 
2285:Drivers/CMSIS/Include/arm_math.h ****   /**
2286:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point DCT4/IDCT4.
2287:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S              points to an instance of the floating-point DCT4/IDCT4 structure
2288:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState         points to state buffer.
2289:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] pInlineBuffer  points to the in-place input and output buffer.
2290:Drivers/CMSIS/Include/arm_math.h ****    */
2291:Drivers/CMSIS/Include/arm_math.h ****   void arm_dct4_f32(
2292:Drivers/CMSIS/Include/arm_math.h ****   const arm_dct4_instance_f32 * S,
2293:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
2294:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pInlineBuffer);
2295:Drivers/CMSIS/Include/arm_math.h **** 
2296:Drivers/CMSIS/Include/arm_math.h **** 
2297:Drivers/CMSIS/Include/arm_math.h ****   /**
2298:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 DCT4/IDCT4 function.
2299:Drivers/CMSIS/Include/arm_math.h ****    */
2300:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2301:Drivers/CMSIS/Include/arm_math.h ****   {
2302:Drivers/CMSIS/Include/arm_math.h ****     uint16_t N;                          /**< length of the DCT4. */
2303:Drivers/CMSIS/Include/arm_math.h ****     uint16_t Nby2;                       /**< half of the length of the DCT4. */
2304:Drivers/CMSIS/Include/arm_math.h ****     q31_t normalize;                     /**< normalizing factor. */
2305:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pTwiddle;                     /**< points to the twiddle factor table. */
2306:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCosFactor;                   /**< points to the cosFactor table. */
2307:Drivers/CMSIS/Include/arm_math.h ****     arm_rfft_instance_q31 *pRfft;        /**< points to the real FFT instance. */
2308:Drivers/CMSIS/Include/arm_math.h ****     arm_cfft_radix4_instance_q31 *pCfft; /**< points to the complex FFT instance. */
2309:Drivers/CMSIS/Include/arm_math.h ****   } arm_dct4_instance_q31;
2310:Drivers/CMSIS/Include/arm_math.h **** 
2311:Drivers/CMSIS/Include/arm_math.h **** 
2312:Drivers/CMSIS/Include/arm_math.h ****   /**
2313:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 DCT4/IDCT4.
2314:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of Q31 DCT4/IDCT4 structure.
2315:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S_RFFT     points to an instance of Q31 RFFT/RIFFT structure
2316:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S_CFFT     points to an instance of Q31 CFFT/CIFFT structure
2317:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     N          length of the DCT4.
2318:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     Nby2       half of the length of the DCT4.
2319:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     normalize  normalizing factor.
2320:Drivers/CMSIS/Include/arm_math.h ****    * @return      arm_status function returns ARM_MATH_SUCCESS if initialization is successful or A
2321:Drivers/CMSIS/Include/arm_math.h ****    */
2322:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_dct4_init_q31(
2323:Drivers/CMSIS/Include/arm_math.h ****   arm_dct4_instance_q31 * S,
2324:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_instance_q31 * S_RFFT,
2325:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_q31 * S_CFFT,
2326:Drivers/CMSIS/Include/arm_math.h ****   uint16_t N,
2327:Drivers/CMSIS/Include/arm_math.h ****   uint16_t Nby2,
2328:Drivers/CMSIS/Include/arm_math.h ****   q31_t normalize);
2329:Drivers/CMSIS/Include/arm_math.h **** 
2330:Drivers/CMSIS/Include/arm_math.h **** 
2331:Drivers/CMSIS/Include/arm_math.h ****   /**
2332:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 DCT4/IDCT4.
2333:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S              points to an instance of the Q31 DCT4 structure.
2334:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState         points to state buffer.
2335:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] pInlineBuffer  points to the in-place input and output buffer.
2336:Drivers/CMSIS/Include/arm_math.h ****    */
2337:Drivers/CMSIS/Include/arm_math.h ****   void arm_dct4_q31(
2338:Drivers/CMSIS/Include/arm_math.h ****   const arm_dct4_instance_q31 * S,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 65


2339:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
2340:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pInlineBuffer);
2341:Drivers/CMSIS/Include/arm_math.h **** 
2342:Drivers/CMSIS/Include/arm_math.h **** 
2343:Drivers/CMSIS/Include/arm_math.h ****   /**
2344:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 DCT4/IDCT4 function.
2345:Drivers/CMSIS/Include/arm_math.h ****    */
2346:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
2347:Drivers/CMSIS/Include/arm_math.h ****   {
2348:Drivers/CMSIS/Include/arm_math.h ****     uint16_t N;                          /**< length of the DCT4. */
2349:Drivers/CMSIS/Include/arm_math.h ****     uint16_t Nby2;                       /**< half of the length of the DCT4. */
2350:Drivers/CMSIS/Include/arm_math.h ****     q15_t normalize;                     /**< normalizing factor. */
2351:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pTwiddle;                     /**< points to the twiddle factor table. */
2352:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCosFactor;                   /**< points to the cosFactor table. */
2353:Drivers/CMSIS/Include/arm_math.h ****     arm_rfft_instance_q15 *pRfft;        /**< points to the real FFT instance. */
2354:Drivers/CMSIS/Include/arm_math.h ****     arm_cfft_radix4_instance_q15 *pCfft; /**< points to the complex FFT instance. */
2355:Drivers/CMSIS/Include/arm_math.h ****   } arm_dct4_instance_q15;
2356:Drivers/CMSIS/Include/arm_math.h **** 
2357:Drivers/CMSIS/Include/arm_math.h **** 
2358:Drivers/CMSIS/Include/arm_math.h ****   /**
2359:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 DCT4/IDCT4.
2360:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of Q15 DCT4/IDCT4 structure.
2361:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S_RFFT     points to an instance of Q15 RFFT/RIFFT structure.
2362:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S_CFFT     points to an instance of Q15 CFFT/CIFFT structure.
2363:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     N          length of the DCT4.
2364:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     Nby2       half of the length of the DCT4.
2365:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     normalize  normalizing factor.
2366:Drivers/CMSIS/Include/arm_math.h ****    * @return      arm_status function returns ARM_MATH_SUCCESS if initialization is successful or A
2367:Drivers/CMSIS/Include/arm_math.h ****    */
2368:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_dct4_init_q15(
2369:Drivers/CMSIS/Include/arm_math.h ****   arm_dct4_instance_q15 * S,
2370:Drivers/CMSIS/Include/arm_math.h ****   arm_rfft_instance_q15 * S_RFFT,
2371:Drivers/CMSIS/Include/arm_math.h ****   arm_cfft_radix4_instance_q15 * S_CFFT,
2372:Drivers/CMSIS/Include/arm_math.h ****   uint16_t N,
2373:Drivers/CMSIS/Include/arm_math.h ****   uint16_t Nby2,
2374:Drivers/CMSIS/Include/arm_math.h ****   q15_t normalize);
2375:Drivers/CMSIS/Include/arm_math.h **** 
2376:Drivers/CMSIS/Include/arm_math.h **** 
2377:Drivers/CMSIS/Include/arm_math.h ****   /**
2378:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 DCT4/IDCT4.
2379:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     S              points to an instance of the Q15 DCT4 structure.
2380:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState         points to state buffer.
2381:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] pInlineBuffer  points to the in-place input and output buffer.
2382:Drivers/CMSIS/Include/arm_math.h ****    */
2383:Drivers/CMSIS/Include/arm_math.h ****   void arm_dct4_q15(
2384:Drivers/CMSIS/Include/arm_math.h ****   const arm_dct4_instance_q15 * S,
2385:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
2386:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pInlineBuffer);
2387:Drivers/CMSIS/Include/arm_math.h **** 
2388:Drivers/CMSIS/Include/arm_math.h **** 
2389:Drivers/CMSIS/Include/arm_math.h ****   /**
2390:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point vector addition.
2391:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2392:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2393:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2394:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2395:Drivers/CMSIS/Include/arm_math.h ****    */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 66


2396:Drivers/CMSIS/Include/arm_math.h ****   void arm_add_f32(
2397:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
2398:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
2399:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2400:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2401:Drivers/CMSIS/Include/arm_math.h **** 
2402:Drivers/CMSIS/Include/arm_math.h **** 
2403:Drivers/CMSIS/Include/arm_math.h ****   /**
2404:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q7 vector addition.
2405:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2406:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2407:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2408:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2409:Drivers/CMSIS/Include/arm_math.h ****    */
2410:Drivers/CMSIS/Include/arm_math.h ****   void arm_add_q7(
2411:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
2412:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
2413:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2414:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2415:Drivers/CMSIS/Include/arm_math.h **** 
2416:Drivers/CMSIS/Include/arm_math.h **** 
2417:Drivers/CMSIS/Include/arm_math.h ****   /**
2418:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 vector addition.
2419:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2420:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2421:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2422:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2423:Drivers/CMSIS/Include/arm_math.h ****    */
2424:Drivers/CMSIS/Include/arm_math.h ****   void arm_add_q15(
2425:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
2426:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
2427:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2428:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2429:Drivers/CMSIS/Include/arm_math.h **** 
2430:Drivers/CMSIS/Include/arm_math.h **** 
2431:Drivers/CMSIS/Include/arm_math.h ****   /**
2432:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 vector addition.
2433:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2434:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2435:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2436:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2437:Drivers/CMSIS/Include/arm_math.h ****    */
2438:Drivers/CMSIS/Include/arm_math.h ****   void arm_add_q31(
2439:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
2440:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
2441:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2442:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2443:Drivers/CMSIS/Include/arm_math.h **** 
2444:Drivers/CMSIS/Include/arm_math.h **** 
2445:Drivers/CMSIS/Include/arm_math.h ****   /**
2446:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point vector subtraction.
2447:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2448:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2449:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2450:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2451:Drivers/CMSIS/Include/arm_math.h ****    */
2452:Drivers/CMSIS/Include/arm_math.h ****   void arm_sub_f32(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 67


2453:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
2454:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
2455:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2456:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2457:Drivers/CMSIS/Include/arm_math.h **** 
2458:Drivers/CMSIS/Include/arm_math.h **** 
2459:Drivers/CMSIS/Include/arm_math.h ****   /**
2460:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q7 vector subtraction.
2461:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2462:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2463:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2464:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2465:Drivers/CMSIS/Include/arm_math.h ****    */
2466:Drivers/CMSIS/Include/arm_math.h ****   void arm_sub_q7(
2467:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
2468:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
2469:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2470:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2471:Drivers/CMSIS/Include/arm_math.h **** 
2472:Drivers/CMSIS/Include/arm_math.h **** 
2473:Drivers/CMSIS/Include/arm_math.h ****   /**
2474:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 vector subtraction.
2475:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2476:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2477:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2478:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2479:Drivers/CMSIS/Include/arm_math.h ****    */
2480:Drivers/CMSIS/Include/arm_math.h ****   void arm_sub_q15(
2481:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
2482:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
2483:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2484:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2485:Drivers/CMSIS/Include/arm_math.h **** 
2486:Drivers/CMSIS/Include/arm_math.h **** 
2487:Drivers/CMSIS/Include/arm_math.h ****   /**
2488:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 vector subtraction.
2489:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2490:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2491:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2492:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2493:Drivers/CMSIS/Include/arm_math.h ****    */
2494:Drivers/CMSIS/Include/arm_math.h ****   void arm_sub_q31(
2495:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
2496:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
2497:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2498:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2499:Drivers/CMSIS/Include/arm_math.h **** 
2500:Drivers/CMSIS/Include/arm_math.h **** 
2501:Drivers/CMSIS/Include/arm_math.h ****   /**
2502:Drivers/CMSIS/Include/arm_math.h ****    * @brief Multiplies a floating-point vector by a scalar.
2503:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2504:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scale      scale factor to be applied
2505:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2506:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2507:Drivers/CMSIS/Include/arm_math.h ****    */
2508:Drivers/CMSIS/Include/arm_math.h ****   void arm_scale_f32(
2509:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 68


2510:Drivers/CMSIS/Include/arm_math.h ****   float32_t scale,
2511:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2512:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2513:Drivers/CMSIS/Include/arm_math.h **** 
2514:Drivers/CMSIS/Include/arm_math.h **** 
2515:Drivers/CMSIS/Include/arm_math.h ****   /**
2516:Drivers/CMSIS/Include/arm_math.h ****    * @brief Multiplies a Q7 vector by a scalar.
2517:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the input vector
2518:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale value
2519:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
2520:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the output vector
2521:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize   number of samples in the vector
2522:Drivers/CMSIS/Include/arm_math.h ****    */
2523:Drivers/CMSIS/Include/arm_math.h ****   void arm_scale_q7(
2524:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
2525:Drivers/CMSIS/Include/arm_math.h ****   q7_t scaleFract,
2526:Drivers/CMSIS/Include/arm_math.h ****   int8_t shift,
2527:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2528:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2529:Drivers/CMSIS/Include/arm_math.h **** 
2530:Drivers/CMSIS/Include/arm_math.h **** 
2531:Drivers/CMSIS/Include/arm_math.h ****   /**
2532:Drivers/CMSIS/Include/arm_math.h ****    * @brief Multiplies a Q15 vector by a scalar.
2533:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the input vector
2534:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale value
2535:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
2536:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the output vector
2537:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize   number of samples in the vector
2538:Drivers/CMSIS/Include/arm_math.h ****    */
2539:Drivers/CMSIS/Include/arm_math.h ****   void arm_scale_q15(
2540:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2541:Drivers/CMSIS/Include/arm_math.h ****   q15_t scaleFract,
2542:Drivers/CMSIS/Include/arm_math.h ****   int8_t shift,
2543:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2544:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2545:Drivers/CMSIS/Include/arm_math.h **** 
2546:Drivers/CMSIS/Include/arm_math.h **** 
2547:Drivers/CMSIS/Include/arm_math.h ****   /**
2548:Drivers/CMSIS/Include/arm_math.h ****    * @brief Multiplies a Q31 vector by a scalar.
2549:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the input vector
2550:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  scaleFract  fractional portion of the scale value
2551:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shift       number of bits to shift the result by
2552:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the output vector
2553:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize   number of samples in the vector
2554:Drivers/CMSIS/Include/arm_math.h ****    */
2555:Drivers/CMSIS/Include/arm_math.h ****   void arm_scale_q31(
2556:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2557:Drivers/CMSIS/Include/arm_math.h ****   q31_t scaleFract,
2558:Drivers/CMSIS/Include/arm_math.h ****   int8_t shift,
2559:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2560:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2561:Drivers/CMSIS/Include/arm_math.h **** 
2562:Drivers/CMSIS/Include/arm_math.h **** 
2563:Drivers/CMSIS/Include/arm_math.h ****   /**
2564:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q7 vector absolute value.
2565:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2566:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output buffer
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 69


2567:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2568:Drivers/CMSIS/Include/arm_math.h ****    */
2569:Drivers/CMSIS/Include/arm_math.h ****   void arm_abs_q7(
2570:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
2571:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2572:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2573:Drivers/CMSIS/Include/arm_math.h **** 
2574:Drivers/CMSIS/Include/arm_math.h **** 
2575:Drivers/CMSIS/Include/arm_math.h ****   /**
2576:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point vector absolute value.
2577:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2578:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output buffer
2579:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2580:Drivers/CMSIS/Include/arm_math.h ****    */
2581:Drivers/CMSIS/Include/arm_math.h ****   void arm_abs_f32(
2582:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
2583:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2584:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2585:Drivers/CMSIS/Include/arm_math.h **** 
2586:Drivers/CMSIS/Include/arm_math.h **** 
2587:Drivers/CMSIS/Include/arm_math.h ****   /**
2588:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q15 vector absolute value.
2589:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2590:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output buffer
2591:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2592:Drivers/CMSIS/Include/arm_math.h ****    */
2593:Drivers/CMSIS/Include/arm_math.h ****   void arm_abs_q15(
2594:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2595:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2596:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2597:Drivers/CMSIS/Include/arm_math.h **** 
2598:Drivers/CMSIS/Include/arm_math.h **** 
2599:Drivers/CMSIS/Include/arm_math.h ****   /**
2600:Drivers/CMSIS/Include/arm_math.h ****    * @brief Q31 vector absolute value.
2601:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input buffer
2602:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output buffer
2603:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2604:Drivers/CMSIS/Include/arm_math.h ****    */
2605:Drivers/CMSIS/Include/arm_math.h ****   void arm_abs_q31(
2606:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2607:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2608:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2609:Drivers/CMSIS/Include/arm_math.h **** 
2610:Drivers/CMSIS/Include/arm_math.h **** 
2611:Drivers/CMSIS/Include/arm_math.h ****   /**
2612:Drivers/CMSIS/Include/arm_math.h ****    * @brief Dot product of floating-point vectors.
2613:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2614:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2615:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2616:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] result     output result returned here
2617:Drivers/CMSIS/Include/arm_math.h ****    */
2618:Drivers/CMSIS/Include/arm_math.h ****   void arm_dot_prod_f32(
2619:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
2620:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
2621:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
2622:Drivers/CMSIS/Include/arm_math.h ****   float32_t * result);
2623:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 70


2624:Drivers/CMSIS/Include/arm_math.h **** 
2625:Drivers/CMSIS/Include/arm_math.h ****   /**
2626:Drivers/CMSIS/Include/arm_math.h ****    * @brief Dot product of Q7 vectors.
2627:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2628:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2629:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2630:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] result     output result returned here
2631:Drivers/CMSIS/Include/arm_math.h ****    */
2632:Drivers/CMSIS/Include/arm_math.h ****   void arm_dot_prod_q7(
2633:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
2634:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
2635:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
2636:Drivers/CMSIS/Include/arm_math.h ****   q31_t * result);
2637:Drivers/CMSIS/Include/arm_math.h **** 
2638:Drivers/CMSIS/Include/arm_math.h **** 
2639:Drivers/CMSIS/Include/arm_math.h ****   /**
2640:Drivers/CMSIS/Include/arm_math.h ****    * @brief Dot product of Q15 vectors.
2641:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2642:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2643:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2644:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] result     output result returned here
2645:Drivers/CMSIS/Include/arm_math.h ****    */
2646:Drivers/CMSIS/Include/arm_math.h ****   void arm_dot_prod_q15(
2647:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
2648:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
2649:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
2650:Drivers/CMSIS/Include/arm_math.h ****   q63_t * result);
2651:Drivers/CMSIS/Include/arm_math.h **** 
2652:Drivers/CMSIS/Include/arm_math.h **** 
2653:Drivers/CMSIS/Include/arm_math.h ****   /**
2654:Drivers/CMSIS/Include/arm_math.h ****    * @brief Dot product of Q31 vectors.
2655:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input vector
2656:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input vector
2657:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in each vector
2658:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] result     output result returned here
2659:Drivers/CMSIS/Include/arm_math.h ****    */
2660:Drivers/CMSIS/Include/arm_math.h ****   void arm_dot_prod_q31(
2661:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
2662:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
2663:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
2664:Drivers/CMSIS/Include/arm_math.h ****   q63_t * result);
2665:Drivers/CMSIS/Include/arm_math.h **** 
2666:Drivers/CMSIS/Include/arm_math.h **** 
2667:Drivers/CMSIS/Include/arm_math.h ****   /**
2668:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Shifts the elements of a Q7 vector a specified number of bits.
2669:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2670:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
2671:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2672:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2673:Drivers/CMSIS/Include/arm_math.h ****    */
2674:Drivers/CMSIS/Include/arm_math.h ****   void arm_shift_q7(
2675:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
2676:Drivers/CMSIS/Include/arm_math.h ****   int8_t shiftBits,
2677:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2678:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2679:Drivers/CMSIS/Include/arm_math.h **** 
2680:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 71


2681:Drivers/CMSIS/Include/arm_math.h ****   /**
2682:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Shifts the elements of a Q15 vector a specified number of bits.
2683:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2684:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
2685:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2686:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2687:Drivers/CMSIS/Include/arm_math.h ****    */
2688:Drivers/CMSIS/Include/arm_math.h ****   void arm_shift_q15(
2689:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2690:Drivers/CMSIS/Include/arm_math.h ****   int8_t shiftBits,
2691:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2692:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2693:Drivers/CMSIS/Include/arm_math.h **** 
2694:Drivers/CMSIS/Include/arm_math.h **** 
2695:Drivers/CMSIS/Include/arm_math.h ****   /**
2696:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Shifts the elements of a Q31 vector a specified number of bits.
2697:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2698:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
2699:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2700:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2701:Drivers/CMSIS/Include/arm_math.h ****    */
2702:Drivers/CMSIS/Include/arm_math.h ****   void arm_shift_q31(
2703:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2704:Drivers/CMSIS/Include/arm_math.h ****   int8_t shiftBits,
2705:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2706:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2707:Drivers/CMSIS/Include/arm_math.h **** 
2708:Drivers/CMSIS/Include/arm_math.h **** 
2709:Drivers/CMSIS/Include/arm_math.h ****   /**
2710:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Adds a constant offset to a floating-point vector.
2711:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2712:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  offset     is the offset to be added
2713:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2714:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2715:Drivers/CMSIS/Include/arm_math.h ****    */
2716:Drivers/CMSIS/Include/arm_math.h ****   void arm_offset_f32(
2717:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
2718:Drivers/CMSIS/Include/arm_math.h ****   float32_t offset,
2719:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2720:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2721:Drivers/CMSIS/Include/arm_math.h **** 
2722:Drivers/CMSIS/Include/arm_math.h **** 
2723:Drivers/CMSIS/Include/arm_math.h ****   /**
2724:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Adds a constant offset to a Q7 vector.
2725:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2726:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  offset     is the offset to be added
2727:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2728:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2729:Drivers/CMSIS/Include/arm_math.h ****    */
2730:Drivers/CMSIS/Include/arm_math.h ****   void arm_offset_q7(
2731:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
2732:Drivers/CMSIS/Include/arm_math.h ****   q7_t offset,
2733:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2734:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2735:Drivers/CMSIS/Include/arm_math.h **** 
2736:Drivers/CMSIS/Include/arm_math.h **** 
2737:Drivers/CMSIS/Include/arm_math.h ****   /**
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 72


2738:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Adds a constant offset to a Q15 vector.
2739:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2740:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  offset     is the offset to be added
2741:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2742:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2743:Drivers/CMSIS/Include/arm_math.h ****    */
2744:Drivers/CMSIS/Include/arm_math.h ****   void arm_offset_q15(
2745:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2746:Drivers/CMSIS/Include/arm_math.h ****   q15_t offset,
2747:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2748:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2749:Drivers/CMSIS/Include/arm_math.h **** 
2750:Drivers/CMSIS/Include/arm_math.h **** 
2751:Drivers/CMSIS/Include/arm_math.h ****   /**
2752:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Adds a constant offset to a Q31 vector.
2753:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2754:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  offset     is the offset to be added
2755:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2756:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2757:Drivers/CMSIS/Include/arm_math.h ****    */
2758:Drivers/CMSIS/Include/arm_math.h ****   void arm_offset_q31(
2759:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2760:Drivers/CMSIS/Include/arm_math.h ****   q31_t offset,
2761:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2762:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2763:Drivers/CMSIS/Include/arm_math.h **** 
2764:Drivers/CMSIS/Include/arm_math.h **** 
2765:Drivers/CMSIS/Include/arm_math.h ****   /**
2766:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Negates the elements of a floating-point vector.
2767:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2768:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2769:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2770:Drivers/CMSIS/Include/arm_math.h ****    */
2771:Drivers/CMSIS/Include/arm_math.h ****   void arm_negate_f32(
2772:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
2773:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2774:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2775:Drivers/CMSIS/Include/arm_math.h **** 
2776:Drivers/CMSIS/Include/arm_math.h **** 
2777:Drivers/CMSIS/Include/arm_math.h ****   /**
2778:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Negates the elements of a Q7 vector.
2779:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2780:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2781:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2782:Drivers/CMSIS/Include/arm_math.h ****    */
2783:Drivers/CMSIS/Include/arm_math.h ****   void arm_negate_q7(
2784:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
2785:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2786:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2787:Drivers/CMSIS/Include/arm_math.h **** 
2788:Drivers/CMSIS/Include/arm_math.h **** 
2789:Drivers/CMSIS/Include/arm_math.h ****   /**
2790:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Negates the elements of a Q15 vector.
2791:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2792:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2793:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2794:Drivers/CMSIS/Include/arm_math.h ****    */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 73


2795:Drivers/CMSIS/Include/arm_math.h ****   void arm_negate_q15(
2796:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2797:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2798:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2799:Drivers/CMSIS/Include/arm_math.h **** 
2800:Drivers/CMSIS/Include/arm_math.h **** 
2801:Drivers/CMSIS/Include/arm_math.h ****   /**
2802:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Negates the elements of a Q31 vector.
2803:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the input vector
2804:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the output vector
2805:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples in the vector
2806:Drivers/CMSIS/Include/arm_math.h ****    */
2807:Drivers/CMSIS/Include/arm_math.h ****   void arm_negate_q31(
2808:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2809:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2810:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2811:Drivers/CMSIS/Include/arm_math.h **** 
2812:Drivers/CMSIS/Include/arm_math.h **** 
2813:Drivers/CMSIS/Include/arm_math.h ****   /**
2814:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Copies the elements of a floating-point vector.
2815:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       input pointer
2816:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2817:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2818:Drivers/CMSIS/Include/arm_math.h ****    */
2819:Drivers/CMSIS/Include/arm_math.h ****   void arm_copy_f32(
2820:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
2821:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2822:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2823:Drivers/CMSIS/Include/arm_math.h **** 
2824:Drivers/CMSIS/Include/arm_math.h **** 
2825:Drivers/CMSIS/Include/arm_math.h ****   /**
2826:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Copies the elements of a Q7 vector.
2827:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       input pointer
2828:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2829:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2830:Drivers/CMSIS/Include/arm_math.h ****    */
2831:Drivers/CMSIS/Include/arm_math.h ****   void arm_copy_q7(
2832:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
2833:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2834:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2835:Drivers/CMSIS/Include/arm_math.h **** 
2836:Drivers/CMSIS/Include/arm_math.h **** 
2837:Drivers/CMSIS/Include/arm_math.h ****   /**
2838:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Copies the elements of a Q15 vector.
2839:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       input pointer
2840:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2841:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2842:Drivers/CMSIS/Include/arm_math.h ****    */
2843:Drivers/CMSIS/Include/arm_math.h ****   void arm_copy_q15(
2844:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
2845:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2846:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2847:Drivers/CMSIS/Include/arm_math.h **** 
2848:Drivers/CMSIS/Include/arm_math.h **** 
2849:Drivers/CMSIS/Include/arm_math.h ****   /**
2850:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Copies the elements of a Q31 vector.
2851:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       input pointer
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 74


2852:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2853:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2854:Drivers/CMSIS/Include/arm_math.h ****    */
2855:Drivers/CMSIS/Include/arm_math.h ****   void arm_copy_q31(
2856:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
2857:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2858:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2859:Drivers/CMSIS/Include/arm_math.h **** 
2860:Drivers/CMSIS/Include/arm_math.h **** 
2861:Drivers/CMSIS/Include/arm_math.h ****   /**
2862:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fills a constant value into a floating-point vector.
2863:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  value      input value to be filled
2864:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2865:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2866:Drivers/CMSIS/Include/arm_math.h ****    */
2867:Drivers/CMSIS/Include/arm_math.h ****   void arm_fill_f32(
2868:Drivers/CMSIS/Include/arm_math.h ****   float32_t value,
2869:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
2870:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2871:Drivers/CMSIS/Include/arm_math.h **** 
2872:Drivers/CMSIS/Include/arm_math.h **** 
2873:Drivers/CMSIS/Include/arm_math.h ****   /**
2874:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fills a constant value into a Q7 vector.
2875:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  value      input value to be filled
2876:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2877:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2878:Drivers/CMSIS/Include/arm_math.h ****    */
2879:Drivers/CMSIS/Include/arm_math.h ****   void arm_fill_q7(
2880:Drivers/CMSIS/Include/arm_math.h ****   q7_t value,
2881:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
2882:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2883:Drivers/CMSIS/Include/arm_math.h **** 
2884:Drivers/CMSIS/Include/arm_math.h **** 
2885:Drivers/CMSIS/Include/arm_math.h ****   /**
2886:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fills a constant value into a Q15 vector.
2887:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  value      input value to be filled
2888:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2889:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2890:Drivers/CMSIS/Include/arm_math.h ****    */
2891:Drivers/CMSIS/Include/arm_math.h ****   void arm_fill_q15(
2892:Drivers/CMSIS/Include/arm_math.h ****   q15_t value,
2893:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2894:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2895:Drivers/CMSIS/Include/arm_math.h **** 
2896:Drivers/CMSIS/Include/arm_math.h **** 
2897:Drivers/CMSIS/Include/arm_math.h ****   /**
2898:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fills a constant value into a Q31 vector.
2899:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  value      input value to be filled
2900:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
2901:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
2902:Drivers/CMSIS/Include/arm_math.h ****    */
2903:Drivers/CMSIS/Include/arm_math.h ****   void arm_fill_q31(
2904:Drivers/CMSIS/Include/arm_math.h ****   q31_t value,
2905:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
2906:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
2907:Drivers/CMSIS/Include/arm_math.h **** 
2908:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 75


2909:Drivers/CMSIS/Include/arm_math.h **** /**
2910:Drivers/CMSIS/Include/arm_math.h ****  * @brief Convolution of floating-point sequences.
2911:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  pSrcA    points to the first input sequence.
2912:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  srcALen  length of the first input sequence.
2913:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  pSrcB    points to the second input sequence.
2914:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  srcBLen  length of the second input sequence.
2915:Drivers/CMSIS/Include/arm_math.h ****  * @param[out] pDst     points to the location where the output result is written.  Length srcALen+
2916:Drivers/CMSIS/Include/arm_math.h ****  */
2917:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_f32(
2918:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
2919:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
2920:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
2921:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
2922:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst);
2923:Drivers/CMSIS/Include/arm_math.h **** 
2924:Drivers/CMSIS/Include/arm_math.h **** 
2925:Drivers/CMSIS/Include/arm_math.h ****   /**
2926:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q15 sequences.
2927:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
2928:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
2929:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
2930:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
2931:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data  Length srcALen+srcBLen-1.
2932:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen,
2933:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer of size min(srcALen, srcBLen).
2934:Drivers/CMSIS/Include/arm_math.h ****    */
2935:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_opt_q15(
2936:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
2937:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
2938:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
2939:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
2940:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2941:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
2942:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
2943:Drivers/CMSIS/Include/arm_math.h **** 
2944:Drivers/CMSIS/Include/arm_math.h **** 
2945:Drivers/CMSIS/Include/arm_math.h **** /**
2946:Drivers/CMSIS/Include/arm_math.h ****  * @brief Convolution of Q15 sequences.
2947:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  pSrcA    points to the first input sequence.
2948:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  srcALen  length of the first input sequence.
2949:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  pSrcB    points to the second input sequence.
2950:Drivers/CMSIS/Include/arm_math.h ****  * @param[in]  srcBLen  length of the second input sequence.
2951:Drivers/CMSIS/Include/arm_math.h ****  * @param[out] pDst     points to the location where the output result is written.  Length srcALen+
2952:Drivers/CMSIS/Include/arm_math.h ****  */
2953:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_q15(
2954:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
2955:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
2956:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
2957:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
2958:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst);
2959:Drivers/CMSIS/Include/arm_math.h **** 
2960:Drivers/CMSIS/Include/arm_math.h **** 
2961:Drivers/CMSIS/Include/arm_math.h ****   /**
2962:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
2963:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
2964:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
2965:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 76


2966:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
2967:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
2968:Drivers/CMSIS/Include/arm_math.h ****    */
2969:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_fast_q15(
2970:Drivers/CMSIS/Include/arm_math.h ****           q15_t * pSrcA,
2971:Drivers/CMSIS/Include/arm_math.h ****           uint32_t srcALen,
2972:Drivers/CMSIS/Include/arm_math.h ****           q15_t * pSrcB,
2973:Drivers/CMSIS/Include/arm_math.h ****           uint32_t srcBLen,
2974:Drivers/CMSIS/Include/arm_math.h ****           q15_t * pDst);
2975:Drivers/CMSIS/Include/arm_math.h **** 
2976:Drivers/CMSIS/Include/arm_math.h **** 
2977:Drivers/CMSIS/Include/arm_math.h ****   /**
2978:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
2979:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
2980:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
2981:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
2982:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
2983:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data  Length srcALen+srcBLen-1.
2984:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen,
2985:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer of size min(srcALen, srcBLen).
2986:Drivers/CMSIS/Include/arm_math.h ****    */
2987:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_fast_opt_q15(
2988:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
2989:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
2990:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
2991:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
2992:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
2993:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
2994:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
2995:Drivers/CMSIS/Include/arm_math.h **** 
2996:Drivers/CMSIS/Include/arm_math.h **** 
2997:Drivers/CMSIS/Include/arm_math.h ****   /**
2998:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q31 sequences.
2999:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3000:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3001:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3002:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3003:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3004:Drivers/CMSIS/Include/arm_math.h ****    */
3005:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_q31(
3006:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
3007:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3008:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
3009:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3010:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst);
3011:Drivers/CMSIS/Include/arm_math.h **** 
3012:Drivers/CMSIS/Include/arm_math.h **** 
3013:Drivers/CMSIS/Include/arm_math.h ****   /**
3014:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
3015:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3016:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3017:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3018:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3019:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3020:Drivers/CMSIS/Include/arm_math.h ****    */
3021:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_fast_q31(
3022:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 77


3023:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3024:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
3025:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3026:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst);
3027:Drivers/CMSIS/Include/arm_math.h **** 
3028:Drivers/CMSIS/Include/arm_math.h **** 
3029:Drivers/CMSIS/Include/arm_math.h ****     /**
3030:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q7 sequences.
3031:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
3032:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
3033:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
3034:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
3035:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data  Length srcALen+srcBLen-1.
3036:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) +
3037:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
3038:Drivers/CMSIS/Include/arm_math.h ****    */
3039:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_opt_q7(
3040:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
3041:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3042:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
3043:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3044:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
3045:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
3046:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
3047:Drivers/CMSIS/Include/arm_math.h **** 
3048:Drivers/CMSIS/Include/arm_math.h **** 
3049:Drivers/CMSIS/Include/arm_math.h ****   /**
3050:Drivers/CMSIS/Include/arm_math.h ****    * @brief Convolution of Q7 sequences.
3051:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
3052:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
3053:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
3054:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
3055:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length srcALen+srcBLen-1.
3056:Drivers/CMSIS/Include/arm_math.h ****    */
3057:Drivers/CMSIS/Include/arm_math.h ****   void arm_conv_q7(
3058:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
3059:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3060:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
3061:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3062:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst);
3063:Drivers/CMSIS/Include/arm_math.h **** 
3064:Drivers/CMSIS/Include/arm_math.h **** 
3065:Drivers/CMSIS/Include/arm_math.h ****   /**
3066:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of floating-point sequences.
3067:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3068:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3069:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3070:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3071:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3072:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3073:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3074:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3075:Drivers/CMSIS/Include/arm_math.h ****    */
3076:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_f32(
3077:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
3078:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3079:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 78


3080:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3081:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3082:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3083:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints);
3084:Drivers/CMSIS/Include/arm_math.h **** 
3085:Drivers/CMSIS/Include/arm_math.h **** 
3086:Drivers/CMSIS/Include/arm_math.h ****   /**
3087:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q15 sequences.
3088:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3089:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3090:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3091:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3092:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3093:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3094:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3095:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1   points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen
3096:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2   points to scratch buffer of size min(srcALen, srcBLen).
3097:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3098:Drivers/CMSIS/Include/arm_math.h ****    */
3099:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_opt_q15(
3100:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
3101:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3102:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
3103:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3104:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3105:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3106:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints,
3107:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
3108:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
3109:Drivers/CMSIS/Include/arm_math.h **** 
3110:Drivers/CMSIS/Include/arm_math.h **** 
3111:Drivers/CMSIS/Include/arm_math.h ****   /**
3112:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q15 sequences.
3113:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3114:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3115:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3116:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3117:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3118:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3119:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3120:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3121:Drivers/CMSIS/Include/arm_math.h ****    */
3122:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_q15(
3123:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
3124:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3125:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
3126:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3127:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3128:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3129:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints);
3130:Drivers/CMSIS/Include/arm_math.h **** 
3131:Drivers/CMSIS/Include/arm_math.h **** 
3132:Drivers/CMSIS/Include/arm_math.h ****   /**
3133:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
3134:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3135:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3136:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 79


3137:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3138:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3139:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3140:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3141:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3142:Drivers/CMSIS/Include/arm_math.h ****    */
3143:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_fast_q15(
3144:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
3145:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3146:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
3147:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3148:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3149:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3150:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints);
3151:Drivers/CMSIS/Include/arm_math.h **** 
3152:Drivers/CMSIS/Include/arm_math.h **** 
3153:Drivers/CMSIS/Include/arm_math.h ****   /**
3154:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4
3155:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3156:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3157:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3158:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3159:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3160:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3161:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3162:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1   points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen
3163:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2   points to scratch buffer of size min(srcALen, srcBLen).
3164:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3165:Drivers/CMSIS/Include/arm_math.h ****    */
3166:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_fast_opt_q15(
3167:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
3168:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3169:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
3170:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3171:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3172:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3173:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints,
3174:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
3175:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
3176:Drivers/CMSIS/Include/arm_math.h **** 
3177:Drivers/CMSIS/Include/arm_math.h **** 
3178:Drivers/CMSIS/Include/arm_math.h ****   /**
3179:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q31 sequences.
3180:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3181:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3182:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3183:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3184:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3185:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3186:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3187:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3188:Drivers/CMSIS/Include/arm_math.h ****    */
3189:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_q31(
3190:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
3191:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3192:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
3193:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 80


3194:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3195:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3196:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints);
3197:Drivers/CMSIS/Include/arm_math.h **** 
3198:Drivers/CMSIS/Include/arm_math.h **** 
3199:Drivers/CMSIS/Include/arm_math.h ****   /**
3200:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
3201:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3202:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3203:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3204:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3205:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3206:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3207:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3208:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3209:Drivers/CMSIS/Include/arm_math.h ****    */
3210:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_fast_q31(
3211:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
3212:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3213:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
3214:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3215:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3216:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3217:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints);
3218:Drivers/CMSIS/Include/arm_math.h **** 
3219:Drivers/CMSIS/Include/arm_math.h **** 
3220:Drivers/CMSIS/Include/arm_math.h ****   /**
3221:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q7 sequences
3222:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3223:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3224:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3225:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
3226:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3227:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3228:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3229:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1   points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) 
3230:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2   points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen)
3231:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3232:Drivers/CMSIS/Include/arm_math.h ****    */
3233:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_opt_q7(
3234:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
3235:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3236:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
3237:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3238:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
3239:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3240:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints,
3241:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
3242:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
3243:Drivers/CMSIS/Include/arm_math.h **** 
3244:Drivers/CMSIS/Include/arm_math.h **** 
3245:Drivers/CMSIS/Include/arm_math.h **** /**
3246:Drivers/CMSIS/Include/arm_math.h ****    * @brief Partial convolution of Q7 sequences.
3247:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA       points to the first input sequence.
3248:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen     length of the first input sequence.
3249:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB       points to the second input sequence.
3250:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen     length of the second input sequence.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 81


3251:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
3252:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  firstIndex  is the first output sample to start with.
3253:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numPoints   is the number of output points to be computed.
3254:Drivers/CMSIS/Include/arm_math.h ****    * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUM
3255:Drivers/CMSIS/Include/arm_math.h ****    */
3256:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_conv_partial_q7(
3257:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
3258:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
3259:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
3260:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
3261:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
3262:Drivers/CMSIS/Include/arm_math.h ****   uint32_t firstIndex,
3263:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numPoints);
3264:Drivers/CMSIS/Include/arm_math.h **** 
3265:Drivers/CMSIS/Include/arm_math.h **** 
3266:Drivers/CMSIS/Include/arm_math.h ****   /**
3267:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 FIR decimator.
3268:Drivers/CMSIS/Include/arm_math.h ****    */
3269:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3270:Drivers/CMSIS/Include/arm_math.h ****   {
3271:Drivers/CMSIS/Include/arm_math.h ****     uint8_t M;                  /**< decimation factor. */
3272:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;           /**< number of coefficients in the filter. */
3273:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;             /**< points to the coefficient array. The array is of length numTap
3274:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;              /**< points to the state variable array. The array is of length num
3275:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_decimate_instance_q15;
3276:Drivers/CMSIS/Include/arm_math.h **** 
3277:Drivers/CMSIS/Include/arm_math.h ****   /**
3278:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 FIR decimator.
3279:Drivers/CMSIS/Include/arm_math.h ****    */
3280:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3281:Drivers/CMSIS/Include/arm_math.h ****   {
3282:Drivers/CMSIS/Include/arm_math.h ****     uint8_t M;                  /**< decimation factor. */
3283:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;           /**< number of coefficients in the filter. */
3284:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;             /**< points to the coefficient array. The array is of length numTap
3285:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;              /**< points to the state variable array. The array is of length num
3286:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_decimate_instance_q31;
3287:Drivers/CMSIS/Include/arm_math.h **** 
3288:Drivers/CMSIS/Include/arm_math.h ****   /**
3289:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point FIR decimator.
3290:Drivers/CMSIS/Include/arm_math.h ****    */
3291:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3292:Drivers/CMSIS/Include/arm_math.h ****   {
3293:Drivers/CMSIS/Include/arm_math.h ****     uint8_t M;                  /**< decimation factor. */
3294:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;           /**< number of coefficients in the filter. */
3295:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;         /**< points to the coefficient array. The array is of length numTap
3296:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;          /**< points to the state variable array. The array is of length num
3297:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_decimate_instance_f32;
3298:Drivers/CMSIS/Include/arm_math.h **** 
3299:Drivers/CMSIS/Include/arm_math.h **** 
3300:Drivers/CMSIS/Include/arm_math.h ****   /**
3301:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point FIR decimator.
3302:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR decimator structure.
3303:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3304:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3305:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3306:Drivers/CMSIS/Include/arm_math.h ****    */
3307:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_decimate_f32(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 82


3308:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_decimate_instance_f32 * S,
3309:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3310:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3311:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3312:Drivers/CMSIS/Include/arm_math.h **** 
3313:Drivers/CMSIS/Include/arm_math.h **** 
3314:Drivers/CMSIS/Include/arm_math.h ****   /**
3315:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point FIR decimator.
3316:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point FIR decimator structure.
3317:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of coefficients in the filter.
3318:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     M          decimation factor.
3319:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3320:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3321:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3322:Drivers/CMSIS/Include/arm_math.h ****    * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_L
3323:Drivers/CMSIS/Include/arm_math.h ****    * <code>blockSize</code> is not a multiple of <code>M</code>.
3324:Drivers/CMSIS/Include/arm_math.h ****    */
3325:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_decimate_init_f32(
3326:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_decimate_instance_f32 * S,
3327:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
3328:Drivers/CMSIS/Include/arm_math.h ****   uint8_t M,
3329:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
3330:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
3331:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3332:Drivers/CMSIS/Include/arm_math.h **** 
3333:Drivers/CMSIS/Include/arm_math.h **** 
3334:Drivers/CMSIS/Include/arm_math.h ****   /**
3335:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 FIR decimator.
3336:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR decimator structure.
3337:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3338:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3339:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3340:Drivers/CMSIS/Include/arm_math.h ****    */
3341:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_decimate_q15(
3342:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_decimate_instance_q15 * S,
3343:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
3344:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3345:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3346:Drivers/CMSIS/Include/arm_math.h **** 
3347:Drivers/CMSIS/Include/arm_math.h **** 
3348:Drivers/CMSIS/Include/arm_math.h ****   /**
3349:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 FIR decimator (fast variant) for Cortex-M3 and Cortex-M
3350:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR decimator structure.
3351:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3352:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3353:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3354:Drivers/CMSIS/Include/arm_math.h ****    */
3355:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_decimate_fast_q15(
3356:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_decimate_instance_q15 * S,
3357:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
3358:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3359:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3360:Drivers/CMSIS/Include/arm_math.h **** 
3361:Drivers/CMSIS/Include/arm_math.h **** 
3362:Drivers/CMSIS/Include/arm_math.h ****   /**
3363:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 FIR decimator.
3364:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 FIR decimator structure.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 83


3365:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of coefficients in the filter.
3366:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     M          decimation factor.
3367:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3368:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3369:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3370:Drivers/CMSIS/Include/arm_math.h ****    * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_L
3371:Drivers/CMSIS/Include/arm_math.h ****    * <code>blockSize</code> is not a multiple of <code>M</code>.
3372:Drivers/CMSIS/Include/arm_math.h ****    */
3373:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_decimate_init_q15(
3374:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_decimate_instance_q15 * S,
3375:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
3376:Drivers/CMSIS/Include/arm_math.h ****   uint8_t M,
3377:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
3378:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
3379:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3380:Drivers/CMSIS/Include/arm_math.h **** 
3381:Drivers/CMSIS/Include/arm_math.h **** 
3382:Drivers/CMSIS/Include/arm_math.h ****   /**
3383:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 FIR decimator.
3384:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S     points to an instance of the Q31 FIR decimator structure.
3385:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc  points to the block of input data.
3386:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst  points to the block of output data
3387:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize number of input samples to process per call.
3388:Drivers/CMSIS/Include/arm_math.h ****    */
3389:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_decimate_q31(
3390:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_decimate_instance_q31 * S,
3391:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
3392:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3393:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3394:Drivers/CMSIS/Include/arm_math.h **** 
3395:Drivers/CMSIS/Include/arm_math.h ****   /**
3396:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 FIR decimator (fast variant) for Cortex-M3 and Cortex-M
3397:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR decimator structure.
3398:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3399:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3400:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3401:Drivers/CMSIS/Include/arm_math.h ****    */
3402:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_decimate_fast_q31(
3403:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_decimate_instance_q31 * S,
3404:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
3405:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3406:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3407:Drivers/CMSIS/Include/arm_math.h **** 
3408:Drivers/CMSIS/Include/arm_math.h **** 
3409:Drivers/CMSIS/Include/arm_math.h ****   /**
3410:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 FIR decimator.
3411:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 FIR decimator structure.
3412:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of coefficients in the filter.
3413:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     M          decimation factor.
3414:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3415:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3416:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3417:Drivers/CMSIS/Include/arm_math.h ****    * @return    The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MATH_L
3418:Drivers/CMSIS/Include/arm_math.h ****    * <code>blockSize</code> is not a multiple of <code>M</code>.
3419:Drivers/CMSIS/Include/arm_math.h ****    */
3420:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_decimate_init_q31(
3421:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_decimate_instance_q31 * S,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 84


3422:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
3423:Drivers/CMSIS/Include/arm_math.h ****   uint8_t M,
3424:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
3425:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
3426:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3427:Drivers/CMSIS/Include/arm_math.h **** 
3428:Drivers/CMSIS/Include/arm_math.h **** 
3429:Drivers/CMSIS/Include/arm_math.h ****   /**
3430:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 FIR interpolator.
3431:Drivers/CMSIS/Include/arm_math.h ****    */
3432:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3433:Drivers/CMSIS/Include/arm_math.h ****   {
3434:Drivers/CMSIS/Include/arm_math.h ****     uint8_t L;                      /**< upsample factor. */
3435:Drivers/CMSIS/Include/arm_math.h ****     uint16_t phaseLength;           /**< length of each polyphase filter component. */
3436:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;                 /**< points to the coefficient array. The array is of length L*
3437:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;                  /**< points to the state variable array. The array is of length
3438:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_interpolate_instance_q15;
3439:Drivers/CMSIS/Include/arm_math.h **** 
3440:Drivers/CMSIS/Include/arm_math.h ****   /**
3441:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 FIR interpolator.
3442:Drivers/CMSIS/Include/arm_math.h ****    */
3443:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3444:Drivers/CMSIS/Include/arm_math.h ****   {
3445:Drivers/CMSIS/Include/arm_math.h ****     uint8_t L;                      /**< upsample factor. */
3446:Drivers/CMSIS/Include/arm_math.h ****     uint16_t phaseLength;           /**< length of each polyphase filter component. */
3447:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;                 /**< points to the coefficient array. The array is of length L*
3448:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;                  /**< points to the state variable array. The array is of length
3449:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_interpolate_instance_q31;
3450:Drivers/CMSIS/Include/arm_math.h **** 
3451:Drivers/CMSIS/Include/arm_math.h ****   /**
3452:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point FIR interpolator.
3453:Drivers/CMSIS/Include/arm_math.h ****    */
3454:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3455:Drivers/CMSIS/Include/arm_math.h ****   {
3456:Drivers/CMSIS/Include/arm_math.h ****     uint8_t L;                     /**< upsample factor. */
3457:Drivers/CMSIS/Include/arm_math.h ****     uint16_t phaseLength;          /**< length of each polyphase filter component. */
3458:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;            /**< points to the coefficient array. The array is of length L*p
3459:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;             /**< points to the state variable array. The array is of length 
3460:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_interpolate_instance_f32;
3461:Drivers/CMSIS/Include/arm_math.h **** 
3462:Drivers/CMSIS/Include/arm_math.h **** 
3463:Drivers/CMSIS/Include/arm_math.h ****   /**
3464:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 FIR interpolator.
3465:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR interpolator structure.
3466:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3467:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
3468:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3469:Drivers/CMSIS/Include/arm_math.h ****    */
3470:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_interpolate_q15(
3471:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_interpolate_instance_q15 * S,
3472:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
3473:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3474:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3475:Drivers/CMSIS/Include/arm_math.h **** 
3476:Drivers/CMSIS/Include/arm_math.h **** 
3477:Drivers/CMSIS/Include/arm_math.h ****   /**
3478:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 FIR interpolator.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 85


3479:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 FIR interpolator structure.
3480:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     L          upsample factor.
3481:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of filter coefficients in the filter.
3482:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficient buffer.
3483:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3484:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3485:Drivers/CMSIS/Include/arm_math.h ****    * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MA
3486:Drivers/CMSIS/Include/arm_math.h ****    * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</
3487:Drivers/CMSIS/Include/arm_math.h ****    */
3488:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_interpolate_init_q15(
3489:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_interpolate_instance_q15 * S,
3490:Drivers/CMSIS/Include/arm_math.h ****   uint8_t L,
3491:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
3492:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
3493:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
3494:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3495:Drivers/CMSIS/Include/arm_math.h **** 
3496:Drivers/CMSIS/Include/arm_math.h **** 
3497:Drivers/CMSIS/Include/arm_math.h ****   /**
3498:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 FIR interpolator.
3499:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR interpolator structure.
3500:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3501:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
3502:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3503:Drivers/CMSIS/Include/arm_math.h ****    */
3504:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_interpolate_q31(
3505:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_interpolate_instance_q31 * S,
3506:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
3507:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3508:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3509:Drivers/CMSIS/Include/arm_math.h **** 
3510:Drivers/CMSIS/Include/arm_math.h **** 
3511:Drivers/CMSIS/Include/arm_math.h ****   /**
3512:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 FIR interpolator.
3513:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 FIR interpolator structure.
3514:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     L          upsample factor.
3515:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of filter coefficients in the filter.
3516:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficient buffer.
3517:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3518:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3519:Drivers/CMSIS/Include/arm_math.h ****    * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MA
3520:Drivers/CMSIS/Include/arm_math.h ****    * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</
3521:Drivers/CMSIS/Include/arm_math.h ****    */
3522:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_interpolate_init_q31(
3523:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_interpolate_instance_q31 * S,
3524:Drivers/CMSIS/Include/arm_math.h ****   uint8_t L,
3525:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
3526:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
3527:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
3528:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3529:Drivers/CMSIS/Include/arm_math.h **** 
3530:Drivers/CMSIS/Include/arm_math.h **** 
3531:Drivers/CMSIS/Include/arm_math.h ****   /**
3532:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point FIR interpolator.
3533:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR interpolator structure.
3534:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3535:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 86


3536:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of input samples to process per call.
3537:Drivers/CMSIS/Include/arm_math.h ****    */
3538:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_interpolate_f32(
3539:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_interpolate_instance_f32 * S,
3540:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3541:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3542:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3543:Drivers/CMSIS/Include/arm_math.h **** 
3544:Drivers/CMSIS/Include/arm_math.h **** 
3545:Drivers/CMSIS/Include/arm_math.h ****   /**
3546:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point FIR interpolator.
3547:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point FIR interpolator structu
3548:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     L          upsample factor.
3549:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of filter coefficients in the filter.
3550:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficient buffer.
3551:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3552:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of input samples to process per call.
3553:Drivers/CMSIS/Include/arm_math.h ****    * @return        The function returns ARM_MATH_SUCCESS if initialization is successful or ARM_MA
3554:Drivers/CMSIS/Include/arm_math.h ****    * the filter length <code>numTaps</code> is not a multiple of the interpolation factor <code>L</
3555:Drivers/CMSIS/Include/arm_math.h ****    */
3556:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_fir_interpolate_init_f32(
3557:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_interpolate_instance_f32 * S,
3558:Drivers/CMSIS/Include/arm_math.h ****   uint8_t L,
3559:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
3560:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
3561:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
3562:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3563:Drivers/CMSIS/Include/arm_math.h **** 
3564:Drivers/CMSIS/Include/arm_math.h **** 
3565:Drivers/CMSIS/Include/arm_math.h ****   /**
3566:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the high precision Q31 Biquad cascade filter.
3567:Drivers/CMSIS/Include/arm_math.h ****    */
3568:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3569:Drivers/CMSIS/Include/arm_math.h ****   {
3570:Drivers/CMSIS/Include/arm_math.h ****     uint8_t numStages;       /**< number of 2nd order stages in the filter.  Overall order is 2*num
3571:Drivers/CMSIS/Include/arm_math.h ****     q63_t *pState;           /**< points to the array of state coefficients.  The array is of lengt
3572:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;          /**< points to the array of coefficients.  The array is of length 5*nu
3573:Drivers/CMSIS/Include/arm_math.h ****     uint8_t postShift;       /**< additional shift, in bits, applied to each output sample. */
3574:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_cas_df1_32x64_ins_q31;
3575:Drivers/CMSIS/Include/arm_math.h **** 
3576:Drivers/CMSIS/Include/arm_math.h **** 
3577:Drivers/CMSIS/Include/arm_math.h ****   /**
3578:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the high precision Q31 Biquad cascade filter s
3579:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3580:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3581:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3582:Drivers/CMSIS/Include/arm_math.h ****    */
3583:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cas_df1_32x64_q31(
3584:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_cas_df1_32x64_ins_q31 * S,
3585:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
3586:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3587:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3588:Drivers/CMSIS/Include/arm_math.h **** 
3589:Drivers/CMSIS/Include/arm_math.h **** 
3590:Drivers/CMSIS/Include/arm_math.h ****   /**
3591:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the high precision Q31 Biquad cascade filte
3592:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 87


3593:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3594:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3595:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     postShift  shift to be applied to the output. Varies according to the coefficie
3596:Drivers/CMSIS/Include/arm_math.h ****    */
3597:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cas_df1_32x64_init_q31(
3598:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_cas_df1_32x64_ins_q31 * S,
3599:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
3600:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
3601:Drivers/CMSIS/Include/arm_math.h ****   q63_t * pState,
3602:Drivers/CMSIS/Include/arm_math.h ****   uint8_t postShift);
3603:Drivers/CMSIS/Include/arm_math.h **** 
3604:Drivers/CMSIS/Include/arm_math.h **** 
3605:Drivers/CMSIS/Include/arm_math.h ****   /**
3606:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filt
3607:Drivers/CMSIS/Include/arm_math.h ****    */
3608:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3609:Drivers/CMSIS/Include/arm_math.h ****   {
3610:Drivers/CMSIS/Include/arm_math.h ****     uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*n
3611:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;         /**< points to the array of state coefficients.  The array is of len
3612:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*
3613:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_cascade_df2T_instance_f32;
3614:Drivers/CMSIS/Include/arm_math.h **** 
3615:Drivers/CMSIS/Include/arm_math.h ****   /**
3616:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filt
3617:Drivers/CMSIS/Include/arm_math.h ****    */
3618:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3619:Drivers/CMSIS/Include/arm_math.h ****   {
3620:Drivers/CMSIS/Include/arm_math.h ****     uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*n
3621:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;         /**< points to the array of state coefficients.  The array is of len
3622:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*
3623:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_cascade_stereo_df2T_instance_f32;
3624:Drivers/CMSIS/Include/arm_math.h **** 
3625:Drivers/CMSIS/Include/arm_math.h ****   /**
3626:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point transposed direct form II Biquad cascade filt
3627:Drivers/CMSIS/Include/arm_math.h ****    */
3628:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3629:Drivers/CMSIS/Include/arm_math.h ****   {
3630:Drivers/CMSIS/Include/arm_math.h ****     uint8_t numStages;         /**< number of 2nd order stages in the filter.  Overall order is 2*n
3631:Drivers/CMSIS/Include/arm_math.h ****     float64_t *pState;         /**< points to the array of state coefficients.  The array is of len
3632:Drivers/CMSIS/Include/arm_math.h ****     float64_t *pCoeffs;        /**< points to the array of coefficients.  The array is of length 5*
3633:Drivers/CMSIS/Include/arm_math.h ****   } arm_biquad_cascade_df2T_instance_f64;
3634:Drivers/CMSIS/Include/arm_math.h **** 
3635:Drivers/CMSIS/Include/arm_math.h **** 
3636:Drivers/CMSIS/Include/arm_math.h ****   /**
3637:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point transposed direct form II Biquad cascade fil
3638:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the filter data structure.
3639:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3640:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3641:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3642:Drivers/CMSIS/Include/arm_math.h ****    */
3643:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df2T_f32(
3644:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_cascade_df2T_instance_f32 * S,
3645:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3646:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3647:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3648:Drivers/CMSIS/Include/arm_math.h **** 
3649:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 88


3650:Drivers/CMSIS/Include/arm_math.h ****   /**
3651:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point transposed direct form II Biquad cascade fil
3652:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the filter data structure.
3653:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3654:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3655:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3656:Drivers/CMSIS/Include/arm_math.h ****    */
3657:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_stereo_df2T_f32(
3658:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
3659:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3660:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3661:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3662:Drivers/CMSIS/Include/arm_math.h **** 
3663:Drivers/CMSIS/Include/arm_math.h **** 
3664:Drivers/CMSIS/Include/arm_math.h ****   /**
3665:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point transposed direct form II Biquad cascade fil
3666:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the filter data structure.
3667:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3668:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3669:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3670:Drivers/CMSIS/Include/arm_math.h ****    */
3671:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df2T_f64(
3672:Drivers/CMSIS/Include/arm_math.h ****   const arm_biquad_cascade_df2T_instance_f64 * S,
3673:Drivers/CMSIS/Include/arm_math.h ****   float64_t * pSrc,
3674:Drivers/CMSIS/Include/arm_math.h ****   float64_t * pDst,
3675:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3676:Drivers/CMSIS/Include/arm_math.h **** 
3677:Drivers/CMSIS/Include/arm_math.h **** 
3678:Drivers/CMSIS/Include/arm_math.h ****   /**
3679:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point transposed direct form II Biquad cascad
3680:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the filter data structure.
3681:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3682:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3683:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3684:Drivers/CMSIS/Include/arm_math.h ****    */
3685:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df2T_init_f32(
3686:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_cascade_df2T_instance_f32 * S,
3687:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
3688:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
3689:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState);
3690:Drivers/CMSIS/Include/arm_math.h **** 
3691:Drivers/CMSIS/Include/arm_math.h **** 
3692:Drivers/CMSIS/Include/arm_math.h ****   /**
3693:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point transposed direct form II Biquad cascad
3694:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the filter data structure.
3695:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3696:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3697:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3698:Drivers/CMSIS/Include/arm_math.h ****    */
3699:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_stereo_df2T_init_f32(
3700:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_cascade_stereo_df2T_instance_f32 * S,
3701:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
3702:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
3703:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState);
3704:Drivers/CMSIS/Include/arm_math.h **** 
3705:Drivers/CMSIS/Include/arm_math.h **** 
3706:Drivers/CMSIS/Include/arm_math.h ****   /**
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 89


3707:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point transposed direct form II Biquad cascad
3708:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the filter data structure.
3709:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numStages  number of 2nd order stages in the filter.
3710:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the filter coefficients.
3711:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
3712:Drivers/CMSIS/Include/arm_math.h ****    */
3713:Drivers/CMSIS/Include/arm_math.h ****   void arm_biquad_cascade_df2T_init_f64(
3714:Drivers/CMSIS/Include/arm_math.h ****   arm_biquad_cascade_df2T_instance_f64 * S,
3715:Drivers/CMSIS/Include/arm_math.h ****   uint8_t numStages,
3716:Drivers/CMSIS/Include/arm_math.h ****   float64_t * pCoeffs,
3717:Drivers/CMSIS/Include/arm_math.h ****   float64_t * pState);
3718:Drivers/CMSIS/Include/arm_math.h **** 
3719:Drivers/CMSIS/Include/arm_math.h **** 
3720:Drivers/CMSIS/Include/arm_math.h ****   /**
3721:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 FIR lattice filter.
3722:Drivers/CMSIS/Include/arm_math.h ****    */
3723:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3724:Drivers/CMSIS/Include/arm_math.h ****   {
3725:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numStages;                  /**< number of filter stages. */
3726:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;                       /**< points to the state variable array. The array is of l
3727:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;                      /**< points to the coefficient array. The array is of leng
3728:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_lattice_instance_q15;
3729:Drivers/CMSIS/Include/arm_math.h **** 
3730:Drivers/CMSIS/Include/arm_math.h ****   /**
3731:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 FIR lattice filter.
3732:Drivers/CMSIS/Include/arm_math.h ****    */
3733:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3734:Drivers/CMSIS/Include/arm_math.h ****   {
3735:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numStages;                  /**< number of filter stages. */
3736:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;                       /**< points to the state variable array. The array is of l
3737:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;                      /**< points to the coefficient array. The array is of leng
3738:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_lattice_instance_q31;
3739:Drivers/CMSIS/Include/arm_math.h **** 
3740:Drivers/CMSIS/Include/arm_math.h ****   /**
3741:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point FIR lattice filter.
3742:Drivers/CMSIS/Include/arm_math.h ****    */
3743:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3744:Drivers/CMSIS/Include/arm_math.h ****   {
3745:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numStages;                  /**< number of filter stages. */
3746:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;                   /**< points to the state variable array. The array is of l
3747:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;                  /**< points to the coefficient array. The array is of leng
3748:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_lattice_instance_f32;
3749:Drivers/CMSIS/Include/arm_math.h **** 
3750:Drivers/CMSIS/Include/arm_math.h **** 
3751:Drivers/CMSIS/Include/arm_math.h ****   /**
3752:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for the Q15 FIR lattice filter.
3753:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q15 FIR lattice structure.
3754:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numStages  number of filter stages.
3755:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.  The array is of length numStages.
3756:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to the state buffer.  The array is of length numStages.
3757:Drivers/CMSIS/Include/arm_math.h ****    */
3758:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_lattice_init_q15(
3759:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_lattice_instance_q15 * S,
3760:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numStages,
3761:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
3762:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState);
3763:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 90


3764:Drivers/CMSIS/Include/arm_math.h **** 
3765:Drivers/CMSIS/Include/arm_math.h ****   /**
3766:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 FIR lattice filter.
3767:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 FIR lattice structure.
3768:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3769:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
3770:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3771:Drivers/CMSIS/Include/arm_math.h ****    */
3772:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_lattice_q15(
3773:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_lattice_instance_q15 * S,
3774:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
3775:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3776:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3777:Drivers/CMSIS/Include/arm_math.h **** 
3778:Drivers/CMSIS/Include/arm_math.h **** 
3779:Drivers/CMSIS/Include/arm_math.h ****   /**
3780:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for the Q31 FIR lattice filter.
3781:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q31 FIR lattice structure.
3782:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numStages  number of filter stages.
3783:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.  The array is of length numStages.
3784:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to the state buffer.   The array is of length numStages.
3785:Drivers/CMSIS/Include/arm_math.h ****    */
3786:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_lattice_init_q31(
3787:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_lattice_instance_q31 * S,
3788:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numStages,
3789:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
3790:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState);
3791:Drivers/CMSIS/Include/arm_math.h **** 
3792:Drivers/CMSIS/Include/arm_math.h **** 
3793:Drivers/CMSIS/Include/arm_math.h ****   /**
3794:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 FIR lattice filter.
3795:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 FIR lattice structure.
3796:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3797:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3798:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3799:Drivers/CMSIS/Include/arm_math.h ****    */
3800:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_lattice_q31(
3801:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_lattice_instance_q31 * S,
3802:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
3803:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3804:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3805:Drivers/CMSIS/Include/arm_math.h **** 
3806:Drivers/CMSIS/Include/arm_math.h **** 
3807:Drivers/CMSIS/Include/arm_math.h **** /**
3808:Drivers/CMSIS/Include/arm_math.h ****  * @brief Initialization function for the floating-point FIR lattice filter.
3809:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] S          points to an instance of the floating-point FIR lattice structure.
3810:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] numStages  number of filter stages.
3811:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] pCoeffs    points to the coefficient buffer.  The array is of length numStages.
3812:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] pState     points to the state buffer.  The array is of length numStages.
3813:Drivers/CMSIS/Include/arm_math.h ****  */
3814:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_lattice_init_f32(
3815:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_lattice_instance_f32 * S,
3816:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numStages,
3817:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
3818:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState);
3819:Drivers/CMSIS/Include/arm_math.h **** 
3820:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 91


3821:Drivers/CMSIS/Include/arm_math.h ****   /**
3822:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point FIR lattice filter.
3823:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point FIR lattice structure.
3824:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3825:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data
3826:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3827:Drivers/CMSIS/Include/arm_math.h ****    */
3828:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_lattice_f32(
3829:Drivers/CMSIS/Include/arm_math.h ****   const arm_fir_lattice_instance_f32 * S,
3830:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3831:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3832:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3833:Drivers/CMSIS/Include/arm_math.h **** 
3834:Drivers/CMSIS/Include/arm_math.h **** 
3835:Drivers/CMSIS/Include/arm_math.h ****   /**
3836:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 IIR lattice filter.
3837:Drivers/CMSIS/Include/arm_math.h ****    */
3838:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3839:Drivers/CMSIS/Include/arm_math.h ****   {
3840:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numStages;                  /**< number of stages in the filter. */
3841:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;                       /**< points to the state variable array. The array is of l
3842:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pkCoeffs;                     /**< points to the reflection coefficient array. The array
3843:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pvCoeffs;                     /**< points to the ladder coefficient array. The array is 
3844:Drivers/CMSIS/Include/arm_math.h ****   } arm_iir_lattice_instance_q15;
3845:Drivers/CMSIS/Include/arm_math.h **** 
3846:Drivers/CMSIS/Include/arm_math.h ****   /**
3847:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 IIR lattice filter.
3848:Drivers/CMSIS/Include/arm_math.h ****    */
3849:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3850:Drivers/CMSIS/Include/arm_math.h ****   {
3851:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numStages;                  /**< number of stages in the filter. */
3852:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;                       /**< points to the state variable array. The array is of l
3853:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pkCoeffs;                     /**< points to the reflection coefficient array. The array
3854:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pvCoeffs;                     /**< points to the ladder coefficient array. The array is 
3855:Drivers/CMSIS/Include/arm_math.h ****   } arm_iir_lattice_instance_q31;
3856:Drivers/CMSIS/Include/arm_math.h **** 
3857:Drivers/CMSIS/Include/arm_math.h ****   /**
3858:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point IIR lattice filter.
3859:Drivers/CMSIS/Include/arm_math.h ****    */
3860:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3861:Drivers/CMSIS/Include/arm_math.h ****   {
3862:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numStages;                  /**< number of stages in the filter. */
3863:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;                   /**< points to the state variable array. The array is of l
3864:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pkCoeffs;                 /**< points to the reflection coefficient array. The array
3865:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pvCoeffs;                 /**< points to the ladder coefficient array. The array is 
3866:Drivers/CMSIS/Include/arm_math.h ****   } arm_iir_lattice_instance_f32;
3867:Drivers/CMSIS/Include/arm_math.h **** 
3868:Drivers/CMSIS/Include/arm_math.h **** 
3869:Drivers/CMSIS/Include/arm_math.h ****   /**
3870:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point IIR lattice filter.
3871:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point IIR lattice structure.
3872:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3873:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
3874:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3875:Drivers/CMSIS/Include/arm_math.h ****    */
3876:Drivers/CMSIS/Include/arm_math.h ****   void arm_iir_lattice_f32(
3877:Drivers/CMSIS/Include/arm_math.h ****   const arm_iir_lattice_instance_f32 * S,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 92


3878:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3879:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
3880:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3881:Drivers/CMSIS/Include/arm_math.h **** 
3882:Drivers/CMSIS/Include/arm_math.h **** 
3883:Drivers/CMSIS/Include/arm_math.h ****   /**
3884:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for the floating-point IIR lattice filter.
3885:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the floating-point IIR lattice structure.
3886:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numStages  number of stages in the filter.
3887:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pkCoeffs   points to the reflection coefficient buffer.  The array is of length num
3888:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pvCoeffs   points to the ladder coefficient buffer.  The array is of length numStag
3889:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to the state buffer.  The array is of length numStages+blockSize-
3890:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
3891:Drivers/CMSIS/Include/arm_math.h ****    */
3892:Drivers/CMSIS/Include/arm_math.h ****   void arm_iir_lattice_init_f32(
3893:Drivers/CMSIS/Include/arm_math.h ****   arm_iir_lattice_instance_f32 * S,
3894:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numStages,
3895:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pkCoeffs,
3896:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pvCoeffs,
3897:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
3898:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3899:Drivers/CMSIS/Include/arm_math.h **** 
3900:Drivers/CMSIS/Include/arm_math.h **** 
3901:Drivers/CMSIS/Include/arm_math.h ****   /**
3902:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 IIR lattice filter.
3903:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 IIR lattice structure.
3904:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3905:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
3906:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3907:Drivers/CMSIS/Include/arm_math.h ****    */
3908:Drivers/CMSIS/Include/arm_math.h ****   void arm_iir_lattice_q31(
3909:Drivers/CMSIS/Include/arm_math.h ****   const arm_iir_lattice_instance_q31 * S,
3910:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
3911:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
3912:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3913:Drivers/CMSIS/Include/arm_math.h **** 
3914:Drivers/CMSIS/Include/arm_math.h **** 
3915:Drivers/CMSIS/Include/arm_math.h ****   /**
3916:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for the Q31 IIR lattice filter.
3917:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q31 IIR lattice structure.
3918:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numStages  number of stages in the filter.
3919:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pkCoeffs   points to the reflection coefficient buffer.  The array is of length num
3920:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pvCoeffs   points to the ladder coefficient buffer.  The array is of length numStag
3921:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to the state buffer.  The array is of length numStages+blockSize.
3922:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
3923:Drivers/CMSIS/Include/arm_math.h ****    */
3924:Drivers/CMSIS/Include/arm_math.h ****   void arm_iir_lattice_init_q31(
3925:Drivers/CMSIS/Include/arm_math.h ****   arm_iir_lattice_instance_q31 * S,
3926:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numStages,
3927:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pkCoeffs,
3928:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pvCoeffs,
3929:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
3930:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3931:Drivers/CMSIS/Include/arm_math.h **** 
3932:Drivers/CMSIS/Include/arm_math.h **** 
3933:Drivers/CMSIS/Include/arm_math.h ****   /**
3934:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 IIR lattice filter.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 93


3935:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 IIR lattice structure.
3936:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3937:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data.
3938:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3939:Drivers/CMSIS/Include/arm_math.h ****    */
3940:Drivers/CMSIS/Include/arm_math.h ****   void arm_iir_lattice_q15(
3941:Drivers/CMSIS/Include/arm_math.h ****   const arm_iir_lattice_instance_q15 * S,
3942:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
3943:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
3944:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3945:Drivers/CMSIS/Include/arm_math.h **** 
3946:Drivers/CMSIS/Include/arm_math.h **** 
3947:Drivers/CMSIS/Include/arm_math.h **** /**
3948:Drivers/CMSIS/Include/arm_math.h ****  * @brief Initialization function for the Q15 IIR lattice filter.
3949:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] S          points to an instance of the fixed-point Q15 IIR lattice structure.
3950:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] numStages  number of stages in the filter.
3951:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] pkCoeffs   points to reflection coefficient buffer.  The array is of length numStages
3952:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] pvCoeffs   points to ladder coefficient buffer.  The array is of length numStages+1.
3953:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] pState     points to state buffer.  The array is of length numStages+blockSize.
3954:Drivers/CMSIS/Include/arm_math.h ****  * @param[in] blockSize  number of samples to process per call.
3955:Drivers/CMSIS/Include/arm_math.h ****  */
3956:Drivers/CMSIS/Include/arm_math.h ****   void arm_iir_lattice_init_q15(
3957:Drivers/CMSIS/Include/arm_math.h ****   arm_iir_lattice_instance_q15 * S,
3958:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numStages,
3959:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pkCoeffs,
3960:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pvCoeffs,
3961:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
3962:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3963:Drivers/CMSIS/Include/arm_math.h **** 
3964:Drivers/CMSIS/Include/arm_math.h **** 
3965:Drivers/CMSIS/Include/arm_math.h ****   /**
3966:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point LMS filter.
3967:Drivers/CMSIS/Include/arm_math.h ****    */
3968:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
3969:Drivers/CMSIS/Include/arm_math.h ****   {
3970:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;    /**< number of coefficients in the filter. */
3971:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;   /**< points to the state variable array. The array is of length numTaps+bl
3972:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;  /**< points to the coefficient array. The array is of length numTaps. */
3973:Drivers/CMSIS/Include/arm_math.h ****     float32_t mu;        /**< step size that controls filter coefficient updates. */
3974:Drivers/CMSIS/Include/arm_math.h ****   } arm_lms_instance_f32;
3975:Drivers/CMSIS/Include/arm_math.h **** 
3976:Drivers/CMSIS/Include/arm_math.h **** 
3977:Drivers/CMSIS/Include/arm_math.h ****   /**
3978:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for floating-point LMS filter.
3979:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point LMS filter structure.
3980:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
3981:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
3982:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut       points to the block of output data.
3983:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pErr       points to the block of error data.
3984:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
3985:Drivers/CMSIS/Include/arm_math.h ****    */
3986:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_f32(
3987:Drivers/CMSIS/Include/arm_math.h ****   const arm_lms_instance_f32 * S,
3988:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
3989:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pRef,
3990:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pOut,
3991:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pErr,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 94


3992:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
3993:Drivers/CMSIS/Include/arm_math.h **** 
3994:Drivers/CMSIS/Include/arm_math.h **** 
3995:Drivers/CMSIS/Include/arm_math.h ****   /**
3996:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for floating-point LMS filter.
3997:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the floating-point LMS filter structure.
3998:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
3999:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.
4000:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to state buffer.
4001:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4002:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
4003:Drivers/CMSIS/Include/arm_math.h ****    */
4004:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_init_f32(
4005:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_instance_f32 * S,
4006:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4007:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
4008:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
4009:Drivers/CMSIS/Include/arm_math.h ****   float32_t mu,
4010:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4011:Drivers/CMSIS/Include/arm_math.h **** 
4012:Drivers/CMSIS/Include/arm_math.h **** 
4013:Drivers/CMSIS/Include/arm_math.h ****   /**
4014:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 LMS filter.
4015:Drivers/CMSIS/Include/arm_math.h ****    */
4016:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4017:Drivers/CMSIS/Include/arm_math.h ****   {
4018:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;    /**< number of coefficients in the filter. */
4019:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;       /**< points to the state variable array. The array is of length numTaps+bl
4020:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;      /**< points to the coefficient array. The array is of length numTaps. */
4021:Drivers/CMSIS/Include/arm_math.h ****     q15_t mu;            /**< step size that controls filter coefficient updates. */
4022:Drivers/CMSIS/Include/arm_math.h ****     uint32_t postShift;  /**< bit shift applied to coefficients. */
4023:Drivers/CMSIS/Include/arm_math.h ****   } arm_lms_instance_q15;
4024:Drivers/CMSIS/Include/arm_math.h **** 
4025:Drivers/CMSIS/Include/arm_math.h **** 
4026:Drivers/CMSIS/Include/arm_math.h ****   /**
4027:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for the Q15 LMS filter.
4028:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q15 LMS filter structure.
4029:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4030:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to the coefficient buffer.
4031:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to the state buffer.
4032:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4033:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
4034:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4035:Drivers/CMSIS/Include/arm_math.h ****    */
4036:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_init_q15(
4037:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_instance_q15 * S,
4038:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4039:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
4040:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
4041:Drivers/CMSIS/Include/arm_math.h ****   q15_t mu,
4042:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
4043:Drivers/CMSIS/Include/arm_math.h ****   uint32_t postShift);
4044:Drivers/CMSIS/Include/arm_math.h **** 
4045:Drivers/CMSIS/Include/arm_math.h **** 
4046:Drivers/CMSIS/Include/arm_math.h ****   /**
4047:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for Q15 LMS filter.
4048:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 LMS filter structure.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 95


4049:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4050:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4051:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut       points to the block of output data.
4052:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pErr       points to the block of error data.
4053:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4054:Drivers/CMSIS/Include/arm_math.h ****    */
4055:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_q15(
4056:Drivers/CMSIS/Include/arm_math.h ****   const arm_lms_instance_q15 * S,
4057:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
4058:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pRef,
4059:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pOut,
4060:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pErr,
4061:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4062:Drivers/CMSIS/Include/arm_math.h **** 
4063:Drivers/CMSIS/Include/arm_math.h **** 
4064:Drivers/CMSIS/Include/arm_math.h ****   /**
4065:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 LMS filter.
4066:Drivers/CMSIS/Include/arm_math.h ****    */
4067:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4068:Drivers/CMSIS/Include/arm_math.h ****   {
4069:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;    /**< number of coefficients in the filter. */
4070:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;       /**< points to the state variable array. The array is of length numTaps+bl
4071:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;      /**< points to the coefficient array. The array is of length numTaps. */
4072:Drivers/CMSIS/Include/arm_math.h ****     q31_t mu;            /**< step size that controls filter coefficient updates. */
4073:Drivers/CMSIS/Include/arm_math.h ****     uint32_t postShift;  /**< bit shift applied to coefficients. */
4074:Drivers/CMSIS/Include/arm_math.h ****   } arm_lms_instance_q31;
4075:Drivers/CMSIS/Include/arm_math.h **** 
4076:Drivers/CMSIS/Include/arm_math.h **** 
4077:Drivers/CMSIS/Include/arm_math.h ****   /**
4078:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for Q31 LMS filter.
4079:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 LMS filter structure.
4080:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4081:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4082:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut       points to the block of output data.
4083:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pErr       points to the block of error data.
4084:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4085:Drivers/CMSIS/Include/arm_math.h ****    */
4086:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_q31(
4087:Drivers/CMSIS/Include/arm_math.h ****   const arm_lms_instance_q31 * S,
4088:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
4089:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pRef,
4090:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pOut,
4091:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pErr,
4092:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4093:Drivers/CMSIS/Include/arm_math.h **** 
4094:Drivers/CMSIS/Include/arm_math.h **** 
4095:Drivers/CMSIS/Include/arm_math.h ****   /**
4096:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for Q31 LMS filter.
4097:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q31 LMS filter structure.
4098:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4099:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4100:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to state buffer.
4101:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4102:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
4103:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4104:Drivers/CMSIS/Include/arm_math.h ****    */
4105:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_init_q31(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 96


4106:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_instance_q31 * S,
4107:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4108:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
4109:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
4110:Drivers/CMSIS/Include/arm_math.h ****   q31_t mu,
4111:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
4112:Drivers/CMSIS/Include/arm_math.h ****   uint32_t postShift);
4113:Drivers/CMSIS/Include/arm_math.h **** 
4114:Drivers/CMSIS/Include/arm_math.h **** 
4115:Drivers/CMSIS/Include/arm_math.h ****   /**
4116:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point normalized LMS filter.
4117:Drivers/CMSIS/Include/arm_math.h ****    */
4118:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4119:Drivers/CMSIS/Include/arm_math.h ****   {
4120:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;     /**< number of coefficients in the filter. */
4121:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;    /**< points to the state variable array. The array is of length numTaps+b
4122:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;   /**< points to the coefficient array. The array is of length numTaps. */
4123:Drivers/CMSIS/Include/arm_math.h ****     float32_t mu;         /**< step size that control filter coefficient updates. */
4124:Drivers/CMSIS/Include/arm_math.h ****     float32_t energy;     /**< saves previous frame energy. */
4125:Drivers/CMSIS/Include/arm_math.h ****     float32_t x0;         /**< saves previous input sample. */
4126:Drivers/CMSIS/Include/arm_math.h ****   } arm_lms_norm_instance_f32;
4127:Drivers/CMSIS/Include/arm_math.h **** 
4128:Drivers/CMSIS/Include/arm_math.h **** 
4129:Drivers/CMSIS/Include/arm_math.h ****   /**
4130:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for floating-point normalized LMS filter.
4131:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the floating-point normalized LMS filter struc
4132:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4133:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4134:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut       points to the block of output data.
4135:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pErr       points to the block of error data.
4136:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4137:Drivers/CMSIS/Include/arm_math.h ****    */
4138:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_norm_f32(
4139:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_norm_instance_f32 * S,
4140:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
4141:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pRef,
4142:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pOut,
4143:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pErr,
4144:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4145:Drivers/CMSIS/Include/arm_math.h **** 
4146:Drivers/CMSIS/Include/arm_math.h **** 
4147:Drivers/CMSIS/Include/arm_math.h ****   /**
4148:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for floating-point normalized LMS filter.
4149:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the floating-point LMS filter structure.
4150:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4151:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4152:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to state buffer.
4153:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4154:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
4155:Drivers/CMSIS/Include/arm_math.h ****    */
4156:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_norm_init_f32(
4157:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_norm_instance_f32 * S,
4158:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4159:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
4160:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
4161:Drivers/CMSIS/Include/arm_math.h ****   float32_t mu,
4162:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 97


4163:Drivers/CMSIS/Include/arm_math.h **** 
4164:Drivers/CMSIS/Include/arm_math.h **** 
4165:Drivers/CMSIS/Include/arm_math.h ****   /**
4166:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 normalized LMS filter.
4167:Drivers/CMSIS/Include/arm_math.h ****    */
4168:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4169:Drivers/CMSIS/Include/arm_math.h ****   {
4170:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;     /**< number of coefficients in the filter. */
4171:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;        /**< points to the state variable array. The array is of length numTaps+b
4172:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;       /**< points to the coefficient array. The array is of length numTaps. */
4173:Drivers/CMSIS/Include/arm_math.h ****     q31_t mu;             /**< step size that controls filter coefficient updates. */
4174:Drivers/CMSIS/Include/arm_math.h ****     uint8_t postShift;    /**< bit shift applied to coefficients. */
4175:Drivers/CMSIS/Include/arm_math.h ****     q31_t *recipTable;    /**< points to the reciprocal initial value table. */
4176:Drivers/CMSIS/Include/arm_math.h ****     q31_t energy;         /**< saves previous frame energy. */
4177:Drivers/CMSIS/Include/arm_math.h ****     q31_t x0;             /**< saves previous input sample. */
4178:Drivers/CMSIS/Include/arm_math.h ****   } arm_lms_norm_instance_q31;
4179:Drivers/CMSIS/Include/arm_math.h **** 
4180:Drivers/CMSIS/Include/arm_math.h **** 
4181:Drivers/CMSIS/Include/arm_math.h ****   /**
4182:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for Q31 normalized LMS filter.
4183:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q31 normalized LMS filter structure.
4184:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4185:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4186:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut       points to the block of output data.
4187:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pErr       points to the block of error data.
4188:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4189:Drivers/CMSIS/Include/arm_math.h ****    */
4190:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_norm_q31(
4191:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_norm_instance_q31 * S,
4192:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
4193:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pRef,
4194:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pOut,
4195:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pErr,
4196:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4197:Drivers/CMSIS/Include/arm_math.h **** 
4198:Drivers/CMSIS/Include/arm_math.h **** 
4199:Drivers/CMSIS/Include/arm_math.h ****   /**
4200:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for Q31 normalized LMS filter.
4201:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q31 normalized LMS filter structure.
4202:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4203:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4204:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to state buffer.
4205:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4206:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
4207:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4208:Drivers/CMSIS/Include/arm_math.h ****    */
4209:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_norm_init_q31(
4210:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_norm_instance_q31 * S,
4211:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4212:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
4213:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
4214:Drivers/CMSIS/Include/arm_math.h ****   q31_t mu,
4215:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
4216:Drivers/CMSIS/Include/arm_math.h ****   uint8_t postShift);
4217:Drivers/CMSIS/Include/arm_math.h **** 
4218:Drivers/CMSIS/Include/arm_math.h **** 
4219:Drivers/CMSIS/Include/arm_math.h ****   /**
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 98


4220:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 normalized LMS filter.
4221:Drivers/CMSIS/Include/arm_math.h ****    */
4222:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4223:Drivers/CMSIS/Include/arm_math.h ****   {
4224:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;     /**< Number of coefficients in the filter. */
4225:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;        /**< points to the state variable array. The array is of length numTaps+b
4226:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;       /**< points to the coefficient array. The array is of length numTaps. */
4227:Drivers/CMSIS/Include/arm_math.h ****     q15_t mu;             /**< step size that controls filter coefficient updates. */
4228:Drivers/CMSIS/Include/arm_math.h ****     uint8_t postShift;    /**< bit shift applied to coefficients. */
4229:Drivers/CMSIS/Include/arm_math.h ****     q15_t *recipTable;    /**< Points to the reciprocal initial value table. */
4230:Drivers/CMSIS/Include/arm_math.h ****     q15_t energy;         /**< saves previous frame energy. */
4231:Drivers/CMSIS/Include/arm_math.h ****     q15_t x0;             /**< saves previous input sample. */
4232:Drivers/CMSIS/Include/arm_math.h ****   } arm_lms_norm_instance_q15;
4233:Drivers/CMSIS/Include/arm_math.h **** 
4234:Drivers/CMSIS/Include/arm_math.h **** 
4235:Drivers/CMSIS/Include/arm_math.h ****   /**
4236:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for Q15 normalized LMS filter.
4237:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S          points to an instance of the Q15 normalized LMS filter structure.
4238:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       points to the block of input data.
4239:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pRef       points to the block of reference data.
4240:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut       points to the block of output data.
4241:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pErr       points to the block of error data.
4242:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process.
4243:Drivers/CMSIS/Include/arm_math.h ****    */
4244:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_norm_q15(
4245:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_norm_instance_q15 * S,
4246:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
4247:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pRef,
4248:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pOut,
4249:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pErr,
4250:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4251:Drivers/CMSIS/Include/arm_math.h **** 
4252:Drivers/CMSIS/Include/arm_math.h **** 
4253:Drivers/CMSIS/Include/arm_math.h ****   /**
4254:Drivers/CMSIS/Include/arm_math.h ****    * @brief Initialization function for Q15 normalized LMS filter.
4255:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] S          points to an instance of the Q15 normalized LMS filter structure.
4256:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] numTaps    number of filter coefficients.
4257:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pCoeffs    points to coefficient buffer.
4258:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pState     points to state buffer.
4259:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] mu         step size that controls filter coefficient updates.
4260:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] blockSize  number of samples to process.
4261:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] postShift  bit shift applied to coefficients.
4262:Drivers/CMSIS/Include/arm_math.h ****    */
4263:Drivers/CMSIS/Include/arm_math.h ****   void arm_lms_norm_init_q15(
4264:Drivers/CMSIS/Include/arm_math.h ****   arm_lms_norm_instance_q15 * S,
4265:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4266:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
4267:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
4268:Drivers/CMSIS/Include/arm_math.h ****   q15_t mu,
4269:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize,
4270:Drivers/CMSIS/Include/arm_math.h ****   uint8_t postShift);
4271:Drivers/CMSIS/Include/arm_math.h **** 
4272:Drivers/CMSIS/Include/arm_math.h **** 
4273:Drivers/CMSIS/Include/arm_math.h ****   /**
4274:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of floating-point sequences.
4275:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4276:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 99


4277:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4278:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4279:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4280:Drivers/CMSIS/Include/arm_math.h ****    */
4281:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_f32(
4282:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcA,
4283:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4284:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrcB,
4285:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4286:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst);
4287:Drivers/CMSIS/Include/arm_math.h **** 
4288:Drivers/CMSIS/Include/arm_math.h **** 
4289:Drivers/CMSIS/Include/arm_math.h ****    /**
4290:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q15 sequences
4291:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA     points to the first input sequence.
4292:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen   length of the first input sequence.
4293:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB     points to the second input sequence.
4294:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen   length of the second input sequence.
4295:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst      points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1
4296:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, 
4297:Drivers/CMSIS/Include/arm_math.h ****    */
4298:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_opt_q15(
4299:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
4300:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4301:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
4302:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4303:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
4304:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch);
4305:Drivers/CMSIS/Include/arm_math.h **** 
4306:Drivers/CMSIS/Include/arm_math.h **** 
4307:Drivers/CMSIS/Include/arm_math.h ****   /**
4308:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q15 sequences.
4309:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4310:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4311:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4312:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4313:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4314:Drivers/CMSIS/Include/arm_math.h ****    */
4315:Drivers/CMSIS/Include/arm_math.h **** 
4316:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_q15(
4317:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
4318:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4319:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
4320:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4321:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst);
4322:Drivers/CMSIS/Include/arm_math.h **** 
4323:Drivers/CMSIS/Include/arm_math.h **** 
4324:Drivers/CMSIS/Include/arm_math.h ****   /**
4325:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
4326:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4327:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4328:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4329:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4330:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4331:Drivers/CMSIS/Include/arm_math.h ****    */
4332:Drivers/CMSIS/Include/arm_math.h **** 
4333:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_fast_q15(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 100


4334:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
4335:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4336:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
4337:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4338:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst);
4339:Drivers/CMSIS/Include/arm_math.h **** 
4340:Drivers/CMSIS/Include/arm_math.h **** 
4341:Drivers/CMSIS/Include/arm_math.h ****   /**
4342:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
4343:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA     points to the first input sequence.
4344:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen   length of the first input sequence.
4345:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB     points to the second input sequence.
4346:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen   length of the second input sequence.
4347:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst      points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1
4348:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch  points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, 
4349:Drivers/CMSIS/Include/arm_math.h ****    */
4350:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_fast_opt_q15(
4351:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcA,
4352:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4353:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrcB,
4354:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4355:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
4356:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch);
4357:Drivers/CMSIS/Include/arm_math.h **** 
4358:Drivers/CMSIS/Include/arm_math.h **** 
4359:Drivers/CMSIS/Include/arm_math.h ****   /**
4360:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q31 sequences.
4361:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4362:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4363:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4364:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4365:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4366:Drivers/CMSIS/Include/arm_math.h ****    */
4367:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_q31(
4368:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
4369:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4370:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
4371:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4372:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst);
4373:Drivers/CMSIS/Include/arm_math.h **** 
4374:Drivers/CMSIS/Include/arm_math.h **** 
4375:Drivers/CMSIS/Include/arm_math.h ****   /**
4376:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q31 sequences (fast version) for Cortex-M3 and Cortex-M4
4377:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4378:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4379:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4380:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4381:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4382:Drivers/CMSIS/Include/arm_math.h ****    */
4383:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_fast_q31(
4384:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcA,
4385:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4386:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrcB,
4387:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4388:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst);
4389:Drivers/CMSIS/Include/arm_math.h **** 
4390:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 101


4391:Drivers/CMSIS/Include/arm_math.h ****  /**
4392:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q7 sequences.
4393:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA      points to the first input sequence.
4394:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen    length of the first input sequence.
4395:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB      points to the second input sequence.
4396:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen    length of the second input sequence.
4397:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       points to the block of output data  Length 2 * max(srcALen, srcBLen) - 
4398:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch1  points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) +
4399:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratch2  points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).
4400:Drivers/CMSIS/Include/arm_math.h ****    */
4401:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_opt_q7(
4402:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
4403:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4404:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
4405:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4406:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
4407:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch1,
4408:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratch2);
4409:Drivers/CMSIS/Include/arm_math.h **** 
4410:Drivers/CMSIS/Include/arm_math.h **** 
4411:Drivers/CMSIS/Include/arm_math.h ****   /**
4412:Drivers/CMSIS/Include/arm_math.h ****    * @brief Correlation of Q7 sequences.
4413:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcA    points to the first input sequence.
4414:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcALen  length of the first input sequence.
4415:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrcB    points to the second input sequence.
4416:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  srcBLen  length of the second input sequence.
4417:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst     points to the block of output data  Length 2 * max(srcALen, srcBLen) - 1.
4418:Drivers/CMSIS/Include/arm_math.h ****    */
4419:Drivers/CMSIS/Include/arm_math.h ****   void arm_correlate_q7(
4420:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcA,
4421:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcALen,
4422:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrcB,
4423:Drivers/CMSIS/Include/arm_math.h ****   uint32_t srcBLen,
4424:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst);
4425:Drivers/CMSIS/Include/arm_math.h **** 
4426:Drivers/CMSIS/Include/arm_math.h **** 
4427:Drivers/CMSIS/Include/arm_math.h ****   /**
4428:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the floating-point sparse FIR filter.
4429:Drivers/CMSIS/Include/arm_math.h ****    */
4430:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4431:Drivers/CMSIS/Include/arm_math.h ****   {
4432:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4433:Drivers/CMSIS/Include/arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4434:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pState;            /**< points to the state buffer array. The array is of length max
4435:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pCoeffs;           /**< points to the coefficient array. The array is of length numT
4436:Drivers/CMSIS/Include/arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4437:Drivers/CMSIS/Include/arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4438:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_sparse_instance_f32;
4439:Drivers/CMSIS/Include/arm_math.h **** 
4440:Drivers/CMSIS/Include/arm_math.h ****   /**
4441:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q31 sparse FIR filter.
4442:Drivers/CMSIS/Include/arm_math.h ****    */
4443:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4444:Drivers/CMSIS/Include/arm_math.h ****   {
4445:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4446:Drivers/CMSIS/Include/arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4447:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pState;                /**< points to the state buffer array. The array is of length max
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 102


4448:Drivers/CMSIS/Include/arm_math.h ****     q31_t *pCoeffs;               /**< points to the coefficient array. The array is of length numT
4449:Drivers/CMSIS/Include/arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4450:Drivers/CMSIS/Include/arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4451:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_sparse_instance_q31;
4452:Drivers/CMSIS/Include/arm_math.h **** 
4453:Drivers/CMSIS/Include/arm_math.h ****   /**
4454:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q15 sparse FIR filter.
4455:Drivers/CMSIS/Include/arm_math.h ****    */
4456:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4457:Drivers/CMSIS/Include/arm_math.h ****   {
4458:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4459:Drivers/CMSIS/Include/arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4460:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pState;                /**< points to the state buffer array. The array is of length max
4461:Drivers/CMSIS/Include/arm_math.h ****     q15_t *pCoeffs;               /**< points to the coefficient array. The array is of length numT
4462:Drivers/CMSIS/Include/arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4463:Drivers/CMSIS/Include/arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4464:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_sparse_instance_q15;
4465:Drivers/CMSIS/Include/arm_math.h **** 
4466:Drivers/CMSIS/Include/arm_math.h ****   /**
4467:Drivers/CMSIS/Include/arm_math.h ****    * @brief Instance structure for the Q7 sparse FIR filter.
4468:Drivers/CMSIS/Include/arm_math.h ****    */
4469:Drivers/CMSIS/Include/arm_math.h ****   typedef struct
4470:Drivers/CMSIS/Include/arm_math.h ****   {
4471:Drivers/CMSIS/Include/arm_math.h ****     uint16_t numTaps;             /**< number of coefficients in the filter. */
4472:Drivers/CMSIS/Include/arm_math.h ****     uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the stat
4473:Drivers/CMSIS/Include/arm_math.h ****     q7_t *pState;                 /**< points to the state buffer array. The array is of length max
4474:Drivers/CMSIS/Include/arm_math.h ****     q7_t *pCoeffs;                /**< points to the coefficient array. The array is of length numT
4475:Drivers/CMSIS/Include/arm_math.h ****     uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
4476:Drivers/CMSIS/Include/arm_math.h ****     int32_t *pTapDelay;           /**< points to the array of delay values.  The array is of length
4477:Drivers/CMSIS/Include/arm_math.h ****   } arm_fir_sparse_instance_q7;
4478:Drivers/CMSIS/Include/arm_math.h **** 
4479:Drivers/CMSIS/Include/arm_math.h **** 
4480:Drivers/CMSIS/Include/arm_math.h ****   /**
4481:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the floating-point sparse FIR filter.
4482:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S           points to an instance of the floating-point sparse FIR structure.
4483:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the block of input data.
4484:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
4485:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratchIn  points to a temporary buffer of size blockSize.
4486:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize   number of input samples to process per call.
4487:Drivers/CMSIS/Include/arm_math.h ****    */
4488:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_f32(
4489:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_f32 * S,
4490:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
4491:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
4492:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pScratchIn,
4493:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4494:Drivers/CMSIS/Include/arm_math.h **** 
4495:Drivers/CMSIS/Include/arm_math.h **** 
4496:Drivers/CMSIS/Include/arm_math.h ****   /**
4497:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the floating-point sparse FIR filter.
4498:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the floating-point sparse FIR structure.
4499:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4500:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4501:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
4502:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4503:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4504:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 103


4505:Drivers/CMSIS/Include/arm_math.h ****    */
4506:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_init_f32(
4507:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_f32 * S,
4508:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4509:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCoeffs,
4510:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pState,
4511:Drivers/CMSIS/Include/arm_math.h ****   int32_t * pTapDelay,
4512:Drivers/CMSIS/Include/arm_math.h ****   uint16_t maxDelay,
4513:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4514:Drivers/CMSIS/Include/arm_math.h **** 
4515:Drivers/CMSIS/Include/arm_math.h **** 
4516:Drivers/CMSIS/Include/arm_math.h ****   /**
4517:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q31 sparse FIR filter.
4518:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S           points to an instance of the Q31 sparse FIR structure.
4519:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the block of input data.
4520:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the block of output data
4521:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratchIn  points to a temporary buffer of size blockSize.
4522:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize   number of input samples to process per call.
4523:Drivers/CMSIS/Include/arm_math.h ****    */
4524:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_q31(
4525:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_q31 * S,
4526:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
4527:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
4528:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pScratchIn,
4529:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4530:Drivers/CMSIS/Include/arm_math.h **** 
4531:Drivers/CMSIS/Include/arm_math.h **** 
4532:Drivers/CMSIS/Include/arm_math.h ****   /**
4533:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q31 sparse FIR filter.
4534:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q31 sparse FIR structure.
4535:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4536:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4537:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
4538:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4539:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4540:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4541:Drivers/CMSIS/Include/arm_math.h ****    */
4542:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_init_q31(
4543:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_q31 * S,
4544:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4545:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCoeffs,
4546:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pState,
4547:Drivers/CMSIS/Include/arm_math.h ****   int32_t * pTapDelay,
4548:Drivers/CMSIS/Include/arm_math.h ****   uint16_t maxDelay,
4549:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4550:Drivers/CMSIS/Include/arm_math.h **** 
4551:Drivers/CMSIS/Include/arm_math.h **** 
4552:Drivers/CMSIS/Include/arm_math.h ****   /**
4553:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q15 sparse FIR filter.
4554:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S            points to an instance of the Q15 sparse FIR structure.
4555:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc         points to the block of input data.
4556:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst         points to the block of output data
4557:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratchIn   points to a temporary buffer of size blockSize.
4558:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratchOut  points to a temporary buffer of size blockSize.
4559:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize    number of input samples to process per call.
4560:Drivers/CMSIS/Include/arm_math.h ****    */
4561:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_q15(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 104


4562:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_q15 * S,
4563:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
4564:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
4565:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pScratchIn,
4566:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pScratchOut,
4567:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4568:Drivers/CMSIS/Include/arm_math.h **** 
4569:Drivers/CMSIS/Include/arm_math.h **** 
4570:Drivers/CMSIS/Include/arm_math.h ****   /**
4571:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q15 sparse FIR filter.
4572:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q15 sparse FIR structure.
4573:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4574:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4575:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
4576:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4577:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4578:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4579:Drivers/CMSIS/Include/arm_math.h ****    */
4580:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_init_q15(
4581:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_q15 * S,
4582:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4583:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pCoeffs,
4584:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pState,
4585:Drivers/CMSIS/Include/arm_math.h ****   int32_t * pTapDelay,
4586:Drivers/CMSIS/Include/arm_math.h ****   uint16_t maxDelay,
4587:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4588:Drivers/CMSIS/Include/arm_math.h **** 
4589:Drivers/CMSIS/Include/arm_math.h **** 
4590:Drivers/CMSIS/Include/arm_math.h ****   /**
4591:Drivers/CMSIS/Include/arm_math.h ****    * @brief Processing function for the Q7 sparse FIR filter.
4592:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  S            points to an instance of the Q7 sparse FIR structure.
4593:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc         points to the block of input data.
4594:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst         points to the block of output data
4595:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratchIn   points to a temporary buffer of size blockSize.
4596:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pScratchOut  points to a temporary buffer of size blockSize.
4597:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize    number of input samples to process per call.
4598:Drivers/CMSIS/Include/arm_math.h ****    */
4599:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_q7(
4600:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_q7 * S,
4601:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
4602:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pDst,
4603:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pScratchIn,
4604:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pScratchOut,
4605:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4606:Drivers/CMSIS/Include/arm_math.h **** 
4607:Drivers/CMSIS/Include/arm_math.h **** 
4608:Drivers/CMSIS/Include/arm_math.h ****   /**
4609:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Initialization function for the Q7 sparse FIR filter.
4610:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S          points to an instance of the Q7 sparse FIR structure.
4611:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     numTaps    number of nonzero coefficients in the filter.
4612:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pCoeffs    points to the array of filter coefficients.
4613:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pState     points to the state buffer.
4614:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     pTapDelay  points to the array of offset times.
4615:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     maxDelay   maximum offset time supported.
4616:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     blockSize  number of samples that will be processed per block.
4617:Drivers/CMSIS/Include/arm_math.h ****    */
4618:Drivers/CMSIS/Include/arm_math.h ****   void arm_fir_sparse_init_q7(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 105


4619:Drivers/CMSIS/Include/arm_math.h ****   arm_fir_sparse_instance_q7 * S,
4620:Drivers/CMSIS/Include/arm_math.h ****   uint16_t numTaps,
4621:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pCoeffs,
4622:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pState,
4623:Drivers/CMSIS/Include/arm_math.h ****   int32_t * pTapDelay,
4624:Drivers/CMSIS/Include/arm_math.h ****   uint16_t maxDelay,
4625:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
4626:Drivers/CMSIS/Include/arm_math.h **** 
4627:Drivers/CMSIS/Include/arm_math.h **** 
4628:Drivers/CMSIS/Include/arm_math.h ****   /**
4629:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point sin_cos function.
4630:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  theta   input value in degrees
4631:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pSinVal  points to the processed sine output.
4632:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pCosVal  points to the processed cos output.
4633:Drivers/CMSIS/Include/arm_math.h ****    */
4634:Drivers/CMSIS/Include/arm_math.h ****   void arm_sin_cos_f32(
4635:Drivers/CMSIS/Include/arm_math.h ****   float32_t theta,
4636:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSinVal,
4637:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pCosVal);
4638:Drivers/CMSIS/Include/arm_math.h **** 
4639:Drivers/CMSIS/Include/arm_math.h **** 
4640:Drivers/CMSIS/Include/arm_math.h ****   /**
4641:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q31 sin_cos function.
4642:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  theta    scaled input value in degrees
4643:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pSinVal  points to the processed sine output.
4644:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pCosVal  points to the processed cosine output.
4645:Drivers/CMSIS/Include/arm_math.h ****    */
4646:Drivers/CMSIS/Include/arm_math.h ****   void arm_sin_cos_q31(
4647:Drivers/CMSIS/Include/arm_math.h ****   q31_t theta,
4648:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSinVal,
4649:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pCosVal);
4650:Drivers/CMSIS/Include/arm_math.h **** 
4651:Drivers/CMSIS/Include/arm_math.h **** 
4652:Drivers/CMSIS/Include/arm_math.h ****   /**
4653:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point complex conjugate.
4654:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the input vector
4655:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the output vector
4656:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numSamples  number of complex samples in each vector
4657:Drivers/CMSIS/Include/arm_math.h ****    */
4658:Drivers/CMSIS/Include/arm_math.h ****   void arm_cmplx_conj_f32(
4659:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
4660:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
4661:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numSamples);
4662:Drivers/CMSIS/Include/arm_math.h **** 
4663:Drivers/CMSIS/Include/arm_math.h ****   /**
4664:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q31 complex conjugate.
4665:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the input vector
4666:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the output vector
4667:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numSamples  number of complex samples in each vector
4668:Drivers/CMSIS/Include/arm_math.h ****    */
4669:Drivers/CMSIS/Include/arm_math.h ****   void arm_cmplx_conj_q31(
4670:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
4671:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
4672:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numSamples);
4673:Drivers/CMSIS/Include/arm_math.h **** 
4674:Drivers/CMSIS/Include/arm_math.h **** 
4675:Drivers/CMSIS/Include/arm_math.h ****   /**
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 106


4676:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q15 complex conjugate.
4677:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the input vector
4678:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the output vector
4679:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numSamples  number of complex samples in each vector
4680:Drivers/CMSIS/Include/arm_math.h ****    */
4681:Drivers/CMSIS/Include/arm_math.h ****   void arm_cmplx_conj_q15(
4682:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
4683:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
4684:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numSamples);
4685:Drivers/CMSIS/Include/arm_math.h **** 
4686:Drivers/CMSIS/Include/arm_math.h **** 
4687:Drivers/CMSIS/Include/arm_math.h ****   /**
4688:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point complex magnitude squared
4689:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the complex input vector
4690:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the real output vector
4691:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numSamples  number of complex samples in the input vector
4692:Drivers/CMSIS/Include/arm_math.h ****    */
4693:Drivers/CMSIS/Include/arm_math.h ****   void arm_cmplx_mag_squared_f32(
4694:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pSrc,
4695:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
4696:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numSamples);
4697:Drivers/CMSIS/Include/arm_math.h **** 
4698:Drivers/CMSIS/Include/arm_math.h **** 
4699:Drivers/CMSIS/Include/arm_math.h ****   /**
4700:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q31 complex magnitude squared
4701:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the complex input vector
4702:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the real output vector
4703:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numSamples  number of complex samples in the input vector
4704:Drivers/CMSIS/Include/arm_math.h ****    */
4705:Drivers/CMSIS/Include/arm_math.h ****   void arm_cmplx_mag_squared_q31(
4706:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
4707:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
4708:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numSamples);
4709:Drivers/CMSIS/Include/arm_math.h **** 
4710:Drivers/CMSIS/Include/arm_math.h **** 
4711:Drivers/CMSIS/Include/arm_math.h ****   /**
4712:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Q15 complex magnitude squared
4713:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc        points to the complex input vector
4714:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst        points to the real output vector
4715:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  numSamples  number of complex samples in the input vector
4716:Drivers/CMSIS/Include/arm_math.h ****    */
4717:Drivers/CMSIS/Include/arm_math.h ****   void arm_cmplx_mag_squared_q15(
4718:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pSrc,
4719:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
4720:Drivers/CMSIS/Include/arm_math.h ****   uint32_t numSamples);
4721:Drivers/CMSIS/Include/arm_math.h **** 
4722:Drivers/CMSIS/Include/arm_math.h **** 
4723:Drivers/CMSIS/Include/arm_math.h ****  /**
4724:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupController
4725:Drivers/CMSIS/Include/arm_math.h ****    */
4726:Drivers/CMSIS/Include/arm_math.h **** 
4727:Drivers/CMSIS/Include/arm_math.h ****   /**
4728:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup PID PID Motor Control
4729:Drivers/CMSIS/Include/arm_math.h ****    *
4730:Drivers/CMSIS/Include/arm_math.h ****    * A Proportional Integral Derivative (PID) controller is a generic feedback control
4731:Drivers/CMSIS/Include/arm_math.h ****    * loop mechanism widely used in industrial control systems.
4732:Drivers/CMSIS/Include/arm_math.h ****    * A PID controller is the most commonly used type of feedback controller.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 107


4733:Drivers/CMSIS/Include/arm_math.h ****    *
4734:Drivers/CMSIS/Include/arm_math.h ****    * This set of functions implements (PID) controllers
4735:Drivers/CMSIS/Include/arm_math.h ****    * for Q15, Q31, and floating-point data types.  The functions operate on a single sample
4736:Drivers/CMSIS/Include/arm_math.h ****    * of data and each call to the function returns a single processed value.
4737:Drivers/CMSIS/Include/arm_math.h ****    * <code>S</code> points to an instance of the PID control data structure.  <code>in</code>
4738:Drivers/CMSIS/Include/arm_math.h ****    * is the input sample value. The functions return the output value.
4739:Drivers/CMSIS/Include/arm_math.h ****    *
4740:Drivers/CMSIS/Include/arm_math.h ****    * \par Algorithm:
4741:Drivers/CMSIS/Include/arm_math.h ****    * <pre>
4742:Drivers/CMSIS/Include/arm_math.h ****    *    y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]
4743:Drivers/CMSIS/Include/arm_math.h ****    *    A0 = Kp + Ki + Kd
4744:Drivers/CMSIS/Include/arm_math.h ****    *    A1 = (-Kp ) - (2 * Kd )
4745:Drivers/CMSIS/Include/arm_math.h ****    *    A2 = Kd  </pre>
4746:Drivers/CMSIS/Include/arm_math.h ****    *
4747:Drivers/CMSIS/Include/arm_math.h ****    * \par
4748:Drivers/CMSIS/Include/arm_math.h ****    * where \c Kp is proportional constant, \c Ki is Integral constant and \c Kd is Derivative const
4749:Drivers/CMSIS/Include/arm_math.h ****    *
4750:Drivers/CMSIS/Include/arm_math.h ****    * \par
4751:Drivers/CMSIS/Include/arm_math.h ****    * \image html PID.gif "Proportional Integral Derivative Controller"
4752:Drivers/CMSIS/Include/arm_math.h ****    *
4753:Drivers/CMSIS/Include/arm_math.h ****    * \par
4754:Drivers/CMSIS/Include/arm_math.h ****    * The PID controller calculates an "error" value as the difference between
4755:Drivers/CMSIS/Include/arm_math.h ****    * the measured output and the reference input.
4756:Drivers/CMSIS/Include/arm_math.h ****    * The controller attempts to minimize the error by adjusting the process control inputs.
4757:Drivers/CMSIS/Include/arm_math.h ****    * The proportional value determines the reaction to the current error,
4758:Drivers/CMSIS/Include/arm_math.h ****    * the integral value determines the reaction based on the sum of recent errors,
4759:Drivers/CMSIS/Include/arm_math.h ****    * and the derivative value determines the reaction based on the rate at which the error has been
4760:Drivers/CMSIS/Include/arm_math.h ****    *
4761:Drivers/CMSIS/Include/arm_math.h ****    * \par Instance Structure
4762:Drivers/CMSIS/Include/arm_math.h ****    * The Gains A0, A1, A2 and state variables for a PID controller are stored together in an instan
4763:Drivers/CMSIS/Include/arm_math.h ****    * A separate instance structure must be defined for each PID Controller.
4764:Drivers/CMSIS/Include/arm_math.h ****    * There are separate instance structure declarations for each of the 3 supported data types.
4765:Drivers/CMSIS/Include/arm_math.h ****    *
4766:Drivers/CMSIS/Include/arm_math.h ****    * \par Reset Functions
4767:Drivers/CMSIS/Include/arm_math.h ****    * There is also an associated reset function for each data type which clears the state array.
4768:Drivers/CMSIS/Include/arm_math.h ****    *
4769:Drivers/CMSIS/Include/arm_math.h ****    * \par Initialization Functions
4770:Drivers/CMSIS/Include/arm_math.h ****    * There is also an associated initialization function for each data type.
4771:Drivers/CMSIS/Include/arm_math.h ****    * The initialization function performs the following operations:
4772:Drivers/CMSIS/Include/arm_math.h ****    * - Initializes the Gains A0, A1, A2 from Kp,Ki, Kd gains.
4773:Drivers/CMSIS/Include/arm_math.h ****    * - Zeros out the values in the state buffer.
4774:Drivers/CMSIS/Include/arm_math.h ****    *
4775:Drivers/CMSIS/Include/arm_math.h ****    * \par
4776:Drivers/CMSIS/Include/arm_math.h ****    * Instance structure cannot be placed into a const data section and it is recommended to use the
4777:Drivers/CMSIS/Include/arm_math.h ****    *
4778:Drivers/CMSIS/Include/arm_math.h ****    * \par Fixed-Point Behavior
4779:Drivers/CMSIS/Include/arm_math.h ****    * Care must be taken when using the fixed-point versions of the PID Controller functions.
4780:Drivers/CMSIS/Include/arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used in each function m
4781:Drivers/CMSIS/Include/arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
4782:Drivers/CMSIS/Include/arm_math.h ****    */
4783:Drivers/CMSIS/Include/arm_math.h **** 
4784:Drivers/CMSIS/Include/arm_math.h ****   /**
4785:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup PID
4786:Drivers/CMSIS/Include/arm_math.h ****    * @{
4787:Drivers/CMSIS/Include/arm_math.h ****    */
4788:Drivers/CMSIS/Include/arm_math.h **** 
4789:Drivers/CMSIS/Include/arm_math.h ****   /**
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 108


4790:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the floating-point PID Control.
4791:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S   is an instance of the floating-point PID Control structure
4792:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     in  input sample to process
4793:Drivers/CMSIS/Include/arm_math.h ****    * @return out processed output sample.
4794:Drivers/CMSIS/Include/arm_math.h ****    */
4795:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE float32_t arm_pid_f32(
4796:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_f32 * S,
4797:Drivers/CMSIS/Include/arm_math.h ****   float32_t in)
4798:Drivers/CMSIS/Include/arm_math.h ****   {
4799:Drivers/CMSIS/Include/arm_math.h ****     float32_t out;
4800:Drivers/CMSIS/Include/arm_math.h **** 
4801:Drivers/CMSIS/Include/arm_math.h ****     /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
4802:Drivers/CMSIS/Include/arm_math.h ****     out = (S->A0 * in) +
4803:Drivers/CMSIS/Include/arm_math.h ****       (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
4804:Drivers/CMSIS/Include/arm_math.h **** 
4805:Drivers/CMSIS/Include/arm_math.h ****     /* Update state */
4806:Drivers/CMSIS/Include/arm_math.h ****     S->state[1] = S->state[0];
4807:Drivers/CMSIS/Include/arm_math.h ****     S->state[0] = in;
4808:Drivers/CMSIS/Include/arm_math.h ****     S->state[2] = out;
4809:Drivers/CMSIS/Include/arm_math.h **** 
4810:Drivers/CMSIS/Include/arm_math.h ****     /* return to application */
4811:Drivers/CMSIS/Include/arm_math.h ****     return (out);
4812:Drivers/CMSIS/Include/arm_math.h **** 
4813:Drivers/CMSIS/Include/arm_math.h ****   }
4814:Drivers/CMSIS/Include/arm_math.h **** 
4815:Drivers/CMSIS/Include/arm_math.h ****   /**
4816:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the Q31 PID Control.
4817:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S  points to an instance of the Q31 PID Control structure
4818:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     in  input sample to process
4819:Drivers/CMSIS/Include/arm_math.h ****    * @return out processed output sample.
4820:Drivers/CMSIS/Include/arm_math.h ****    *
4821:Drivers/CMSIS/Include/arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
4822:Drivers/CMSIS/Include/arm_math.h ****    * \par
4823:Drivers/CMSIS/Include/arm_math.h ****    * The function is implemented using an internal 64-bit accumulator.
4824:Drivers/CMSIS/Include/arm_math.h ****    * The accumulator has a 2.62 format and maintains full precision of the intermediate multiplicat
4825:Drivers/CMSIS/Include/arm_math.h ****    * Thus, if the accumulator result overflows it wraps around rather than clip.
4826:Drivers/CMSIS/Include/arm_math.h ****    * In order to avoid overflows completely the input signal must be scaled down by 2 bits as there
4827:Drivers/CMSIS/Include/arm_math.h ****    * After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format
4828:Drivers/CMSIS/Include/arm_math.h ****    */
4829:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q31_t arm_pid_q31(
4830:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_q31 * S,
4831:Drivers/CMSIS/Include/arm_math.h ****   q31_t in)
4832:Drivers/CMSIS/Include/arm_math.h ****   {
4833:Drivers/CMSIS/Include/arm_math.h ****     q63_t acc;
4834:Drivers/CMSIS/Include/arm_math.h ****     q31_t out;
4835:Drivers/CMSIS/Include/arm_math.h **** 
4836:Drivers/CMSIS/Include/arm_math.h ****     /* acc = A0 * x[n]  */
4837:Drivers/CMSIS/Include/arm_math.h ****     acc = (q63_t) S->A0 * in;
4838:Drivers/CMSIS/Include/arm_math.h **** 
4839:Drivers/CMSIS/Include/arm_math.h ****     /* acc += A1 * x[n-1] */
4840:Drivers/CMSIS/Include/arm_math.h ****     acc += (q63_t) S->A1 * S->state[0];
4841:Drivers/CMSIS/Include/arm_math.h **** 
4842:Drivers/CMSIS/Include/arm_math.h ****     /* acc += A2 * x[n-2]  */
4843:Drivers/CMSIS/Include/arm_math.h ****     acc += (q63_t) S->A2 * S->state[1];
4844:Drivers/CMSIS/Include/arm_math.h **** 
4845:Drivers/CMSIS/Include/arm_math.h ****     /* convert output to 1.31 format to add y[n-1] */
4846:Drivers/CMSIS/Include/arm_math.h ****     out = (q31_t) (acc >> 31u);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 109


4847:Drivers/CMSIS/Include/arm_math.h **** 
4848:Drivers/CMSIS/Include/arm_math.h ****     /* out += y[n-1] */
4849:Drivers/CMSIS/Include/arm_math.h ****     out += S->state[2];
4850:Drivers/CMSIS/Include/arm_math.h **** 
4851:Drivers/CMSIS/Include/arm_math.h ****     /* Update state */
4852:Drivers/CMSIS/Include/arm_math.h ****     S->state[1] = S->state[0];
4853:Drivers/CMSIS/Include/arm_math.h ****     S->state[0] = in;
4854:Drivers/CMSIS/Include/arm_math.h ****     S->state[2] = out;
4855:Drivers/CMSIS/Include/arm_math.h **** 
4856:Drivers/CMSIS/Include/arm_math.h ****     /* return to application */
4857:Drivers/CMSIS/Include/arm_math.h ****     return (out);
4858:Drivers/CMSIS/Include/arm_math.h ****   }
4859:Drivers/CMSIS/Include/arm_math.h **** 
4860:Drivers/CMSIS/Include/arm_math.h **** 
4861:Drivers/CMSIS/Include/arm_math.h ****   /**
4862:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the Q15 PID Control.
4863:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S   points to an instance of the Q15 PID Control structure
4864:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     in  input sample to process
4865:Drivers/CMSIS/Include/arm_math.h ****    * @return out processed output sample.
4866:Drivers/CMSIS/Include/arm_math.h ****    *
4867:Drivers/CMSIS/Include/arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
4868:Drivers/CMSIS/Include/arm_math.h ****    * \par
4869:Drivers/CMSIS/Include/arm_math.h ****    * The function is implemented using a 64-bit internal accumulator.
4870:Drivers/CMSIS/Include/arm_math.h ****    * Both Gains and state variables are represented in 1.15 format and multiplications yield a 2.30
4871:Drivers/CMSIS/Include/arm_math.h ****    * The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format.
4872:Drivers/CMSIS/Include/arm_math.h ****    * There is no risk of internal overflow with this approach and the full precision of intermediat
4873:Drivers/CMSIS/Include/arm_math.h ****    * After all additions have been performed, the accumulator is truncated to 34.15 format by disca
4874:Drivers/CMSIS/Include/arm_math.h ****    * Lastly, the accumulator is saturated to yield a result in 1.15 format.
4875:Drivers/CMSIS/Include/arm_math.h ****    */
4876:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q15_t arm_pid_q15(
4877:Drivers/CMSIS/Include/arm_math.h ****   arm_pid_instance_q15 * S,
4878:Drivers/CMSIS/Include/arm_math.h ****   q15_t in)
4879:Drivers/CMSIS/Include/arm_math.h ****   {
4880:Drivers/CMSIS/Include/arm_math.h ****     q63_t acc;
4881:Drivers/CMSIS/Include/arm_math.h ****     q15_t out;
4882:Drivers/CMSIS/Include/arm_math.h **** 
4883:Drivers/CMSIS/Include/arm_math.h **** #ifndef ARM_MATH_CM0_FAMILY
4884:Drivers/CMSIS/Include/arm_math.h ****     __SIMD32_TYPE *vstate;
4885:Drivers/CMSIS/Include/arm_math.h **** 
4886:Drivers/CMSIS/Include/arm_math.h ****     /* Implementation of PID controller */
4887:Drivers/CMSIS/Include/arm_math.h **** 
4888:Drivers/CMSIS/Include/arm_math.h ****     /* acc = A0 * x[n]  */
4889:Drivers/CMSIS/Include/arm_math.h ****     acc = (q31_t) __SMUAD((uint32_t)S->A0, (uint32_t)in);
4890:Drivers/CMSIS/Include/arm_math.h **** 
4891:Drivers/CMSIS/Include/arm_math.h ****     /* acc += A1 * x[n-1] + A2 * x[n-2]  */
4892:Drivers/CMSIS/Include/arm_math.h ****     vstate = __SIMD32_CONST(S->state);
4893:Drivers/CMSIS/Include/arm_math.h ****     acc = (q63_t)__SMLALD((uint32_t)S->A1, (uint32_t)*vstate, (uint64_t)acc);
4894:Drivers/CMSIS/Include/arm_math.h **** #else
4895:Drivers/CMSIS/Include/arm_math.h ****     /* acc = A0 * x[n]  */
4896:Drivers/CMSIS/Include/arm_math.h ****     acc = ((q31_t) S->A0) * in;
4897:Drivers/CMSIS/Include/arm_math.h **** 
4898:Drivers/CMSIS/Include/arm_math.h ****     /* acc += A1 * x[n-1] + A2 * x[n-2]  */
4899:Drivers/CMSIS/Include/arm_math.h ****     acc += (q31_t) S->A1 * S->state[0];
4900:Drivers/CMSIS/Include/arm_math.h ****     acc += (q31_t) S->A2 * S->state[1];
4901:Drivers/CMSIS/Include/arm_math.h **** #endif
4902:Drivers/CMSIS/Include/arm_math.h **** 
4903:Drivers/CMSIS/Include/arm_math.h ****     /* acc += y[n-1] */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 110


4904:Drivers/CMSIS/Include/arm_math.h ****     acc += (q31_t) S->state[2] << 15;
4905:Drivers/CMSIS/Include/arm_math.h **** 
4906:Drivers/CMSIS/Include/arm_math.h ****     /* saturate the output */
4907:Drivers/CMSIS/Include/arm_math.h ****     out = (q15_t) (__SSAT((acc >> 15), 16));
4908:Drivers/CMSIS/Include/arm_math.h **** 
4909:Drivers/CMSIS/Include/arm_math.h ****     /* Update state */
4910:Drivers/CMSIS/Include/arm_math.h ****     S->state[1] = S->state[0];
4911:Drivers/CMSIS/Include/arm_math.h ****     S->state[0] = in;
4912:Drivers/CMSIS/Include/arm_math.h ****     S->state[2] = out;
4913:Drivers/CMSIS/Include/arm_math.h **** 
4914:Drivers/CMSIS/Include/arm_math.h ****     /* return to application */
4915:Drivers/CMSIS/Include/arm_math.h ****     return (out);
4916:Drivers/CMSIS/Include/arm_math.h ****   }
4917:Drivers/CMSIS/Include/arm_math.h **** 
4918:Drivers/CMSIS/Include/arm_math.h ****   /**
4919:Drivers/CMSIS/Include/arm_math.h ****    * @} end of PID group
4920:Drivers/CMSIS/Include/arm_math.h ****    */
4921:Drivers/CMSIS/Include/arm_math.h **** 
4922:Drivers/CMSIS/Include/arm_math.h **** 
4923:Drivers/CMSIS/Include/arm_math.h ****   /**
4924:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix inverse.
4925:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  src   points to the instance of the input floating-point matrix structure.
4926:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] dst   points to the instance of the output floating-point matrix structure.
4927:Drivers/CMSIS/Include/arm_math.h ****    * @return The function returns ARM_MATH_SIZE_MISMATCH, if the dimensions do not match.
4928:Drivers/CMSIS/Include/arm_math.h ****    * If the input matrix is singular (does not have an inverse), then the algorithm terminates and 
4929:Drivers/CMSIS/Include/arm_math.h ****    */
4930:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_inverse_f32(
4931:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f32 * src,
4932:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f32 * dst);
4933:Drivers/CMSIS/Include/arm_math.h **** 
4934:Drivers/CMSIS/Include/arm_math.h **** 
4935:Drivers/CMSIS/Include/arm_math.h ****   /**
4936:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point matrix inverse.
4937:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  src   points to the instance of the input floating-point matrix structure.
4938:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] dst   points to the instance of the output floating-point matrix structure.
4939:Drivers/CMSIS/Include/arm_math.h ****    * @return The function returns ARM_MATH_SIZE_MISMATCH, if the dimensions do not match.
4940:Drivers/CMSIS/Include/arm_math.h ****    * If the input matrix is singular (does not have an inverse), then the algorithm terminates and 
4941:Drivers/CMSIS/Include/arm_math.h ****    */
4942:Drivers/CMSIS/Include/arm_math.h ****   arm_status arm_mat_inverse_f64(
4943:Drivers/CMSIS/Include/arm_math.h ****   const arm_matrix_instance_f64 * src,
4944:Drivers/CMSIS/Include/arm_math.h ****   arm_matrix_instance_f64 * dst);
4945:Drivers/CMSIS/Include/arm_math.h **** 
4946:Drivers/CMSIS/Include/arm_math.h **** 
4947:Drivers/CMSIS/Include/arm_math.h **** 
4948:Drivers/CMSIS/Include/arm_math.h ****   /**
4949:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupController
4950:Drivers/CMSIS/Include/arm_math.h ****    */
4951:Drivers/CMSIS/Include/arm_math.h **** 
4952:Drivers/CMSIS/Include/arm_math.h ****   /**
4953:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup clarke Vector Clarke Transform
4954:Drivers/CMSIS/Include/arm_math.h ****    * Forward Clarke transform converts the instantaneous stator phases into a two-coordinate time i
4955:Drivers/CMSIS/Include/arm_math.h ****    * Generally the Clarke transform uses three-phase currents <code>Ia, Ib and Ic</code> to calcula
4956:Drivers/CMSIS/Include/arm_math.h ****    * in the two-phase orthogonal stator axis <code>Ialpha</code> and <code>Ibeta</code>.
4957:Drivers/CMSIS/Include/arm_math.h ****    * When <code>Ialpha</code> is superposed with <code>Ia</code> as shown in the figure below
4958:Drivers/CMSIS/Include/arm_math.h ****    * \image html clarke.gif Stator current space vector and its components in (a,b).
4959:Drivers/CMSIS/Include/arm_math.h ****    * and <code>Ia + Ib + Ic = 0</code>, in this condition <code>Ialpha</code> and <code>Ibeta</code
4960:Drivers/CMSIS/Include/arm_math.h ****    * can be calculated using only <code>Ia</code> and <code>Ib</code>.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 111


4961:Drivers/CMSIS/Include/arm_math.h ****    *
4962:Drivers/CMSIS/Include/arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
4963:Drivers/CMSIS/Include/arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
4964:Drivers/CMSIS/Include/arm_math.h ****    * \par Algorithm
4965:Drivers/CMSIS/Include/arm_math.h ****    * \image html clarkeFormula.gif
4966:Drivers/CMSIS/Include/arm_math.h ****    * where <code>Ia</code> and <code>Ib</code> are the instantaneous stator phases and
4967:Drivers/CMSIS/Include/arm_math.h ****    * <code>pIalpha</code> and <code>pIbeta</code> are the two coordinates of time invariant vector.
4968:Drivers/CMSIS/Include/arm_math.h ****    * \par Fixed-Point Behavior
4969:Drivers/CMSIS/Include/arm_math.h ****    * Care must be taken when using the Q31 version of the Clarke transform.
4970:Drivers/CMSIS/Include/arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
4971:Drivers/CMSIS/Include/arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
4972:Drivers/CMSIS/Include/arm_math.h ****    */
4973:Drivers/CMSIS/Include/arm_math.h **** 
4974:Drivers/CMSIS/Include/arm_math.h ****   /**
4975:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup clarke
4976:Drivers/CMSIS/Include/arm_math.h ****    * @{
4977:Drivers/CMSIS/Include/arm_math.h ****    */
4978:Drivers/CMSIS/Include/arm_math.h **** 
4979:Drivers/CMSIS/Include/arm_math.h ****   /**
4980:Drivers/CMSIS/Include/arm_math.h ****    *
4981:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point Clarke transform
4982:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ia       input three-phase coordinate <code>a</code>
4983:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ib       input three-phase coordinate <code>b</code>
4984:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
4985:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
4986:Drivers/CMSIS/Include/arm_math.h ****    */
4987:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_clarke_f32(
4988:Drivers/CMSIS/Include/arm_math.h ****   float32_t Ia,
4989:Drivers/CMSIS/Include/arm_math.h ****   float32_t Ib,
4990:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIalpha,
4991:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIbeta)
4992:Drivers/CMSIS/Include/arm_math.h ****   {
4993:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIalpha using the equation, pIalpha = Ia */
4994:Drivers/CMSIS/Include/arm_math.h ****     *pIalpha = Ia;
4995:Drivers/CMSIS/Include/arm_math.h **** 
4996:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
4997:Drivers/CMSIS/Include/arm_math.h ****     *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
4998:Drivers/CMSIS/Include/arm_math.h ****   }
4999:Drivers/CMSIS/Include/arm_math.h **** 
5000:Drivers/CMSIS/Include/arm_math.h **** 
5001:Drivers/CMSIS/Include/arm_math.h ****   /**
5002:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Clarke transform for Q31 version
5003:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ia       input three-phase coordinate <code>a</code>
5004:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ib       input three-phase coordinate <code>b</code>
5005:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
5006:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5007:Drivers/CMSIS/Include/arm_math.h ****    *
5008:Drivers/CMSIS/Include/arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5009:Drivers/CMSIS/Include/arm_math.h ****    * \par
5010:Drivers/CMSIS/Include/arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5011:Drivers/CMSIS/Include/arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5012:Drivers/CMSIS/Include/arm_math.h ****    * There is saturation on the addition, hence there is no risk of overflow.
5013:Drivers/CMSIS/Include/arm_math.h ****    */
5014:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_clarke_q31(
5015:Drivers/CMSIS/Include/arm_math.h ****   q31_t Ia,
5016:Drivers/CMSIS/Include/arm_math.h ****   q31_t Ib,
5017:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIalpha,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 112


5018:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIbeta)
5019:Drivers/CMSIS/Include/arm_math.h ****   {
5020:Drivers/CMSIS/Include/arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5021:Drivers/CMSIS/Include/arm_math.h **** 
5022:Drivers/CMSIS/Include/arm_math.h ****     /* Calculating pIalpha from Ia by equation pIalpha = Ia */
5023:Drivers/CMSIS/Include/arm_math.h ****     *pIalpha = Ia;
5024:Drivers/CMSIS/Include/arm_math.h **** 
5025:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (1/(sqrt(3)) * Ia) */
5026:Drivers/CMSIS/Include/arm_math.h ****     product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);
5027:Drivers/CMSIS/Include/arm_math.h **** 
5028:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (2/sqrt(3) * Ib) */
5029:Drivers/CMSIS/Include/arm_math.h ****     product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);
5030:Drivers/CMSIS/Include/arm_math.h **** 
5031:Drivers/CMSIS/Include/arm_math.h ****     /* pIbeta is calculated by adding the intermediate products */
5032:Drivers/CMSIS/Include/arm_math.h ****     *pIbeta = __QADD(product1, product2);
5033:Drivers/CMSIS/Include/arm_math.h ****   }
5034:Drivers/CMSIS/Include/arm_math.h **** 
5035:Drivers/CMSIS/Include/arm_math.h ****   /**
5036:Drivers/CMSIS/Include/arm_math.h ****    * @} end of clarke group
5037:Drivers/CMSIS/Include/arm_math.h ****    */
5038:Drivers/CMSIS/Include/arm_math.h **** 
5039:Drivers/CMSIS/Include/arm_math.h ****   /**
5040:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Converts the elements of the Q7 vector to Q31 vector.
5041:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       input pointer
5042:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
5043:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
5044:Drivers/CMSIS/Include/arm_math.h ****    */
5045:Drivers/CMSIS/Include/arm_math.h ****   void arm_q7_to_q31(
5046:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
5047:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pDst,
5048:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
5049:Drivers/CMSIS/Include/arm_math.h **** 
5050:Drivers/CMSIS/Include/arm_math.h **** 
5051:Drivers/CMSIS/Include/arm_math.h **** 
5052:Drivers/CMSIS/Include/arm_math.h ****   /**
5053:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupController
5054:Drivers/CMSIS/Include/arm_math.h ****    */
5055:Drivers/CMSIS/Include/arm_math.h **** 
5056:Drivers/CMSIS/Include/arm_math.h ****   /**
5057:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup inv_clarke Vector Inverse Clarke Transform
5058:Drivers/CMSIS/Include/arm_math.h ****    * Inverse Clarke transform converts the two-coordinate time invariant vector into instantaneous 
5059:Drivers/CMSIS/Include/arm_math.h ****    *
5060:Drivers/CMSIS/Include/arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5061:Drivers/CMSIS/Include/arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5062:Drivers/CMSIS/Include/arm_math.h ****    * \par Algorithm
5063:Drivers/CMSIS/Include/arm_math.h ****    * \image html clarkeInvFormula.gif
5064:Drivers/CMSIS/Include/arm_math.h ****    * where <code>pIa</code> and <code>pIb</code> are the instantaneous stator phases and
5065:Drivers/CMSIS/Include/arm_math.h ****    * <code>Ialpha</code> and <code>Ibeta</code> are the two coordinates of time invariant vector.
5066:Drivers/CMSIS/Include/arm_math.h ****    * \par Fixed-Point Behavior
5067:Drivers/CMSIS/Include/arm_math.h ****    * Care must be taken when using the Q31 version of the Clarke transform.
5068:Drivers/CMSIS/Include/arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5069:Drivers/CMSIS/Include/arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5070:Drivers/CMSIS/Include/arm_math.h ****    */
5071:Drivers/CMSIS/Include/arm_math.h **** 
5072:Drivers/CMSIS/Include/arm_math.h ****   /**
5073:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup inv_clarke
5074:Drivers/CMSIS/Include/arm_math.h ****    * @{
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 113


5075:Drivers/CMSIS/Include/arm_math.h ****    */
5076:Drivers/CMSIS/Include/arm_math.h **** 
5077:Drivers/CMSIS/Include/arm_math.h ****    /**
5078:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point Inverse Clarke transform
5079:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ialpha  input two-phase orthogonal vector axis alpha
5080:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ibeta   input two-phase orthogonal vector axis beta
5081:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIa     points to output three-phase coordinate <code>a</code>
5082:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIb     points to output three-phase coordinate <code>b</code>
5083:Drivers/CMSIS/Include/arm_math.h ****    */
5084:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_inv_clarke_f32(
5085:Drivers/CMSIS/Include/arm_math.h ****   float32_t Ialpha,
5086:Drivers/CMSIS/Include/arm_math.h ****   float32_t Ibeta,
5087:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIa,
5088:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIb)
5089:Drivers/CMSIS/Include/arm_math.h ****   {
5090:Drivers/CMSIS/Include/arm_math.h ****     /* Calculating pIa from Ialpha by equation pIa = Ialpha */
5091:Drivers/CMSIS/Include/arm_math.h ****     *pIa = Ialpha;
5092:Drivers/CMSIS/Include/arm_math.h **** 
5093:Drivers/CMSIS/Include/arm_math.h ****     /* Calculating pIb from Ialpha and Ibeta by equation pIb = -(1/2) * Ialpha + (sqrt(3)/2) * Ibet
5094:Drivers/CMSIS/Include/arm_math.h ****     *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
5095:Drivers/CMSIS/Include/arm_math.h ****   }
5096:Drivers/CMSIS/Include/arm_math.h **** 
5097:Drivers/CMSIS/Include/arm_math.h **** 
5098:Drivers/CMSIS/Include/arm_math.h ****   /**
5099:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Inverse Clarke transform for Q31 version
5100:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ialpha  input two-phase orthogonal vector axis alpha
5101:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ibeta   input two-phase orthogonal vector axis beta
5102:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIa     points to output three-phase coordinate <code>a</code>
5103:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIb     points to output three-phase coordinate <code>b</code>
5104:Drivers/CMSIS/Include/arm_math.h ****    *
5105:Drivers/CMSIS/Include/arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5106:Drivers/CMSIS/Include/arm_math.h ****    * \par
5107:Drivers/CMSIS/Include/arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5108:Drivers/CMSIS/Include/arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5109:Drivers/CMSIS/Include/arm_math.h ****    * There is saturation on the subtraction, hence there is no risk of overflow.
5110:Drivers/CMSIS/Include/arm_math.h ****    */
5111:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_inv_clarke_q31(
5112:Drivers/CMSIS/Include/arm_math.h ****   q31_t Ialpha,
5113:Drivers/CMSIS/Include/arm_math.h ****   q31_t Ibeta,
5114:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIa,
5115:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIb)
5116:Drivers/CMSIS/Include/arm_math.h ****   {
5117:Drivers/CMSIS/Include/arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5118:Drivers/CMSIS/Include/arm_math.h **** 
5119:Drivers/CMSIS/Include/arm_math.h ****     /* Calculating pIa from Ialpha by equation pIa = Ialpha */
5120:Drivers/CMSIS/Include/arm_math.h ****     *pIa = Ialpha;
5121:Drivers/CMSIS/Include/arm_math.h **** 
5122:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (1/(2*sqrt(3)) * Ia) */
5123:Drivers/CMSIS/Include/arm_math.h ****     product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);
5124:Drivers/CMSIS/Include/arm_math.h **** 
5125:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (1/sqrt(3) * pIb) */
5126:Drivers/CMSIS/Include/arm_math.h ****     product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);
5127:Drivers/CMSIS/Include/arm_math.h **** 
5128:Drivers/CMSIS/Include/arm_math.h ****     /* pIb is calculated by subtracting the products */
5129:Drivers/CMSIS/Include/arm_math.h ****     *pIb = __QSUB(product2, product1);
5130:Drivers/CMSIS/Include/arm_math.h ****   }
5131:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 114


5132:Drivers/CMSIS/Include/arm_math.h ****   /**
5133:Drivers/CMSIS/Include/arm_math.h ****    * @} end of inv_clarke group
5134:Drivers/CMSIS/Include/arm_math.h ****    */
5135:Drivers/CMSIS/Include/arm_math.h **** 
5136:Drivers/CMSIS/Include/arm_math.h ****   /**
5137:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Converts the elements of the Q7 vector to Q15 vector.
5138:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       input pointer
5139:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       output pointer
5140:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  number of samples to process
5141:Drivers/CMSIS/Include/arm_math.h ****    */
5142:Drivers/CMSIS/Include/arm_math.h ****   void arm_q7_to_q15(
5143:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
5144:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pDst,
5145:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
5146:Drivers/CMSIS/Include/arm_math.h **** 
5147:Drivers/CMSIS/Include/arm_math.h **** 
5148:Drivers/CMSIS/Include/arm_math.h **** 
5149:Drivers/CMSIS/Include/arm_math.h ****   /**
5150:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupController
5151:Drivers/CMSIS/Include/arm_math.h ****    */
5152:Drivers/CMSIS/Include/arm_math.h **** 
5153:Drivers/CMSIS/Include/arm_math.h ****   /**
5154:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup park Vector Park Transform
5155:Drivers/CMSIS/Include/arm_math.h ****    *
5156:Drivers/CMSIS/Include/arm_math.h ****    * Forward Park transform converts the input two-coordinate vector to flux and torque components.
5157:Drivers/CMSIS/Include/arm_math.h ****    * The Park transform can be used to realize the transformation of the <code>Ialpha</code> and th
5158:Drivers/CMSIS/Include/arm_math.h ****    * from the stationary to the moving reference frame and control the spatial relationship between
5159:Drivers/CMSIS/Include/arm_math.h ****    * the stator vector current and rotor flux vector.
5160:Drivers/CMSIS/Include/arm_math.h ****    * If we consider the d axis aligned with the rotor flux, the diagram below shows the
5161:Drivers/CMSIS/Include/arm_math.h ****    * current vector and the relationship from the two reference frames:
5162:Drivers/CMSIS/Include/arm_math.h ****    * \image html park.gif "Stator current space vector and its component in (a,b) and in the d,q ro
5163:Drivers/CMSIS/Include/arm_math.h ****    *
5164:Drivers/CMSIS/Include/arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5165:Drivers/CMSIS/Include/arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5166:Drivers/CMSIS/Include/arm_math.h ****    * \par Algorithm
5167:Drivers/CMSIS/Include/arm_math.h ****    * \image html parkFormula.gif
5168:Drivers/CMSIS/Include/arm_math.h ****    * where <code>Ialpha</code> and <code>Ibeta</code> are the stator vector components,
5169:Drivers/CMSIS/Include/arm_math.h ****    * <code>pId</code> and <code>pIq</code> are rotor vector components and <code>cosVal</code> and 
5170:Drivers/CMSIS/Include/arm_math.h ****    * cosine and sine values of theta (rotor flux position).
5171:Drivers/CMSIS/Include/arm_math.h ****    * \par Fixed-Point Behavior
5172:Drivers/CMSIS/Include/arm_math.h ****    * Care must be taken when using the Q31 version of the Park transform.
5173:Drivers/CMSIS/Include/arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5174:Drivers/CMSIS/Include/arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5175:Drivers/CMSIS/Include/arm_math.h ****    */
5176:Drivers/CMSIS/Include/arm_math.h **** 
5177:Drivers/CMSIS/Include/arm_math.h ****   /**
5178:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup park
5179:Drivers/CMSIS/Include/arm_math.h ****    * @{
5180:Drivers/CMSIS/Include/arm_math.h ****    */
5181:Drivers/CMSIS/Include/arm_math.h **** 
5182:Drivers/CMSIS/Include/arm_math.h ****   /**
5183:Drivers/CMSIS/Include/arm_math.h ****    * @brief Floating-point Park transform
5184:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ialpha  input two-phase vector coordinate alpha
5185:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ibeta   input two-phase vector coordinate beta
5186:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pId     points to output   rotor reference frame d
5187:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIq     points to output   rotor reference frame q
5188:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  sinVal  sine value of rotation angle theta
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 115


5189:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  cosVal  cosine value of rotation angle theta
5190:Drivers/CMSIS/Include/arm_math.h ****    *
5191:Drivers/CMSIS/Include/arm_math.h ****    * The function implements the forward Park transform.
5192:Drivers/CMSIS/Include/arm_math.h ****    *
5193:Drivers/CMSIS/Include/arm_math.h ****    */
5194:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_park_f32(
5195:Drivers/CMSIS/Include/arm_math.h ****   float32_t Ialpha,
5196:Drivers/CMSIS/Include/arm_math.h ****   float32_t Ibeta,
5197:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pId,
5198:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIq,
5199:Drivers/CMSIS/Include/arm_math.h ****   float32_t sinVal,
5200:Drivers/CMSIS/Include/arm_math.h ****   float32_t cosVal)
5201:Drivers/CMSIS/Include/arm_math.h ****   {
5202:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
5203:Drivers/CMSIS/Include/arm_math.h ****     *pId = Ialpha * cosVal + Ibeta * sinVal;
5204:Drivers/CMSIS/Include/arm_math.h **** 
5205:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
5206:Drivers/CMSIS/Include/arm_math.h ****     *pIq = -Ialpha * sinVal + Ibeta * cosVal;
5207:Drivers/CMSIS/Include/arm_math.h ****   }
5208:Drivers/CMSIS/Include/arm_math.h **** 
5209:Drivers/CMSIS/Include/arm_math.h **** 
5210:Drivers/CMSIS/Include/arm_math.h ****   /**
5211:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Park transform for Q31 version
5212:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ialpha  input two-phase vector coordinate alpha
5213:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Ibeta   input two-phase vector coordinate beta
5214:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pId     points to output rotor reference frame d
5215:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIq     points to output rotor reference frame q
5216:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  sinVal  sine value of rotation angle theta
5217:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  cosVal  cosine value of rotation angle theta
5218:Drivers/CMSIS/Include/arm_math.h ****    *
5219:Drivers/CMSIS/Include/arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5220:Drivers/CMSIS/Include/arm_math.h ****    * \par
5221:Drivers/CMSIS/Include/arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5222:Drivers/CMSIS/Include/arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5223:Drivers/CMSIS/Include/arm_math.h ****    * There is saturation on the addition and subtraction, hence there is no risk of overflow.
5224:Drivers/CMSIS/Include/arm_math.h ****    */
5225:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_park_q31(
5226:Drivers/CMSIS/Include/arm_math.h ****   q31_t Ialpha,
5227:Drivers/CMSIS/Include/arm_math.h ****   q31_t Ibeta,
5228:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pId,
5229:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIq,
5230:Drivers/CMSIS/Include/arm_math.h ****   q31_t sinVal,
5231:Drivers/CMSIS/Include/arm_math.h ****   q31_t cosVal)
5232:Drivers/CMSIS/Include/arm_math.h ****   {
5233:Drivers/CMSIS/Include/arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5234:Drivers/CMSIS/Include/arm_math.h ****     q31_t product3, product4;                    /* Temporary variables used to store intermediate 
5235:Drivers/CMSIS/Include/arm_math.h **** 
5236:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Ialpha * cosVal) */
5237:Drivers/CMSIS/Include/arm_math.h ****     product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);
5238:Drivers/CMSIS/Include/arm_math.h **** 
5239:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Ibeta * sinVal) */
5240:Drivers/CMSIS/Include/arm_math.h ****     product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);
5241:Drivers/CMSIS/Include/arm_math.h **** 
5242:Drivers/CMSIS/Include/arm_math.h **** 
5243:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Ialpha * sinVal) */
5244:Drivers/CMSIS/Include/arm_math.h ****     product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);
5245:Drivers/CMSIS/Include/arm_math.h **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 116


5246:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Ibeta * cosVal) */
5247:Drivers/CMSIS/Include/arm_math.h ****     product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);
5248:Drivers/CMSIS/Include/arm_math.h **** 
5249:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pId by adding the two intermediate products 1 and 2 */
5250:Drivers/CMSIS/Include/arm_math.h ****     *pId = __QADD(product1, product2);
5251:Drivers/CMSIS/Include/arm_math.h **** 
5252:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIq by subtracting the two intermediate products 3 from 4 */
5253:Drivers/CMSIS/Include/arm_math.h ****     *pIq = __QSUB(product4, product3);
5254:Drivers/CMSIS/Include/arm_math.h ****   }
5255:Drivers/CMSIS/Include/arm_math.h **** 
5256:Drivers/CMSIS/Include/arm_math.h ****   /**
5257:Drivers/CMSIS/Include/arm_math.h ****    * @} end of park group
5258:Drivers/CMSIS/Include/arm_math.h ****    */
5259:Drivers/CMSIS/Include/arm_math.h **** 
5260:Drivers/CMSIS/Include/arm_math.h ****   /**
5261:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Converts the elements of the Q7 vector to floating-point vector.
5262:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       is input pointer
5263:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       is output pointer
5264:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  is the number of samples to process
5265:Drivers/CMSIS/Include/arm_math.h ****    */
5266:Drivers/CMSIS/Include/arm_math.h ****   void arm_q7_to_float(
5267:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pSrc,
5268:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
5269:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
5270:Drivers/CMSIS/Include/arm_math.h **** 
5271:Drivers/CMSIS/Include/arm_math.h **** 
5272:Drivers/CMSIS/Include/arm_math.h ****   /**
5273:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupController
5274:Drivers/CMSIS/Include/arm_math.h ****    */
5275:Drivers/CMSIS/Include/arm_math.h **** 
5276:Drivers/CMSIS/Include/arm_math.h ****   /**
5277:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup inv_park Vector Inverse Park transform
5278:Drivers/CMSIS/Include/arm_math.h ****    * Inverse Park transform converts the input flux and torque components to two-coordinate vector.
5279:Drivers/CMSIS/Include/arm_math.h ****    *
5280:Drivers/CMSIS/Include/arm_math.h ****    * The function operates on a single sample of data and each call to the function returns the pro
5281:Drivers/CMSIS/Include/arm_math.h ****    * The library provides separate functions for Q31 and floating-point data types.
5282:Drivers/CMSIS/Include/arm_math.h ****    * \par Algorithm
5283:Drivers/CMSIS/Include/arm_math.h ****    * \image html parkInvFormula.gif
5284:Drivers/CMSIS/Include/arm_math.h ****    * where <code>pIalpha</code> and <code>pIbeta</code> are the stator vector components,
5285:Drivers/CMSIS/Include/arm_math.h ****    * <code>Id</code> and <code>Iq</code> are rotor vector components and <code>cosVal</code> and <c
5286:Drivers/CMSIS/Include/arm_math.h ****    * cosine and sine values of theta (rotor flux position).
5287:Drivers/CMSIS/Include/arm_math.h ****    * \par Fixed-Point Behavior
5288:Drivers/CMSIS/Include/arm_math.h ****    * Care must be taken when using the Q31 version of the Park transform.
5289:Drivers/CMSIS/Include/arm_math.h ****    * In particular, the overflow and saturation behavior of the accumulator used must be considered
5290:Drivers/CMSIS/Include/arm_math.h ****    * Refer to the function specific documentation below for usage guidelines.
5291:Drivers/CMSIS/Include/arm_math.h ****    */
5292:Drivers/CMSIS/Include/arm_math.h **** 
5293:Drivers/CMSIS/Include/arm_math.h ****   /**
5294:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup inv_park
5295:Drivers/CMSIS/Include/arm_math.h ****    * @{
5296:Drivers/CMSIS/Include/arm_math.h ****    */
5297:Drivers/CMSIS/Include/arm_math.h **** 
5298:Drivers/CMSIS/Include/arm_math.h ****    /**
5299:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point Inverse Park transform
5300:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Id       input coordinate of rotor reference frame d
5301:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Iq       input coordinate of rotor reference frame q
5302:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 117


5303:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5304:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  sinVal   sine value of rotation angle theta
5305:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  cosVal   cosine value of rotation angle theta
5306:Drivers/CMSIS/Include/arm_math.h ****    */
5307:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_inv_park_f32(
5308:Drivers/CMSIS/Include/arm_math.h ****   float32_t Id,
5309:Drivers/CMSIS/Include/arm_math.h ****   float32_t Iq,
5310:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIalpha,
5311:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pIbeta,
5312:Drivers/CMSIS/Include/arm_math.h ****   float32_t sinVal,
5313:Drivers/CMSIS/Include/arm_math.h ****   float32_t cosVal)
5314:Drivers/CMSIS/Include/arm_math.h ****   {
5315:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
5316:Drivers/CMSIS/Include/arm_math.h ****     *pIalpha = Id * cosVal - Iq * sinVal;
5317:Drivers/CMSIS/Include/arm_math.h **** 
5318:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
5319:Drivers/CMSIS/Include/arm_math.h ****     *pIbeta = Id * sinVal + Iq * cosVal;
5320:Drivers/CMSIS/Include/arm_math.h ****   }
5321:Drivers/CMSIS/Include/arm_math.h **** 
5322:Drivers/CMSIS/Include/arm_math.h **** 
5323:Drivers/CMSIS/Include/arm_math.h ****   /**
5324:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Inverse Park transform for   Q31 version
5325:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Id       input coordinate of rotor reference frame d
5326:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  Iq       input coordinate of rotor reference frame q
5327:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIalpha  points to output two-phase orthogonal vector axis alpha
5328:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pIbeta   points to output two-phase orthogonal vector axis beta
5329:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  sinVal   sine value of rotation angle theta
5330:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  cosVal   cosine value of rotation angle theta
5331:Drivers/CMSIS/Include/arm_math.h ****    *
5332:Drivers/CMSIS/Include/arm_math.h ****    * <b>Scaling and Overflow Behavior:</b>
5333:Drivers/CMSIS/Include/arm_math.h ****    * \par
5334:Drivers/CMSIS/Include/arm_math.h ****    * The function is implemented using an internal 32-bit accumulator.
5335:Drivers/CMSIS/Include/arm_math.h ****    * The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multipli
5336:Drivers/CMSIS/Include/arm_math.h ****    * There is saturation on the addition, hence there is no risk of overflow.
5337:Drivers/CMSIS/Include/arm_math.h ****    */
5338:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE void arm_inv_park_q31(
5339:Drivers/CMSIS/Include/arm_math.h ****   q31_t Id,
5340:Drivers/CMSIS/Include/arm_math.h ****   q31_t Iq,
5341:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIalpha,
5342:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pIbeta,
5343:Drivers/CMSIS/Include/arm_math.h ****   q31_t sinVal,
5344:Drivers/CMSIS/Include/arm_math.h ****   q31_t cosVal)
5345:Drivers/CMSIS/Include/arm_math.h ****   {
5346:Drivers/CMSIS/Include/arm_math.h ****     q31_t product1, product2;                    /* Temporary variables used to store intermediate 
5347:Drivers/CMSIS/Include/arm_math.h ****     q31_t product3, product4;                    /* Temporary variables used to store intermediate 
5348:Drivers/CMSIS/Include/arm_math.h **** 
5349:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Id * cosVal) */
5350:Drivers/CMSIS/Include/arm_math.h ****     product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);
5351:Drivers/CMSIS/Include/arm_math.h **** 
5352:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Iq * sinVal) */
5353:Drivers/CMSIS/Include/arm_math.h ****     product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);
5354:Drivers/CMSIS/Include/arm_math.h **** 
5355:Drivers/CMSIS/Include/arm_math.h **** 
5356:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Id * sinVal) */
5357:Drivers/CMSIS/Include/arm_math.h ****     product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);
5358:Drivers/CMSIS/Include/arm_math.h **** 
5359:Drivers/CMSIS/Include/arm_math.h ****     /* Intermediate product is calculated by (Iq * cosVal) */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 118


5360:Drivers/CMSIS/Include/arm_math.h ****     product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);
5361:Drivers/CMSIS/Include/arm_math.h **** 
5362:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIalpha by using the two intermediate products 1 and 2 */
5363:Drivers/CMSIS/Include/arm_math.h ****     *pIalpha = __QSUB(product1, product2);
5364:Drivers/CMSIS/Include/arm_math.h **** 
5365:Drivers/CMSIS/Include/arm_math.h ****     /* Calculate pIbeta by using the two intermediate products 3 and 4 */
5366:Drivers/CMSIS/Include/arm_math.h ****     *pIbeta = __QADD(product4, product3);
5367:Drivers/CMSIS/Include/arm_math.h ****   }
5368:Drivers/CMSIS/Include/arm_math.h **** 
5369:Drivers/CMSIS/Include/arm_math.h ****   /**
5370:Drivers/CMSIS/Include/arm_math.h ****    * @} end of Inverse park group
5371:Drivers/CMSIS/Include/arm_math.h ****    */
5372:Drivers/CMSIS/Include/arm_math.h **** 
5373:Drivers/CMSIS/Include/arm_math.h **** 
5374:Drivers/CMSIS/Include/arm_math.h ****   /**
5375:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Converts the elements of the Q31 vector to floating-point vector.
5376:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  pSrc       is input pointer
5377:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pDst       is output pointer
5378:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  blockSize  is the number of samples to process
5379:Drivers/CMSIS/Include/arm_math.h ****    */
5380:Drivers/CMSIS/Include/arm_math.h ****   void arm_q31_to_float(
5381:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pSrc,
5382:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pDst,
5383:Drivers/CMSIS/Include/arm_math.h ****   uint32_t blockSize);
5384:Drivers/CMSIS/Include/arm_math.h **** 
5385:Drivers/CMSIS/Include/arm_math.h ****   /**
5386:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupInterpolation
5387:Drivers/CMSIS/Include/arm_math.h ****    */
5388:Drivers/CMSIS/Include/arm_math.h **** 
5389:Drivers/CMSIS/Include/arm_math.h ****   /**
5390:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup LinearInterpolate Linear Interpolation
5391:Drivers/CMSIS/Include/arm_math.h ****    *
5392:Drivers/CMSIS/Include/arm_math.h ****    * Linear interpolation is a method of curve fitting using linear polynomials.
5393:Drivers/CMSIS/Include/arm_math.h ****    * Linear interpolation works by effectively drawing a straight line between two neighboring samp
5394:Drivers/CMSIS/Include/arm_math.h ****    *
5395:Drivers/CMSIS/Include/arm_math.h ****    * \par
5396:Drivers/CMSIS/Include/arm_math.h ****    * \image html LinearInterp.gif "Linear interpolation"
5397:Drivers/CMSIS/Include/arm_math.h ****    *
5398:Drivers/CMSIS/Include/arm_math.h ****    * \par
5399:Drivers/CMSIS/Include/arm_math.h ****    * A  Linear Interpolate function calculates an output value(y), for the input(x)
5400:Drivers/CMSIS/Include/arm_math.h ****    * using linear interpolation of the input values x0, x1( nearest input values) and the output va
5401:Drivers/CMSIS/Include/arm_math.h ****    *
5402:Drivers/CMSIS/Include/arm_math.h ****    * \par Algorithm:
5403:Drivers/CMSIS/Include/arm_math.h ****    * <pre>
5404:Drivers/CMSIS/Include/arm_math.h ****    *       y = y0 + (x - x0) * ((y1 - y0)/(x1-x0))
5405:Drivers/CMSIS/Include/arm_math.h ****    *       where x0, x1 are nearest values of input x
5406:Drivers/CMSIS/Include/arm_math.h ****    *             y0, y1 are nearest values to output y
5407:Drivers/CMSIS/Include/arm_math.h ****    * </pre>
5408:Drivers/CMSIS/Include/arm_math.h ****    *
5409:Drivers/CMSIS/Include/arm_math.h ****    * \par
5410:Drivers/CMSIS/Include/arm_math.h ****    * This set of functions implements Linear interpolation process
5411:Drivers/CMSIS/Include/arm_math.h ****    * for Q7, Q15, Q31, and floating-point data types.  The functions operate on a single
5412:Drivers/CMSIS/Include/arm_math.h ****    * sample of data and each call to the function returns a single processed value.
5413:Drivers/CMSIS/Include/arm_math.h ****    * <code>S</code> points to an instance of the Linear Interpolate function data structure.
5414:Drivers/CMSIS/Include/arm_math.h ****    * <code>x</code> is the input sample value. The functions returns the output value.
5415:Drivers/CMSIS/Include/arm_math.h ****    *
5416:Drivers/CMSIS/Include/arm_math.h ****    * \par
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 119


5417:Drivers/CMSIS/Include/arm_math.h ****    * if x is outside of the table boundary, Linear interpolation returns first value of the table
5418:Drivers/CMSIS/Include/arm_math.h ****    * if x is below input range and returns last value of table if x is above range.
5419:Drivers/CMSIS/Include/arm_math.h ****    */
5420:Drivers/CMSIS/Include/arm_math.h **** 
5421:Drivers/CMSIS/Include/arm_math.h ****   /**
5422:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup LinearInterpolate
5423:Drivers/CMSIS/Include/arm_math.h ****    * @{
5424:Drivers/CMSIS/Include/arm_math.h ****    */
5425:Drivers/CMSIS/Include/arm_math.h **** 
5426:Drivers/CMSIS/Include/arm_math.h ****   /**
5427:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the floating-point Linear Interpolation Function.
5428:Drivers/CMSIS/Include/arm_math.h ****    * @param[in,out] S  is an instance of the floating-point Linear Interpolation structure
5429:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]     x  input sample to process
5430:Drivers/CMSIS/Include/arm_math.h ****    * @return y processed output sample.
5431:Drivers/CMSIS/Include/arm_math.h ****    *
5432:Drivers/CMSIS/Include/arm_math.h ****    */
5433:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE float32_t arm_linear_interp_f32(
5434:Drivers/CMSIS/Include/arm_math.h ****   arm_linear_interp_instance_f32 * S,
5435:Drivers/CMSIS/Include/arm_math.h ****   float32_t x)
5436:Drivers/CMSIS/Include/arm_math.h ****   {
5437:Drivers/CMSIS/Include/arm_math.h ****     float32_t y;
5438:Drivers/CMSIS/Include/arm_math.h ****     float32_t x0, x1;                            /* Nearest input values */
5439:Drivers/CMSIS/Include/arm_math.h ****     float32_t y0, y1;                            /* Nearest output values */
5440:Drivers/CMSIS/Include/arm_math.h ****     float32_t xSpacing = S->xSpacing;            /* spacing between input values */
5441:Drivers/CMSIS/Include/arm_math.h ****     int32_t i;                                   /* Index variable */
5442:Drivers/CMSIS/Include/arm_math.h ****     float32_t *pYData = S->pYData;               /* pointer to output table */
5443:Drivers/CMSIS/Include/arm_math.h **** 
5444:Drivers/CMSIS/Include/arm_math.h ****     /* Calculation of index */
5445:Drivers/CMSIS/Include/arm_math.h ****     i = (int32_t) ((x - S->x1) / xSpacing);
5446:Drivers/CMSIS/Include/arm_math.h **** 
5447:Drivers/CMSIS/Include/arm_math.h ****     if(i < 0)
5448:Drivers/CMSIS/Include/arm_math.h ****     {
5449:Drivers/CMSIS/Include/arm_math.h ****       /* Iniatilize output for below specified range as least output value of table */
5450:Drivers/CMSIS/Include/arm_math.h ****       y = pYData[0];
5451:Drivers/CMSIS/Include/arm_math.h ****     }
5452:Drivers/CMSIS/Include/arm_math.h ****     else if((uint32_t)i >= S->nValues)
5453:Drivers/CMSIS/Include/arm_math.h ****     {
5454:Drivers/CMSIS/Include/arm_math.h ****       /* Iniatilize output for above specified range as last output value of table */
5455:Drivers/CMSIS/Include/arm_math.h ****       y = pYData[S->nValues - 1];
5456:Drivers/CMSIS/Include/arm_math.h ****     }
5457:Drivers/CMSIS/Include/arm_math.h ****     else
5458:Drivers/CMSIS/Include/arm_math.h ****     {
5459:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of nearest input values */
5460:Drivers/CMSIS/Include/arm_math.h ****       x0 = S->x1 +  i      * xSpacing;
5461:Drivers/CMSIS/Include/arm_math.h ****       x1 = S->x1 + (i + 1) * xSpacing;
5462:Drivers/CMSIS/Include/arm_math.h **** 
5463:Drivers/CMSIS/Include/arm_math.h ****       /* Read of nearest output values */
5464:Drivers/CMSIS/Include/arm_math.h ****       y0 = pYData[i];
5465:Drivers/CMSIS/Include/arm_math.h ****       y1 = pYData[i + 1];
5466:Drivers/CMSIS/Include/arm_math.h **** 
5467:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of output */
5468:Drivers/CMSIS/Include/arm_math.h ****       y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));
5469:Drivers/CMSIS/Include/arm_math.h **** 
5470:Drivers/CMSIS/Include/arm_math.h ****     }
5471:Drivers/CMSIS/Include/arm_math.h **** 
5472:Drivers/CMSIS/Include/arm_math.h ****     /* returns output value */
5473:Drivers/CMSIS/Include/arm_math.h ****     return (y);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 120


5474:Drivers/CMSIS/Include/arm_math.h ****   }
5475:Drivers/CMSIS/Include/arm_math.h **** 
5476:Drivers/CMSIS/Include/arm_math.h **** 
5477:Drivers/CMSIS/Include/arm_math.h ****    /**
5478:Drivers/CMSIS/Include/arm_math.h ****    *
5479:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the Q31 Linear Interpolation Function.
5480:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pYData   pointer to Q31 Linear Interpolation table
5481:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x        input sample to process
5482:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] nValues  number of table values
5483:Drivers/CMSIS/Include/arm_math.h ****    * @return y processed output sample.
5484:Drivers/CMSIS/Include/arm_math.h ****    *
5485:Drivers/CMSIS/Include/arm_math.h ****    * \par
5486:Drivers/CMSIS/Include/arm_math.h ****    * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 b
5487:Drivers/CMSIS/Include/arm_math.h ****    * This function can support maximum of table size 2^12.
5488:Drivers/CMSIS/Include/arm_math.h ****    *
5489:Drivers/CMSIS/Include/arm_math.h ****    */
5490:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q31_t arm_linear_interp_q31(
5491:Drivers/CMSIS/Include/arm_math.h ****   q31_t * pYData,
5492:Drivers/CMSIS/Include/arm_math.h ****   q31_t x,
5493:Drivers/CMSIS/Include/arm_math.h ****   uint32_t nValues)
5494:Drivers/CMSIS/Include/arm_math.h ****   {
5495:Drivers/CMSIS/Include/arm_math.h ****     q31_t y;                                     /* output */
5496:Drivers/CMSIS/Include/arm_math.h ****     q31_t y0, y1;                                /* Nearest output values */
5497:Drivers/CMSIS/Include/arm_math.h ****     q31_t fract;                                 /* fractional part */
5498:Drivers/CMSIS/Include/arm_math.h ****     int32_t index;                               /* Index to read nearest output values */
5499:Drivers/CMSIS/Include/arm_math.h **** 
5500:Drivers/CMSIS/Include/arm_math.h ****     /* Input is in 12.20 format */
5501:Drivers/CMSIS/Include/arm_math.h ****     /* 12 bits for the table index */
5502:Drivers/CMSIS/Include/arm_math.h ****     /* Index value calculation */
5503:Drivers/CMSIS/Include/arm_math.h ****     index = ((x & (q31_t)0xFFF00000) >> 20);
5504:Drivers/CMSIS/Include/arm_math.h **** 
5505:Drivers/CMSIS/Include/arm_math.h ****     if(index >= (int32_t)(nValues - 1))
5506:Drivers/CMSIS/Include/arm_math.h ****     {
5507:Drivers/CMSIS/Include/arm_math.h ****       return (pYData[nValues - 1]);
5508:Drivers/CMSIS/Include/arm_math.h ****     }
5509:Drivers/CMSIS/Include/arm_math.h ****     else if(index < 0)
5510:Drivers/CMSIS/Include/arm_math.h ****     {
5511:Drivers/CMSIS/Include/arm_math.h ****       return (pYData[0]);
5512:Drivers/CMSIS/Include/arm_math.h ****     }
5513:Drivers/CMSIS/Include/arm_math.h ****     else
5514:Drivers/CMSIS/Include/arm_math.h ****     {
5515:Drivers/CMSIS/Include/arm_math.h ****       /* 20 bits for the fractional part */
5516:Drivers/CMSIS/Include/arm_math.h ****       /* shift left by 11 to keep fract in 1.31 format */
5517:Drivers/CMSIS/Include/arm_math.h ****       fract = (x & 0x000FFFFF) << 11;
5518:Drivers/CMSIS/Include/arm_math.h **** 
5519:Drivers/CMSIS/Include/arm_math.h ****       /* Read two nearest output values from the index in 1.31(q31) format */
5520:Drivers/CMSIS/Include/arm_math.h ****       y0 = pYData[index];
5521:Drivers/CMSIS/Include/arm_math.h ****       y1 = pYData[index + 1];
5522:Drivers/CMSIS/Include/arm_math.h **** 
5523:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of y0 * (1-fract) and y is in 2.30 format */
5524:Drivers/CMSIS/Include/arm_math.h ****       y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));
5525:Drivers/CMSIS/Include/arm_math.h **** 
5526:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of y0 * (1-fract) + y1 *fract and y is in 2.30 format */
5527:Drivers/CMSIS/Include/arm_math.h ****       y += ((q31_t) (((q63_t) y1 * fract) >> 32));
5528:Drivers/CMSIS/Include/arm_math.h **** 
5529:Drivers/CMSIS/Include/arm_math.h ****       /* Convert y to 1.31 format */
5530:Drivers/CMSIS/Include/arm_math.h ****       return (y << 1u);
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 121


5531:Drivers/CMSIS/Include/arm_math.h ****     }
5532:Drivers/CMSIS/Include/arm_math.h ****   }
5533:Drivers/CMSIS/Include/arm_math.h **** 
5534:Drivers/CMSIS/Include/arm_math.h **** 
5535:Drivers/CMSIS/Include/arm_math.h ****   /**
5536:Drivers/CMSIS/Include/arm_math.h ****    *
5537:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the Q15 Linear Interpolation Function.
5538:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pYData   pointer to Q15 Linear Interpolation table
5539:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x        input sample to process
5540:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] nValues  number of table values
5541:Drivers/CMSIS/Include/arm_math.h ****    * @return y processed output sample.
5542:Drivers/CMSIS/Include/arm_math.h ****    *
5543:Drivers/CMSIS/Include/arm_math.h ****    * \par
5544:Drivers/CMSIS/Include/arm_math.h ****    * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 b
5545:Drivers/CMSIS/Include/arm_math.h ****    * This function can support maximum of table size 2^12.
5546:Drivers/CMSIS/Include/arm_math.h ****    *
5547:Drivers/CMSIS/Include/arm_math.h ****    */
5548:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q15_t arm_linear_interp_q15(
5549:Drivers/CMSIS/Include/arm_math.h ****   q15_t * pYData,
5550:Drivers/CMSIS/Include/arm_math.h ****   q31_t x,
5551:Drivers/CMSIS/Include/arm_math.h ****   uint32_t nValues)
5552:Drivers/CMSIS/Include/arm_math.h ****   {
5553:Drivers/CMSIS/Include/arm_math.h ****     q63_t y;                                     /* output */
5554:Drivers/CMSIS/Include/arm_math.h ****     q15_t y0, y1;                                /* Nearest output values */
5555:Drivers/CMSIS/Include/arm_math.h ****     q31_t fract;                                 /* fractional part */
5556:Drivers/CMSIS/Include/arm_math.h ****     int32_t index;                               /* Index to read nearest output values */
5557:Drivers/CMSIS/Include/arm_math.h **** 
5558:Drivers/CMSIS/Include/arm_math.h ****     /* Input is in 12.20 format */
5559:Drivers/CMSIS/Include/arm_math.h ****     /* 12 bits for the table index */
5560:Drivers/CMSIS/Include/arm_math.h ****     /* Index value calculation */
5561:Drivers/CMSIS/Include/arm_math.h ****     index = ((x & (int32_t)0xFFF00000) >> 20);
5562:Drivers/CMSIS/Include/arm_math.h **** 
5563:Drivers/CMSIS/Include/arm_math.h ****     if(index >= (int32_t)(nValues - 1))
5564:Drivers/CMSIS/Include/arm_math.h ****     {
5565:Drivers/CMSIS/Include/arm_math.h ****       return (pYData[nValues - 1]);
5566:Drivers/CMSIS/Include/arm_math.h ****     }
5567:Drivers/CMSIS/Include/arm_math.h ****     else if(index < 0)
5568:Drivers/CMSIS/Include/arm_math.h ****     {
5569:Drivers/CMSIS/Include/arm_math.h ****       return (pYData[0]);
5570:Drivers/CMSIS/Include/arm_math.h ****     }
5571:Drivers/CMSIS/Include/arm_math.h ****     else
5572:Drivers/CMSIS/Include/arm_math.h ****     {
5573:Drivers/CMSIS/Include/arm_math.h ****       /* 20 bits for the fractional part */
5574:Drivers/CMSIS/Include/arm_math.h ****       /* fract is in 12.20 format */
5575:Drivers/CMSIS/Include/arm_math.h ****       fract = (x & 0x000FFFFF);
5576:Drivers/CMSIS/Include/arm_math.h **** 
5577:Drivers/CMSIS/Include/arm_math.h ****       /* Read two nearest output values from the index */
5578:Drivers/CMSIS/Include/arm_math.h ****       y0 = pYData[index];
5579:Drivers/CMSIS/Include/arm_math.h ****       y1 = pYData[index + 1];
5580:Drivers/CMSIS/Include/arm_math.h **** 
5581:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of y0 * (1-fract) and y is in 13.35 format */
5582:Drivers/CMSIS/Include/arm_math.h ****       y = ((q63_t) y0 * (0xFFFFF - fract));
5583:Drivers/CMSIS/Include/arm_math.h **** 
5584:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of (y0 * (1-fract) + y1 * fract) and y is in 13.35 format */
5585:Drivers/CMSIS/Include/arm_math.h ****       y += ((q63_t) y1 * (fract));
5586:Drivers/CMSIS/Include/arm_math.h **** 
5587:Drivers/CMSIS/Include/arm_math.h ****       /* convert y to 1.15 format */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 122


5588:Drivers/CMSIS/Include/arm_math.h ****       return (q15_t) (y >> 20);
5589:Drivers/CMSIS/Include/arm_math.h ****     }
5590:Drivers/CMSIS/Include/arm_math.h ****   }
5591:Drivers/CMSIS/Include/arm_math.h **** 
5592:Drivers/CMSIS/Include/arm_math.h **** 
5593:Drivers/CMSIS/Include/arm_math.h ****   /**
5594:Drivers/CMSIS/Include/arm_math.h ****    *
5595:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Process function for the Q7 Linear Interpolation Function.
5596:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] pYData   pointer to Q7 Linear Interpolation table
5597:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x        input sample to process
5598:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] nValues  number of table values
5599:Drivers/CMSIS/Include/arm_math.h ****    * @return y processed output sample.
5600:Drivers/CMSIS/Include/arm_math.h ****    *
5601:Drivers/CMSIS/Include/arm_math.h ****    * \par
5602:Drivers/CMSIS/Include/arm_math.h ****    * Input sample <code>x</code> is in 12.20 format which contains 12 bits for table index and 20 b
5603:Drivers/CMSIS/Include/arm_math.h ****    * This function can support maximum of table size 2^12.
5604:Drivers/CMSIS/Include/arm_math.h ****    */
5605:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE q7_t arm_linear_interp_q7(
5606:Drivers/CMSIS/Include/arm_math.h ****   q7_t * pYData,
5607:Drivers/CMSIS/Include/arm_math.h ****   q31_t x,
5608:Drivers/CMSIS/Include/arm_math.h ****   uint32_t nValues)
5609:Drivers/CMSIS/Include/arm_math.h ****   {
5610:Drivers/CMSIS/Include/arm_math.h ****     q31_t y;                                     /* output */
5611:Drivers/CMSIS/Include/arm_math.h ****     q7_t y0, y1;                                 /* Nearest output values */
5612:Drivers/CMSIS/Include/arm_math.h ****     q31_t fract;                                 /* fractional part */
5613:Drivers/CMSIS/Include/arm_math.h ****     uint32_t index;                              /* Index to read nearest output values */
5614:Drivers/CMSIS/Include/arm_math.h **** 
5615:Drivers/CMSIS/Include/arm_math.h ****     /* Input is in 12.20 format */
5616:Drivers/CMSIS/Include/arm_math.h ****     /* 12 bits for the table index */
5617:Drivers/CMSIS/Include/arm_math.h ****     /* Index value calculation */
5618:Drivers/CMSIS/Include/arm_math.h ****     if (x < 0)
5619:Drivers/CMSIS/Include/arm_math.h ****     {
5620:Drivers/CMSIS/Include/arm_math.h ****       return (pYData[0]);
5621:Drivers/CMSIS/Include/arm_math.h ****     }
5622:Drivers/CMSIS/Include/arm_math.h ****     index = (x >> 20) & 0xfff;
5623:Drivers/CMSIS/Include/arm_math.h **** 
5624:Drivers/CMSIS/Include/arm_math.h ****     if(index >= (nValues - 1))
5625:Drivers/CMSIS/Include/arm_math.h ****     {
5626:Drivers/CMSIS/Include/arm_math.h ****       return (pYData[nValues - 1]);
5627:Drivers/CMSIS/Include/arm_math.h ****     }
5628:Drivers/CMSIS/Include/arm_math.h ****     else
5629:Drivers/CMSIS/Include/arm_math.h ****     {
5630:Drivers/CMSIS/Include/arm_math.h ****       /* 20 bits for the fractional part */
5631:Drivers/CMSIS/Include/arm_math.h ****       /* fract is in 12.20 format */
5632:Drivers/CMSIS/Include/arm_math.h ****       fract = (x & 0x000FFFFF);
5633:Drivers/CMSIS/Include/arm_math.h **** 
5634:Drivers/CMSIS/Include/arm_math.h ****       /* Read two nearest output values from the index and are in 1.7(q7) format */
5635:Drivers/CMSIS/Include/arm_math.h ****       y0 = pYData[index];
5636:Drivers/CMSIS/Include/arm_math.h ****       y1 = pYData[index + 1];
5637:Drivers/CMSIS/Include/arm_math.h **** 
5638:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of y0 * (1-fract ) and y is in 13.27(q27) format */
5639:Drivers/CMSIS/Include/arm_math.h ****       y = ((y0 * (0xFFFFF - fract)));
5640:Drivers/CMSIS/Include/arm_math.h **** 
5641:Drivers/CMSIS/Include/arm_math.h ****       /* Calculation of y1 * fract + y0 * (1-fract) and y is in 13.27(q27) format */
5642:Drivers/CMSIS/Include/arm_math.h ****       y += (y1 * fract);
5643:Drivers/CMSIS/Include/arm_math.h **** 
5644:Drivers/CMSIS/Include/arm_math.h ****       /* convert y to 1.7(q7) format */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 123


5645:Drivers/CMSIS/Include/arm_math.h ****       return (q7_t) (y >> 20);
5646:Drivers/CMSIS/Include/arm_math.h ****      }
5647:Drivers/CMSIS/Include/arm_math.h ****   }
5648:Drivers/CMSIS/Include/arm_math.h **** 
5649:Drivers/CMSIS/Include/arm_math.h ****   /**
5650:Drivers/CMSIS/Include/arm_math.h ****    * @} end of LinearInterpolate group
5651:Drivers/CMSIS/Include/arm_math.h ****    */
5652:Drivers/CMSIS/Include/arm_math.h **** 
5653:Drivers/CMSIS/Include/arm_math.h ****   /**
5654:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fast approximation to the trigonometric sine function for floating-point data.
5655:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x  input value in radians.
5656:Drivers/CMSIS/Include/arm_math.h ****    * @return  sin(x).
5657:Drivers/CMSIS/Include/arm_math.h ****    */
5658:Drivers/CMSIS/Include/arm_math.h ****   float32_t arm_sin_f32(
5659:Drivers/CMSIS/Include/arm_math.h ****   float32_t x);
5660:Drivers/CMSIS/Include/arm_math.h **** 
5661:Drivers/CMSIS/Include/arm_math.h **** 
5662:Drivers/CMSIS/Include/arm_math.h ****   /**
5663:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fast approximation to the trigonometric sine function for Q31 data.
5664:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x  Scaled input value in radians.
5665:Drivers/CMSIS/Include/arm_math.h ****    * @return  sin(x).
5666:Drivers/CMSIS/Include/arm_math.h ****    */
5667:Drivers/CMSIS/Include/arm_math.h ****   q31_t arm_sin_q31(
5668:Drivers/CMSIS/Include/arm_math.h ****   q31_t x);
5669:Drivers/CMSIS/Include/arm_math.h **** 
5670:Drivers/CMSIS/Include/arm_math.h **** 
5671:Drivers/CMSIS/Include/arm_math.h ****   /**
5672:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fast approximation to the trigonometric sine function for Q15 data.
5673:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x  Scaled input value in radians.
5674:Drivers/CMSIS/Include/arm_math.h ****    * @return  sin(x).
5675:Drivers/CMSIS/Include/arm_math.h ****    */
5676:Drivers/CMSIS/Include/arm_math.h ****   q15_t arm_sin_q15(
5677:Drivers/CMSIS/Include/arm_math.h ****   q15_t x);
5678:Drivers/CMSIS/Include/arm_math.h **** 
5679:Drivers/CMSIS/Include/arm_math.h **** 
5680:Drivers/CMSIS/Include/arm_math.h ****   /**
5681:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
5682:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x  input value in radians.
5683:Drivers/CMSIS/Include/arm_math.h ****    * @return  cos(x).
5684:Drivers/CMSIS/Include/arm_math.h ****    */
5685:Drivers/CMSIS/Include/arm_math.h ****   float32_t arm_cos_f32(
5686:Drivers/CMSIS/Include/arm_math.h ****   float32_t x);
5687:Drivers/CMSIS/Include/arm_math.h **** 
5688:Drivers/CMSIS/Include/arm_math.h **** 
5689:Drivers/CMSIS/Include/arm_math.h ****   /**
5690:Drivers/CMSIS/Include/arm_math.h ****    * @brief Fast approximation to the trigonometric cosine function for Q31 data.
5691:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x  Scaled input value in radians.
5692:Drivers/CMSIS/Include/arm_math.h ****    * @return  cos(x).
5693:Drivers/CMSIS/Include/arm_math.h ****    */
5694:Drivers/CMSIS/Include/arm_math.h ****   q31_t arm_cos_q31(
5695:Drivers/CMSIS/Include/arm_math.h ****   q31_t x);
5696:Drivers/CMSIS/Include/arm_math.h **** 
5697:Drivers/CMSIS/Include/arm_math.h **** 
5698:Drivers/CMSIS/Include/arm_math.h ****   /**
5699:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Fast approximation to the trigonometric cosine function for Q15 data.
5700:Drivers/CMSIS/Include/arm_math.h ****    * @param[in] x  Scaled input value in radians.
5701:Drivers/CMSIS/Include/arm_math.h ****    * @return  cos(x).
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 124


5702:Drivers/CMSIS/Include/arm_math.h ****    */
5703:Drivers/CMSIS/Include/arm_math.h ****   q15_t arm_cos_q15(
5704:Drivers/CMSIS/Include/arm_math.h ****   q15_t x);
5705:Drivers/CMSIS/Include/arm_math.h **** 
5706:Drivers/CMSIS/Include/arm_math.h **** 
5707:Drivers/CMSIS/Include/arm_math.h ****   /**
5708:Drivers/CMSIS/Include/arm_math.h ****    * @ingroup groupFastMath
5709:Drivers/CMSIS/Include/arm_math.h ****    */
5710:Drivers/CMSIS/Include/arm_math.h **** 
5711:Drivers/CMSIS/Include/arm_math.h **** 
5712:Drivers/CMSIS/Include/arm_math.h ****   /**
5713:Drivers/CMSIS/Include/arm_math.h ****    * @defgroup SQRT Square Root
5714:Drivers/CMSIS/Include/arm_math.h ****    *
5715:Drivers/CMSIS/Include/arm_math.h ****    * Computes the square root of a number.
5716:Drivers/CMSIS/Include/arm_math.h ****    * There are separate functions for Q15, Q31, and floating-point data types.
5717:Drivers/CMSIS/Include/arm_math.h ****    * The square root function is computed using the Newton-Raphson algorithm.
5718:Drivers/CMSIS/Include/arm_math.h ****    * This is an iterative algorithm of the form:
5719:Drivers/CMSIS/Include/arm_math.h ****    * <pre>
5720:Drivers/CMSIS/Include/arm_math.h ****    *      x1 = x0 - f(x0)/f'(x0)
5721:Drivers/CMSIS/Include/arm_math.h ****    * </pre>
5722:Drivers/CMSIS/Include/arm_math.h ****    * where <code>x1</code> is the current estimate,
5723:Drivers/CMSIS/Include/arm_math.h ****    * <code>x0</code> is the previous estimate, and
5724:Drivers/CMSIS/Include/arm_math.h ****    * <code>f'(x0)</code> is the derivative of <code>f()</code> evaluated at <code>x0</code>.
5725:Drivers/CMSIS/Include/arm_math.h ****    * For the square root function, the algorithm reduces to:
5726:Drivers/CMSIS/Include/arm_math.h ****    * <pre>
5727:Drivers/CMSIS/Include/arm_math.h ****    *     x0 = in/2                         [initial guess]
5728:Drivers/CMSIS/Include/arm_math.h ****    *     x1 = 1/2 * ( x0 + in / x0)        [each iteration]
5729:Drivers/CMSIS/Include/arm_math.h ****    * </pre>
5730:Drivers/CMSIS/Include/arm_math.h ****    */
5731:Drivers/CMSIS/Include/arm_math.h **** 
5732:Drivers/CMSIS/Include/arm_math.h **** 
5733:Drivers/CMSIS/Include/arm_math.h ****   /**
5734:Drivers/CMSIS/Include/arm_math.h ****    * @addtogroup SQRT
5735:Drivers/CMSIS/Include/arm_math.h ****    * @{
5736:Drivers/CMSIS/Include/arm_math.h ****    */
5737:Drivers/CMSIS/Include/arm_math.h **** 
5738:Drivers/CMSIS/Include/arm_math.h ****   /**
5739:Drivers/CMSIS/Include/arm_math.h ****    * @brief  Floating-point square root function.
5740:Drivers/CMSIS/Include/arm_math.h ****    * @param[in]  in    input value.
5741:Drivers/CMSIS/Include/arm_math.h ****    * @param[out] pOut  square root of input value.
5742:Drivers/CMSIS/Include/arm_math.h ****    * @return The function returns ARM_MATH_SUCCESS if input value is positive value or ARM_MATH_ARG
5743:Drivers/CMSIS/Include/arm_math.h ****    * <code>in</code> is negative value and returns zero output for negative values.
5744:Drivers/CMSIS/Include/arm_math.h ****    */
5745:Drivers/CMSIS/Include/arm_math.h ****   static __INLINE arm_status arm_sqrt_f32(
5746:Drivers/CMSIS/Include/arm_math.h ****   float32_t in,
5747:Drivers/CMSIS/Include/arm_math.h ****   float32_t * pOut)
5748:Drivers/CMSIS/Include/arm_math.h ****   {
5749:Drivers/CMSIS/Include/arm_math.h ****     if(in >= 0.0f)
 623              		.loc 2 5749 0
 624 00a8 F5EEC07A 		fcmpezs	s15
 625 00ac F1EE10FA 		fmstat
 626 00b0 0DDB     		blt	.L41
5750:Drivers/CMSIS/Include/arm_math.h ****     {
5751:Drivers/CMSIS/Include/arm_math.h **** 
5752:Drivers/CMSIS/Include/arm_math.h **** #if   (__FPU_USED == 1) && defined ( __CC_ARM   )
5753:Drivers/CMSIS/Include/arm_math.h ****       *pOut = __sqrtf(in);
5754:Drivers/CMSIS/Include/arm_math.h **** #elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 125


5755:Drivers/CMSIS/Include/arm_math.h ****       *pOut = __builtin_sqrtf(in);
5756:Drivers/CMSIS/Include/arm_math.h **** #elif (__FPU_USED == 1) && defined(__GNUC__)
5757:Drivers/CMSIS/Include/arm_math.h ****       *pOut = __builtin_sqrtf(in);
 627              		.loc 2 5757 0
 628 00b2 B1EEE70A 		fsqrts	s0, s15
 629              	.LVL59:
 630 00b6 B4EE400A 		fcmps	s0, s0
 631 00ba F1EE10FA 		fmstat
 632 00be 03D0     		beq	.L39
 633 00c0 B0EE670A 		fcpys	s0, s15
 634 00c4 FFF7FEFF 		bl	sqrtf
 635              	.LVL60:
 636              	.L39:
 637 00c8 84ED000A 		fsts	s0, [r4]
 638 00cc 10BD     		pop	{r4, pc}
 639              	.LVL61:
 640              	.L41:
5758:Drivers/CMSIS/Include/arm_math.h **** #elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
5759:Drivers/CMSIS/Include/arm_math.h ****       __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
5760:Drivers/CMSIS/Include/arm_math.h **** #else
5761:Drivers/CMSIS/Include/arm_math.h ****       *pOut = sqrtf(in);
5762:Drivers/CMSIS/Include/arm_math.h **** #endif
5763:Drivers/CMSIS/Include/arm_math.h **** 
5764:Drivers/CMSIS/Include/arm_math.h ****       return (ARM_MATH_SUCCESS);
5765:Drivers/CMSIS/Include/arm_math.h ****     }
5766:Drivers/CMSIS/Include/arm_math.h ****     else
5767:Drivers/CMSIS/Include/arm_math.h ****     {
5768:Drivers/CMSIS/Include/arm_math.h ****       *pOut = 0.0f;
 641              		.loc 2 5768 0
 642 00ce 0023     		movs	r3, #0
 643              	.LVL62:
 644 00d0 2360     		str	r3, [r4]	@ float
 645 00d2 10BD     		pop	{r4, pc}
 646              	.L44:
 647              		.align	2
 648              	.L43:
 649 00d4 00000000 		.word	0
 650              	.LBE5:
 651              	.LBE4:
 652              		.cfi_endproc
 653              	.LFE163:
 655              		.section	.text.arm_max_f32,"ax",%progbits
 656              		.align	2
 657              		.global	arm_max_f32
 658              		.thumb
 659              		.thumb_func
 661              	arm_max_f32:
 662              	.LFB164:
 659:Src/ADCsrc.c  **** 
 660:Src/ADCsrc.c  ****  #else
 661:Src/ADCsrc.c  **** 
 662:Src/ADCsrc.c  ****    /* Run the below code for Cortex-M0 */
 663:Src/ADCsrc.c  **** 
 664:Src/ADCsrc.c  ****    float32_t squareOfSum;                         /* Square of Sum */
 665:Src/ADCsrc.c  ****    float32_t var;                                 /* Temporary varaince storage */
 666:Src/ADCsrc.c  **** 
 667:Src/ADCsrc.c  ****  	if(blockSize == 1)
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 126


 668:Src/ADCsrc.c  ****  	{
 669:Src/ADCsrc.c  ****  		*pResult = 0;
 670:Src/ADCsrc.c  ****  		return;
 671:Src/ADCsrc.c  ****  	}
 672:Src/ADCsrc.c  **** 
 673:Src/ADCsrc.c  ****    /* Loop over blockSize number of values */
 674:Src/ADCsrc.c  ****    blkCnt = blockSize;
 675:Src/ADCsrc.c  **** 
 676:Src/ADCsrc.c  ****    while(blkCnt > 0u)
 677:Src/ADCsrc.c  ****    {
 678:Src/ADCsrc.c  ****      /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
 679:Src/ADCsrc.c  ****      /* Compute Sum of squares of the input samples
 680:Src/ADCsrc.c  ****       * and then store the result in a temporary variable, sumOfSquares. */
 681:Src/ADCsrc.c  ****      in = *pSrc++;
 682:Src/ADCsrc.c  ****      sumOfSquares += in * in;
 683:Src/ADCsrc.c  **** 
 684:Src/ADCsrc.c  ****      /* C = (A[0] + A[1] + ... + A[blockSize-1]) */
 685:Src/ADCsrc.c  ****      /* Compute Sum of the input samples
 686:Src/ADCsrc.c  ****       * and then store the result in a temporary variable, sum. */
 687:Src/ADCsrc.c  ****      sum += in;
 688:Src/ADCsrc.c  **** 
 689:Src/ADCsrc.c  ****      /* Decrement the loop counter */
 690:Src/ADCsrc.c  ****      blkCnt--;
 691:Src/ADCsrc.c  ****    }
 692:Src/ADCsrc.c  **** 
 693:Src/ADCsrc.c  ****    /* Compute the square of sum */
 694:Src/ADCsrc.c  ****    squareOfSum = ((sum * sum) / (float32_t) blockSize);
 695:Src/ADCsrc.c  **** 
 696:Src/ADCsrc.c  ****    /* Compute the variance */
 697:Src/ADCsrc.c  ****    var = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));
 698:Src/ADCsrc.c  **** 
 699:Src/ADCsrc.c  ****    /* Compute standard deviation and then store the result to the destination */
 700:Src/ADCsrc.c  ****    arm_sqrt_f32(var, pResult);
 701:Src/ADCsrc.c  **** 
 702:Src/ADCsrc.c  ****  #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 703:Src/ADCsrc.c  **** 
 704:Src/ADCsrc.c  ****  }
 705:Src/ADCsrc.c  **** 
 706:Src/ADCsrc.c  ****  /**
 707:Src/ADCsrc.c  ****   * @} end of STD group
 708:Src/ADCsrc.c  ****   */
 709:Src/ADCsrc.c  **** 
 710:Src/ADCsrc.c  **** 
 711:Src/ADCsrc.c  ****   /* ----------------------------------------------------------------------
 712:Src/ADCsrc.c  ****   * Copyright (C) 2010-2014 ARM Limited. All rights reserved.
 713:Src/ADCsrc.c  ****   *
 714:Src/ADCsrc.c  ****   * $Date:        19. March 2015
 715:Src/ADCsrc.c  ****   * $Revision: 	V.1.4.5
 716:Src/ADCsrc.c  ****   *
 717:Src/ADCsrc.c  ****   * Project: 	    CMSIS DSP Library
 718:Src/ADCsrc.c  ****   * Title:		arm_max_f32.c
 719:Src/ADCsrc.c  ****   *
 720:Src/ADCsrc.c  ****   * Description:	Maximum value of a floating-point vector.
 721:Src/ADCsrc.c  ****   *
 722:Src/ADCsrc.c  ****   * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
 723:Src/ADCsrc.c  ****   *
 724:Src/ADCsrc.c  ****   * Redistribution and use in source and binary forms, with or without
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 127


 725:Src/ADCsrc.c  ****   * modification, are permitted provided that the following conditions
 726:Src/ADCsrc.c  ****   * are met:
 727:Src/ADCsrc.c  ****   *   - Redistributions of source code must retain the above copyright
 728:Src/ADCsrc.c  ****   *     notice, this list of conditions and the following disclaimer.
 729:Src/ADCsrc.c  ****   *   - Redistributions in binary form must reproduce the above copyright
 730:Src/ADCsrc.c  ****   *     notice, this list of conditions and the following disclaimer in
 731:Src/ADCsrc.c  ****   *     the documentation and/or other materials provided with the
 732:Src/ADCsrc.c  ****   *     distribution.
 733:Src/ADCsrc.c  ****   *   - Neither the name of ARM LIMITED nor the names of its contributors
 734:Src/ADCsrc.c  ****   *     may be used to endorse or promote products derived from this
 735:Src/ADCsrc.c  ****   *     software without specific prior written permission.
 736:Src/ADCsrc.c  ****   *
 737:Src/ADCsrc.c  ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 738:Src/ADCsrc.c  ****   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 739:Src/ADCsrc.c  ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 740:Src/ADCsrc.c  ****   * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 741:Src/ADCsrc.c  ****   * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 742:Src/ADCsrc.c  ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 743:Src/ADCsrc.c  ****   * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 744:Src/ADCsrc.c  ****   * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 745:Src/ADCsrc.c  ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 746:Src/ADCsrc.c  ****   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 747:Src/ADCsrc.c  ****   * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 748:Src/ADCsrc.c  ****   * POSSIBILITY OF SUCH DAMAGE.
 749:Src/ADCsrc.c  ****   * ---------------------------------------------------------------------------- */
 750:Src/ADCsrc.c  **** 
 751:Src/ADCsrc.c  **** 
 752:Src/ADCsrc.c  **** 
 753:Src/ADCsrc.c  ****   /**
 754:Src/ADCsrc.c  ****    * @ingroup groupStats
 755:Src/ADCsrc.c  ****    */
 756:Src/ADCsrc.c  **** 
 757:Src/ADCsrc.c  ****   /**
 758:Src/ADCsrc.c  ****    * @defgroup Max Maximum
 759:Src/ADCsrc.c  ****    *
 760:Src/ADCsrc.c  ****    * Computes the maximum value of an array of data.
 761:Src/ADCsrc.c  ****    * The function returns both the maximum value and its position within the array.
 762:Src/ADCsrc.c  ****    * There are separate functions for floating-point, Q31, Q15, and Q7 data types.
 763:Src/ADCsrc.c  ****    */
 764:Src/ADCsrc.c  **** 
 765:Src/ADCsrc.c  ****   /**
 766:Src/ADCsrc.c  ****    * @addtogroup Max
 767:Src/ADCsrc.c  ****    * @{
 768:Src/ADCsrc.c  ****    */
 769:Src/ADCsrc.c  **** 
 770:Src/ADCsrc.c  **** 
 771:Src/ADCsrc.c  ****   /**
 772:Src/ADCsrc.c  ****    * @brief Maximum value of a floating-point vector.
 773:Src/ADCsrc.c  ****    * @param[in]       *pSrc points to the input vector
 774:Src/ADCsrc.c  ****    * @param[in]       blockSize length of the input vector
 775:Src/ADCsrc.c  ****    * @param[out]      *pResult maximum value returned here
 776:Src/ADCsrc.c  ****    * @param[out]      *pIndex index of maximum value returned here
 777:Src/ADCsrc.c  ****    * @return none.
 778:Src/ADCsrc.c  ****    */
 779:Src/ADCsrc.c  **** 
 780:Src/ADCsrc.c  ****   void arm_max_f32(
 781:Src/ADCsrc.c  ****     float32_t * pSrc,
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 128


 782:Src/ADCsrc.c  ****     uint32_t blockSize,
 783:Src/ADCsrc.c  ****     float32_t * pResult,
 784:Src/ADCsrc.c  ****     uint32_t * pIndex)
 785:Src/ADCsrc.c  ****   {
 663              		.loc 1 785 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              	.LVL63:
 668 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 669              	.LCFI2:
 670              		.cfi_def_cfa_offset 20
 671              		.cfi_offset 4, -20
 672              		.cfi_offset 5, -16
 673              		.cfi_offset 6, -12
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676              	.LVL64:
 786:Src/ADCsrc.c  ****   #ifndef ARM_MATH_CM0_FAMILY
 787:Src/ADCsrc.c  **** 
 788:Src/ADCsrc.c  ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
 789:Src/ADCsrc.c  ****     float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value
 790:Src/ADCsrc.c  ****     uint32_t blkCnt, outIndex, count;              /* loop counter */
 791:Src/ADCsrc.c  **** 
 792:Src/ADCsrc.c  ****     /* Initialise the count value. */
 793:Src/ADCsrc.c  ****     count = 0u;
 794:Src/ADCsrc.c  ****     /* Initialise the index value to zero. */
 795:Src/ADCsrc.c  ****     outIndex = 0u;
 796:Src/ADCsrc.c  ****     /* Load first input value that act as reference value for comparision */
 797:Src/ADCsrc.c  ****     out = *pSrc++;
 677              		.loc 1 797 0
 678 0002 041D     		adds	r4, r0, #4
 679              	.LVL65:
 680 0004 D0ED007A 		flds	s15, [r0]
 681              	.LVL66:
 798:Src/ADCsrc.c  **** 
 799:Src/ADCsrc.c  ****     /* Loop unrolling */
 800:Src/ADCsrc.c  ****     blkCnt = (blockSize - 1u) >> 2u;
 682              		.loc 1 800 0
 683 0008 4D1E     		subs	r5, r1, #1
 684 000a AE08     		lsrs	r6, r5, #2
 685              	.LVL67:
 793:Src/ADCsrc.c  ****     /* Initialise the index value to zero. */
 686              		.loc 1 793 0
 687 000c 0020     		movs	r0, #0
 795:Src/ADCsrc.c  ****     /* Load first input value that act as reference value for comparision */
 688              		.loc 1 795 0
 689 000e 0746     		mov	r7, r0
 801:Src/ADCsrc.c  **** 
 802:Src/ADCsrc.c  ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
 803:Src/ADCsrc.c  ****     while(blkCnt > 0u)
 690              		.loc 1 803 0
 691 0010 2CE0     		b	.L46
 692              	.LVL68:
 693              	.L55:
 804:Src/ADCsrc.c  ****     {
 805:Src/ADCsrc.c  ****       /* Initialize maxVal to the next consecutive values one by one */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 129


 806:Src/ADCsrc.c  ****       maxVal1 = *pSrc++;
 694              		.loc 1 806 0
 695 0012 D4ED006A 		flds	s13, [r4]
 696              	.LVL69:
 807:Src/ADCsrc.c  **** 
 808:Src/ADCsrc.c  ****       maxVal2 = *pSrc++;
 697              		.loc 1 808 0
 698 0016 94ED017A 		flds	s14, [r4, #4]
 699              	.LVL70:
 809:Src/ADCsrc.c  **** 
 810:Src/ADCsrc.c  ****       /* compare for the maximum value */
 811:Src/ADCsrc.c  ****       if(out < maxVal1)
 700              		.loc 1 811 0
 701 001a F4EEE67A 		fcmpes	s15, s13
 702 001e F1EE10FA 		fmstat
 703 0022 02D5     		bpl	.L47
 704              	.LVL71:
 812:Src/ADCsrc.c  ****       {
 813:Src/ADCsrc.c  ****         /* Update the maximum value and its index */
 814:Src/ADCsrc.c  ****         out = maxVal1;
 815:Src/ADCsrc.c  ****         outIndex = count + 1u;
 705              		.loc 1 815 0
 706 0024 471C     		adds	r7, r0, #1
 707              	.LVL72:
 814:Src/ADCsrc.c  ****         outIndex = count + 1u;
 708              		.loc 1 814 0
 709 0026 F0EE667A 		fcpys	s15, s13
 710              	.LVL73:
 711              	.L47:
 816:Src/ADCsrc.c  ****       }
 817:Src/ADCsrc.c  **** 
 818:Src/ADCsrc.c  ****       maxVal1 = *pSrc++;
 712              		.loc 1 818 0
 713 002a D4ED026A 		flds	s13, [r4, #8]
 714              	.LVL74:
 819:Src/ADCsrc.c  **** 
 820:Src/ADCsrc.c  ****       /* compare for the maximum value */
 821:Src/ADCsrc.c  ****       if(out < maxVal2)
 715              		.loc 1 821 0
 716 002e F4EEC77A 		fcmpes	s15, s14
 717 0032 F1EE10FA 		fmstat
 718 0036 02D5     		bpl	.L49
 719              	.LVL75:
 822:Src/ADCsrc.c  ****       {
 823:Src/ADCsrc.c  ****         /* Update the maximum value and its index */
 824:Src/ADCsrc.c  ****         out = maxVal2;
 825:Src/ADCsrc.c  ****         outIndex = count + 2u;
 720              		.loc 1 825 0
 721 0038 871C     		adds	r7, r0, #2
 722              	.LVL76:
 824:Src/ADCsrc.c  ****         outIndex = count + 2u;
 723              		.loc 1 824 0
 724 003a F0EE477A 		fcpys	s15, s14
 725              	.LVL77:
 726              	.L49:
 826:Src/ADCsrc.c  ****       }
 827:Src/ADCsrc.c  **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 130


 828:Src/ADCsrc.c  ****       maxVal2 = *pSrc++;
 727              		.loc 1 828 0
 728 003e 04F1100E 		add	lr, r4, #16
 729              	.LVL78:
 730 0042 94ED037A 		flds	s14, [r4, #12]
 731              	.LVL79:
 829:Src/ADCsrc.c  **** 
 830:Src/ADCsrc.c  ****       /* compare for the maximum value */
 831:Src/ADCsrc.c  ****       if(out < maxVal1)
 732              		.loc 1 831 0
 733 0046 F4EEE67A 		fcmpes	s15, s13
 734 004a F1EE10FA 		fmstat
 735 004e 02D5     		bpl	.L51
 736              	.LVL80:
 832:Src/ADCsrc.c  ****       {
 833:Src/ADCsrc.c  ****         /* Update the maximum value and its index */
 834:Src/ADCsrc.c  ****         out = maxVal1;
 835:Src/ADCsrc.c  ****         outIndex = count + 3u;
 737              		.loc 1 835 0
 738 0050 C71C     		adds	r7, r0, #3
 739              	.LVL81:
 834:Src/ADCsrc.c  ****         outIndex = count + 3u;
 740              		.loc 1 834 0
 741 0052 F0EE667A 		fcpys	s15, s13
 742              	.LVL82:
 743              	.L51:
 836:Src/ADCsrc.c  ****       }
 837:Src/ADCsrc.c  **** 
 838:Src/ADCsrc.c  ****       /* compare for the maximum value */
 839:Src/ADCsrc.c  ****       if(out < maxVal2)
 744              		.loc 1 839 0
 745 0056 F4EEC77A 		fcmpes	s15, s14
 746 005a F1EE10FA 		fmstat
 747 005e 02D5     		bpl	.L53
 748              	.LVL83:
 840:Src/ADCsrc.c  ****       {
 841:Src/ADCsrc.c  ****         /* Update the maximum value and its index */
 842:Src/ADCsrc.c  ****         out = maxVal2;
 843:Src/ADCsrc.c  ****         outIndex = count + 4u;
 749              		.loc 1 843 0
 750 0060 071D     		adds	r7, r0, #4
 751              	.LVL84:
 842:Src/ADCsrc.c  ****         outIndex = count + 4u;
 752              		.loc 1 842 0
 753 0062 F0EE477A 		fcpys	s15, s14
 754              	.LVL85:
 755              	.L53:
 844:Src/ADCsrc.c  ****       }
 845:Src/ADCsrc.c  **** 
 846:Src/ADCsrc.c  ****       count += 4u;
 756              		.loc 1 846 0
 757 0066 0430     		adds	r0, r0, #4
 758              	.LVL86:
 847:Src/ADCsrc.c  **** 
 848:Src/ADCsrc.c  ****       /* Decrement the loop counter */
 849:Src/ADCsrc.c  ****       blkCnt--;
 759              		.loc 1 849 0
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 131


 760 0068 013E     		subs	r6, r6, #1
 761              	.LVL87:
 828:Src/ADCsrc.c  **** 
 762              		.loc 1 828 0
 763 006a 7446     		mov	r4, lr
 764              	.LVL88:
 765              	.L46:
 803:Src/ADCsrc.c  ****     {
 766              		.loc 1 803 0
 767 006c 002E     		cmp	r6, #0
 768 006e D0D1     		bne	.L55
 850:Src/ADCsrc.c  ****     }
 851:Src/ADCsrc.c  **** 
 852:Src/ADCsrc.c  ****     /* if (blockSize - 1u) is not multiple of 4 */
 853:Src/ADCsrc.c  ****     blkCnt = (blockSize - 1u) % 4u;
 769              		.loc 1 853 0
 770 0070 05F00300 		and	r0, r5, #3
 771              	.LVL89:
 854:Src/ADCsrc.c  **** 
 855:Src/ADCsrc.c  ****   #else
 856:Src/ADCsrc.c  **** 
 857:Src/ADCsrc.c  ****     /* Run the below code for Cortex-M0 */
 858:Src/ADCsrc.c  ****     float32_t maxVal1, out;                        /* Temporary variables to store the output value
 859:Src/ADCsrc.c  ****     uint32_t blkCnt, outIndex;                     /* loop counter */
 860:Src/ADCsrc.c  **** 
 861:Src/ADCsrc.c  ****     /* Initialise the index value to zero. */
 862:Src/ADCsrc.c  ****     outIndex = 0u;
 863:Src/ADCsrc.c  ****     /* Load first input value that act as reference value for comparision */
 864:Src/ADCsrc.c  ****     out = *pSrc++;
 865:Src/ADCsrc.c  **** 
 866:Src/ADCsrc.c  ****     blkCnt = (blockSize - 1u);
 867:Src/ADCsrc.c  **** 
 868:Src/ADCsrc.c  ****   #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 869:Src/ADCsrc.c  **** 
 870:Src/ADCsrc.c  ****     while(blkCnt > 0u)
 772              		.loc 1 870 0
 773 0074 0CE0     		b	.L56
 774              	.L59:
 871:Src/ADCsrc.c  ****     {
 872:Src/ADCsrc.c  ****       /* Initialize maxVal to the next consecutive values one by one */
 873:Src/ADCsrc.c  ****       maxVal1 = *pSrc++;
 775              		.loc 1 873 0
 776 0076 251D     		adds	r5, r4, #4
 777              	.LVL90:
 778 0078 94ED007A 		flds	s14, [r4]
 779              	.LVL91:
 874:Src/ADCsrc.c  **** 
 875:Src/ADCsrc.c  ****       /* compare for the maximum value */
 876:Src/ADCsrc.c  ****       if(out < maxVal1)
 780              		.loc 1 876 0
 781 007c F4EEC77A 		fcmpes	s15, s14
 782 0080 F1EE10FA 		fmstat
 783 0084 02D5     		bpl	.L57
 784              	.LVL92:
 877:Src/ADCsrc.c  ****       {
 878:Src/ADCsrc.c  ****         /* Update the maximum value and it's index */
 879:Src/ADCsrc.c  ****         out = maxVal1;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 132


 880:Src/ADCsrc.c  ****         outIndex = blockSize - blkCnt;
 785              		.loc 1 880 0
 786 0086 0F1A     		subs	r7, r1, r0
 787              	.LVL93:
 879:Src/ADCsrc.c  ****         outIndex = blockSize - blkCnt;
 788              		.loc 1 879 0
 789 0088 F0EE477A 		fcpys	s15, s14
 790              	.LVL94:
 791              	.L57:
 881:Src/ADCsrc.c  ****       }
 882:Src/ADCsrc.c  **** 
 883:Src/ADCsrc.c  **** 
 884:Src/ADCsrc.c  ****       /* Decrement the loop counter */
 885:Src/ADCsrc.c  ****       blkCnt--;
 792              		.loc 1 885 0
 793 008c 0138     		subs	r0, r0, #1
 794              	.LVL95:
 873:Src/ADCsrc.c  **** 
 795              		.loc 1 873 0
 796 008e 2C46     		mov	r4, r5
 797              	.LVL96:
 798              	.L56:
 870:Src/ADCsrc.c  ****     {
 799              		.loc 1 870 0
 800 0090 0028     		cmp	r0, #0
 801 0092 F0D1     		bne	.L59
 886:Src/ADCsrc.c  **** 
 887:Src/ADCsrc.c  ****     }
 888:Src/ADCsrc.c  **** 
 889:Src/ADCsrc.c  ****     /* Store the maximum value and it's index into destination pointers */
 890:Src/ADCsrc.c  ****     *pResult = out;
 802              		.loc 1 890 0
 803 0094 C2ED007A 		fsts	s15, [r2]
 891:Src/ADCsrc.c  ****     *pIndex = outIndex;
 804              		.loc 1 891 0
 805 0098 1F60     		str	r7, [r3]
 806 009a F0BD     		pop	{r4, r5, r6, r7, pc}
 807              		.cfi_endproc
 808              	.LFE164:
 810              		.section	.text.arm_correlate_f32,"ax",%progbits
 811              		.align	2
 812              		.global	arm_correlate_f32
 813              		.thumb
 814              		.thumb_func
 816              	arm_correlate_f32:
 817              	.LFB165:
 892:Src/ADCsrc.c  ****   }
 893:Src/ADCsrc.c  **** 
 894:Src/ADCsrc.c  ****   /**
 895:Src/ADCsrc.c  ****    * @} end of Max group
 896:Src/ADCsrc.c  ****    */
 897:Src/ADCsrc.c  **** 
 898:Src/ADCsrc.c  **** 
 899:Src/ADCsrc.c  **** 
 900:Src/ADCsrc.c  **** 
 901:Src/ADCsrc.c  ****    /* ----------------------------------------------------------------------------
 902:Src/ADCsrc.c  ****    * Copyright (C) 2010-2014 ARM Limited. All rights reserved.
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 133


 903:Src/ADCsrc.c  ****    *
 904:Src/ADCsrc.c  ****    * $Date:        19. March 2015
 905:Src/ADCsrc.c  ****    * $Revision: 	V.1.4.5
 906:Src/ADCsrc.c  ****    *
 907:Src/ADCsrc.c  ****    * Project: 	    CMSIS DSP Library
 908:Src/ADCsrc.c  ****    * Title:		arm_correlate_f32.c
 909:Src/ADCsrc.c  ****    *
 910:Src/ADCsrc.c  ****    * Description:	 Correlation of floating-point sequences.
 911:Src/ADCsrc.c  ****    *
 912:Src/ADCsrc.c  ****    * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
 913:Src/ADCsrc.c  ****    *
 914:Src/ADCsrc.c  ****    * Redistribution and use in source and binary forms, with or without
 915:Src/ADCsrc.c  ****    * modification, are permitted provided that the following conditions
 916:Src/ADCsrc.c  ****    * are met:
 917:Src/ADCsrc.c  ****    *   - Redistributions of source code must retain the above copyright
 918:Src/ADCsrc.c  ****    *     notice, this list of conditions and the following disclaimer.
 919:Src/ADCsrc.c  ****    *   - Redistributions in binary form must reproduce the above copyright
 920:Src/ADCsrc.c  ****    *     notice, this list of conditions and the following disclaimer in
 921:Src/ADCsrc.c  ****    *     the documentation and/or other materials provided with the
 922:Src/ADCsrc.c  ****    *     distribution.
 923:Src/ADCsrc.c  ****    *   - Neither the name of ARM LIMITED nor the names of its contributors
 924:Src/ADCsrc.c  ****    *     may be used to endorse or promote products derived from this
 925:Src/ADCsrc.c  ****    *     software without specific prior written permission.
 926:Src/ADCsrc.c  ****    *
 927:Src/ADCsrc.c  ****    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 928:Src/ADCsrc.c  ****    * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 929:Src/ADCsrc.c  ****    * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 930:Src/ADCsrc.c  ****    * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 931:Src/ADCsrc.c  ****    * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 932:Src/ADCsrc.c  ****    * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 933:Src/ADCsrc.c  ****    * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 934:Src/ADCsrc.c  ****    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 935:Src/ADCsrc.c  ****    * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 936:Src/ADCsrc.c  ****    * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 937:Src/ADCsrc.c  ****    * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 938:Src/ADCsrc.c  ****    * POSSIBILITY OF SUCH DAMAGE.
 939:Src/ADCsrc.c  ****    * -------------------------------------------------------------------------- */
 940:Src/ADCsrc.c  **** 
 941:Src/ADCsrc.c  **** 
 942:Src/ADCsrc.c  **** 
 943:Src/ADCsrc.c  ****    /**
 944:Src/ADCsrc.c  ****     * @ingroup groupFilters
 945:Src/ADCsrc.c  ****     */
 946:Src/ADCsrc.c  **** 
 947:Src/ADCsrc.c  ****    /**
 948:Src/ADCsrc.c  ****     * @defgroup Corr Correlation
 949:Src/ADCsrc.c  ****     *
 950:Src/ADCsrc.c  ****     * Correlation is a mathematical operation that is similar to convolution.
 951:Src/ADCsrc.c  ****     * As with convolution, correlation uses two signals to produce a third signal.
 952:Src/ADCsrc.c  ****     * The underlying algorithms in correlation and convolution are identical except that one of the
 953:Src/ADCsrc.c  ****     * Correlation is commonly used to measure the similarity between two signals.
 954:Src/ADCsrc.c  ****     * It has applications in pattern recognition, cryptanalysis, and searching.
 955:Src/ADCsrc.c  ****     * The CMSIS library provides correlation functions for Q7, Q15, Q31 and floating-point data typ
 956:Src/ADCsrc.c  ****     * Fast versions of the Q15 and Q31 functions are also provided.
 957:Src/ADCsrc.c  ****     *
 958:Src/ADCsrc.c  ****     * \par Algorithm
 959:Src/ADCsrc.c  ****     * Let <code>a[n]</code> and <code>b[n]</code> be sequences of length <code>srcALen</code> and <
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 134


 960:Src/ADCsrc.c  ****     * The convolution of the two signals is denoted by
 961:Src/ADCsrc.c  ****     * <pre>
 962:Src/ADCsrc.c  ****     *                   c[n] = a[n] * b[n]
 963:Src/ADCsrc.c  ****     * </pre>
 964:Src/ADCsrc.c  ****     * In correlation, one of the signals is flipped in time
 965:Src/ADCsrc.c  ****     * <pre>
 966:Src/ADCsrc.c  ****     *                   c[n] = a[n] * b[-n]
 967:Src/ADCsrc.c  ****     * </pre>
 968:Src/ADCsrc.c  ****     *
 969:Src/ADCsrc.c  ****     * \par
 970:Src/ADCsrc.c  ****     * and this is mathematically defined as
 971:Src/ADCsrc.c  ****     * \image html CorrelateEquation.gif
 972:Src/ADCsrc.c  ****     * \par
 973:Src/ADCsrc.c  ****     * The <code>pSrcA</code> points to the first input vector of length <code>srcALen</code> and <c
 974:Src/ADCsrc.c  ****     * The result <code>c[n]</code> is of length <code>2 * max(srcALen, srcBLen) - 1</code> and is d
 975:Src/ADCsrc.c  ****     * The output result is written to <code>pDst</code> and the calling function must allocate <cod
 976:Src/ADCsrc.c  ****     *
 977:Src/ADCsrc.c  ****     * <b>Note</b>
 978:Src/ADCsrc.c  ****     * \par
 979:Src/ADCsrc.c  ****     * The <code>pDst</code> should be initialized to all zeros before being used.
 980:Src/ADCsrc.c  ****     *
 981:Src/ADCsrc.c  ****     * <b>Fixed-Point Behavior</b>
 982:Src/ADCsrc.c  ****     * \par
 983:Src/ADCsrc.c  ****     * Correlation requires summing up a large number of intermediate products.
 984:Src/ADCsrc.c  ****     * As such, the Q7, Q15, and Q31 functions run a risk of overflow and saturation.
 985:Src/ADCsrc.c  ****     * Refer to the function specific documentation below for further details of the particular algo
 986:Src/ADCsrc.c  ****     *
 987:Src/ADCsrc.c  ****     *
 988:Src/ADCsrc.c  ****     * <b>Fast Versions</b>
 989:Src/ADCsrc.c  ****     *
 990:Src/ADCsrc.c  ****     * \par
 991:Src/ADCsrc.c  ****     * Fast versions are supported for Q31 and Q15.  Cycles for Fast versions are less compared to Q
 992:Src/ADCsrc.c  ****     * the input signals should be scaled down to avoid intermediate overflows.
 993:Src/ADCsrc.c  ****     *
 994:Src/ADCsrc.c  ****     *
 995:Src/ADCsrc.c  ****     * <b>Opt Versions</b>
 996:Src/ADCsrc.c  ****     *
 997:Src/ADCsrc.c  ****     * \par
 998:Src/ADCsrc.c  ****     * Opt versions are supported for Q15 and Q7.  Design uses internal scratch buffer for getting g
 999:Src/ADCsrc.c  ****     * These versions are optimised in cycles and consumes more memory(Scratch memory) compared to Q
1000:Src/ADCsrc.c  ****     */
1001:Src/ADCsrc.c  **** 
1002:Src/ADCsrc.c  ****    /**
1003:Src/ADCsrc.c  ****     * @addtogroup Corr
1004:Src/ADCsrc.c  ****     * @{
1005:Src/ADCsrc.c  ****     */
1006:Src/ADCsrc.c  ****    /**
1007:Src/ADCsrc.c  ****     * @brief Correlation of floating-point sequences.
1008:Src/ADCsrc.c  ****     * @param[in]  *pSrcA points to the first input sequence.
1009:Src/ADCsrc.c  ****     * @param[in]  srcALen length of the first input sequence.
1010:Src/ADCsrc.c  ****     * @param[in]  *pSrcB points to the second input sequence.
1011:Src/ADCsrc.c  ****     * @param[in]  srcBLen length of the second input sequence.
1012:Src/ADCsrc.c  ****     * @param[out] *pDst points to the location where the output result is written.  Length 2 * max(
1013:Src/ADCsrc.c  ****     * @return none.
1014:Src/ADCsrc.c  ****     */
1015:Src/ADCsrc.c  **** 
1016:Src/ADCsrc.c  ****    void arm_correlate_f32(
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 135


1017:Src/ADCsrc.c  ****      float32_t * pSrcA,
1018:Src/ADCsrc.c  ****      uint32_t srcALen,
1019:Src/ADCsrc.c  ****      float32_t * pSrcB,
1020:Src/ADCsrc.c  ****      uint32_t srcBLen,
1021:Src/ADCsrc.c  ****      float32_t * pDst)
1022:Src/ADCsrc.c  ****    {
 818              		.loc 1 1022 0
 819              		.cfi_startproc
 820              		@ args = 4, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822              	.LVL97:
 823 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 824              	.LCFI3:
 825              		.cfi_def_cfa_offset 36
 826              		.cfi_offset 4, -36
 827              		.cfi_offset 5, -32
 828              		.cfi_offset 6, -28
 829              		.cfi_offset 7, -24
 830              		.cfi_offset 8, -20
 831              		.cfi_offset 9, -16
 832              		.cfi_offset 10, -12
 833              		.cfi_offset 11, -8
 834              		.cfi_offset 14, -4
 835 0004 9E46     		mov	lr, r3
 836 0006 099D     		ldr	r5, [sp, #36]
 837              	.LVL98:
1023:Src/ADCsrc.c  **** 
1024:Src/ADCsrc.c  **** 
1025:Src/ADCsrc.c  ****    #ifndef ARM_MATH_CM0_FAMILY
1026:Src/ADCsrc.c  **** 
1027:Src/ADCsrc.c  ****      /* Run the below code for Cortex-M4 and Cortex-M3 */
1028:Src/ADCsrc.c  **** 
1029:Src/ADCsrc.c  ****      float32_t *pIn1;                               /* inputA pointer */
1030:Src/ADCsrc.c  ****      float32_t *pIn2;                               /* inputB pointer */
1031:Src/ADCsrc.c  ****      float32_t *pOut = pDst;                        /* output pointer */
1032:Src/ADCsrc.c  ****      float32_t *px;                                 /* Intermediate inputA pointer */
1033:Src/ADCsrc.c  ****      float32_t *py;                                 /* Intermediate inputB pointer */
1034:Src/ADCsrc.c  ****      float32_t *pSrc1;                              /* Intermediate pointers */
1035:Src/ADCsrc.c  ****      float32_t sum, acc0, acc1, acc2, acc3;         /* Accumulators */
1036:Src/ADCsrc.c  ****      float32_t x0, x1, x2, x3, c0;                  /* temporary variables for holding input and co
1037:Src/ADCsrc.c  ****      uint32_t j, k = 0u, count, blkCnt, outBlockSize, blockSize1, blockSize2, blockSize3;  /* loop 
1038:Src/ADCsrc.c  ****      int32_t inc = 1;                               /* Destination address modifier */
1039:Src/ADCsrc.c  **** 
1040:Src/ADCsrc.c  **** 
1041:Src/ADCsrc.c  ****      /* The algorithm implementation is based on the lengths of the inputs. */
1042:Src/ADCsrc.c  ****      /* srcB is always made to slide across srcA. */
1043:Src/ADCsrc.c  ****      /* So srcBLen is always considered as shorter or equal to srcALen */
1044:Src/ADCsrc.c  ****      /* But CORR(x, y) is reverse of CORR(y, x) */
1045:Src/ADCsrc.c  ****      /* So, when srcBLen > srcALen, output pointer is made to point to the end of the output buffer
1046:Src/ADCsrc.c  ****      /* and the destination pointer modifier, inc is set to -1 */
1047:Src/ADCsrc.c  ****      /* If srcALen > srcBLen, zero pad has to be done to srcB to make the two inputs of same length
1048:Src/ADCsrc.c  ****      /* But to improve the performance,
1049:Src/ADCsrc.c  ****       * we assume zeroes in the output instead of zero padding either of the the inputs*/
1050:Src/ADCsrc.c  ****      /* If srcALen > srcBLen,
1051:Src/ADCsrc.c  ****       * (srcALen - srcBLen) zeroes has to included in the starting of the output buffer */
1052:Src/ADCsrc.c  ****      /* If srcALen < srcBLen,
1053:Src/ADCsrc.c  ****       * (srcALen - srcBLen) zeroes has to included in the ending of the output buffer */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 136


1054:Src/ADCsrc.c  ****      if(srcALen >= srcBLen)
 838              		.loc 1 1054 0
 839 0008 9942     		cmp	r1, r3
 840 000a 04D3     		bcc	.L67
 841              	.LVL99:
1055:Src/ADCsrc.c  ****      {
1056:Src/ADCsrc.c  ****        /* Initialization of inputA pointer */
1057:Src/ADCsrc.c  ****        pIn1 = pSrcA;
1058:Src/ADCsrc.c  **** 
1059:Src/ADCsrc.c  ****        /* Initialization of inputB pointer */
1060:Src/ADCsrc.c  ****        pIn2 = pSrcB;
1061:Src/ADCsrc.c  **** 
1062:Src/ADCsrc.c  ****        /* Number of output samples is calculated */
1063:Src/ADCsrc.c  ****        outBlockSize = (2u * srcALen) - 1u;
1064:Src/ADCsrc.c  **** 
1065:Src/ADCsrc.c  ****        /* When srcALen > srcBLen, zero padding has to be done to srcB
1066:Src/ADCsrc.c  ****         * to make their lengths equal.
1067:Src/ADCsrc.c  ****         * Instead, (outBlockSize - (srcALen + srcBLen - 1))
1068:Src/ADCsrc.c  ****         * number of output samples are made zero */
1069:Src/ADCsrc.c  ****        j = outBlockSize - (srcALen + (srcBLen - 1u));
 842              		.loc 1 1069 0
 843 000c CB1A     		subs	r3, r1, r3
 844              	.LVL100:
1070:Src/ADCsrc.c  **** 
1071:Src/ADCsrc.c  ****        /* Updating the pointer position to non zero value */
1072:Src/ADCsrc.c  ****        pOut += j;
 845              		.loc 1 1072 0
 846 000e 05EB8305 		add	r5, r5, r3, lsl #2
 847              	.LVL101:
1038:Src/ADCsrc.c  **** 
 848              		.loc 1 1038 0
 849 0012 0127     		movs	r7, #1
 850 0014 0DE0     		b	.L68
 851              	.LVL102:
 852              	.L67:
1073:Src/ADCsrc.c  **** 
1074:Src/ADCsrc.c  ****        //while(j > 0u)
1075:Src/ADCsrc.c  ****        //{
1076:Src/ADCsrc.c  ****        //  /* Zero is stored in the destination buffer */
1077:Src/ADCsrc.c  ****        //  *pOut++ = 0.0f;
1078:Src/ADCsrc.c  **** 
1079:Src/ADCsrc.c  ****        //  /* Decrement the loop counter */
1080:Src/ADCsrc.c  ****        //  j--;
1081:Src/ADCsrc.c  ****        //}
1082:Src/ADCsrc.c  **** 
1083:Src/ADCsrc.c  ****      }
1084:Src/ADCsrc.c  ****      else
1085:Src/ADCsrc.c  ****      {
1086:Src/ADCsrc.c  ****        /* Initialization of inputA pointer */
1087:Src/ADCsrc.c  ****        pIn1 = pSrcB;
1088:Src/ADCsrc.c  **** 
1089:Src/ADCsrc.c  ****        /* Initialization of inputB pointer */
1090:Src/ADCsrc.c  ****        pIn2 = pSrcA;
1091:Src/ADCsrc.c  **** 
1092:Src/ADCsrc.c  ****        /* srcBLen is always considered as shorter or equal to srcALen */
1093:Src/ADCsrc.c  ****        j = srcBLen;
1094:Src/ADCsrc.c  ****        srcBLen = srcALen;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 137


1095:Src/ADCsrc.c  ****        srcALen = j;
1096:Src/ADCsrc.c  **** 
1097:Src/ADCsrc.c  ****        /* CORR(x, y) = Reverse order(CORR(y, x)) */
1098:Src/ADCsrc.c  ****        /* Hence set the destination pointer to point to the last output sample */
1099:Src/ADCsrc.c  ****        pOut = pDst + ((srcALen + srcBLen) - 2u);
 853              		.loc 1 1099 0
 854 0016 CB18     		adds	r3, r1, r3
 855              	.LVL103:
 856 0018 03F18043 		add	r3, r3, #1073741824
 857 001c 023B     		subs	r3, r3, #2
 858 001e 05EB8305 		add	r5, r5, r3, lsl #2
 859              	.LVL104:
 860 0022 0346     		mov	r3, r0
1087:Src/ADCsrc.c  **** 
 861              		.loc 1 1087 0
 862 0024 1046     		mov	r0, r2
 863              	.LVL105:
1090:Src/ADCsrc.c  **** 
 864              		.loc 1 1090 0
 865 0026 1A46     		mov	r2, r3
 866              	.LVL106:
 867              		.loc 1 1099 0
 868 0028 0B46     		mov	r3, r1
 869              	.LVL107:
1095:Src/ADCsrc.c  **** 
 870              		.loc 1 1095 0
 871 002a 7146     		mov	r1, lr
 872              	.LVL108:
1094:Src/ADCsrc.c  ****        srcALen = j;
 873              		.loc 1 1094 0
 874 002c 9E46     		mov	lr, r3
 875              	.LVL109:
1100:Src/ADCsrc.c  **** 
1101:Src/ADCsrc.c  ****        /* Destination address modifier is set to -1 */
1102:Src/ADCsrc.c  ****        inc = -1;
 876              		.loc 1 1102 0
 877 002e 4FF0FF37 		mov	r7, #-1
 878              	.LVL110:
 879              	.L68:
1103:Src/ADCsrc.c  **** 
1104:Src/ADCsrc.c  ****      }
1105:Src/ADCsrc.c  **** 
1106:Src/ADCsrc.c  ****      /* The function is internally
1107:Src/ADCsrc.c  ****       * divided into three parts according to the number of multiplications that has to be
1108:Src/ADCsrc.c  ****       * taken place between inputA samples and inputB samples. In the first part of the
1109:Src/ADCsrc.c  ****       * algorithm, the multiplications increase by one for every iteration.
1110:Src/ADCsrc.c  ****       * In the second part of the algorithm, srcBLen number of multiplications are done.
1111:Src/ADCsrc.c  ****       * In the third part of the algorithm, the multiplications decrease by one
1112:Src/ADCsrc.c  ****       * for every iteration.*/
1113:Src/ADCsrc.c  ****      /* The algorithm is implemented in three stages.
1114:Src/ADCsrc.c  ****       * The loop counters of each stage is initiated here. */
1115:Src/ADCsrc.c  ****      blockSize1 = srcBLen - 1u;
 880              		.loc 1 1115 0
 881 0032 0EF1FF36 		add	r6, lr, #-1
 882              	.LVL111:
1116:Src/ADCsrc.c  ****      blockSize2 = srcALen - (srcBLen - 1u);
 883              		.loc 1 1116 0
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 138


 884 0036 CEEB0101 		rsb	r1, lr, r1
 885              	.LVL112:
 886 003a 01F1010C 		add	ip, r1, #1
 887              	.LVL113:
1117:Src/ADCsrc.c  ****      blockSize3 = blockSize1;
1118:Src/ADCsrc.c  **** 
1119:Src/ADCsrc.c  ****      /* --------------------------
1120:Src/ADCsrc.c  ****       * Initializations of stage1
1121:Src/ADCsrc.c  ****       * -------------------------*/
1122:Src/ADCsrc.c  **** 
1123:Src/ADCsrc.c  ****      /* sum = x[0] * y[srcBlen - 1]
1124:Src/ADCsrc.c  ****       * sum = x[0] * y[srcBlen-2] + x[1] * y[srcBlen - 1]
1125:Src/ADCsrc.c  ****       * ....
1126:Src/ADCsrc.c  ****       * sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen - 1] * y[srcBLen - 1]
1127:Src/ADCsrc.c  ****       */
1128:Src/ADCsrc.c  **** 
1129:Src/ADCsrc.c  ****      /* In this stage the MAC operations are increased by 1 for every iteration.
1130:Src/ADCsrc.c  ****         The count variable holds the number of MAC operations performed */
1131:Src/ADCsrc.c  ****      count = 1u;
1132:Src/ADCsrc.c  **** 
1133:Src/ADCsrc.c  ****      /* Working pointer of inputA */
1134:Src/ADCsrc.c  ****      px = pIn1;
1135:Src/ADCsrc.c  **** 
1136:Src/ADCsrc.c  ****      /* Working pointer of inputB */
1137:Src/ADCsrc.c  ****      pSrc1 = pIn2 + (srcBLen - 1u);
 888              		.loc 1 1137 0
 889 003e 0EF1804A 		add	r10, lr, #1073741824
 890 0042 0AF1FF3A 		add	r10, r10, #-1
 891 0046 02EB8A0A 		add	r10, r2, r10, lsl #2
 892              	.LVL114:
1115:Src/ADCsrc.c  ****      blockSize2 = srcALen - (srcBLen - 1u);
 893              		.loc 1 1115 0
 894 004a B146     		mov	r9, r6
1138:Src/ADCsrc.c  ****      py = pSrc1;
 895              		.loc 1 1138 0
 896 004c 5146     		mov	r1, r10
1131:Src/ADCsrc.c  **** 
 897              		.loc 1 1131 0
 898 004e 4FF00108 		mov	r8, #1
1139:Src/ADCsrc.c  **** 
1140:Src/ADCsrc.c  ****      /* ------------------------
1141:Src/ADCsrc.c  ****       * Stage1 process
1142:Src/ADCsrc.c  ****       * ----------------------*/
1143:Src/ADCsrc.c  **** 
1144:Src/ADCsrc.c  ****      /* The first stage starts here */
1145:Src/ADCsrc.c  ****      while(blockSize1 > 0u)
 899              		.loc 1 1145 0
 900 0052 44E0     		b	.L69
 901              	.LVL115:
 902              	.L74:
1146:Src/ADCsrc.c  ****      {
1147:Src/ADCsrc.c  ****        /* Accumulator is made zero for every iteration */
1148:Src/ADCsrc.c  ****        sum = 0.0f;
1149:Src/ADCsrc.c  **** 
1150:Src/ADCsrc.c  ****        /* Apply loop unrolling and compute 4 MACs simultaneously. */
1151:Src/ADCsrc.c  ****        k = count >> 2u;
 903              		.loc 1 1151 0
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 139


 904 0054 4FEA9803 		lsr	r3, r8, #2
 905              	.LVL116:
1152:Src/ADCsrc.c  **** 
1153:Src/ADCsrc.c  ****        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1154:Src/ADCsrc.c  ****         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1155:Src/ADCsrc.c  ****        while(k > 0u)
 906              		.loc 1 1155 0
 907 0058 0446     		mov	r4, r0
1148:Src/ADCsrc.c  **** 
 908              		.loc 1 1148 0
 909 005a DFEDD67A 		flds	s15, .L99
 910              		.loc 1 1155 0
 911 005e 22E0     		b	.L70
 912              	.LVL117:
 913              	.L71:
1156:Src/ADCsrc.c  ****        {
1157:Src/ADCsrc.c  ****          /* x[0] * y[srcBLen - 4] */
1158:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 914              		.loc 1 1158 0
 915 0060 94ED007A 		flds	s14, [r4]
 916              	.LVL118:
 917 0064 D1ED006A 		flds	s13, [r1]
 918 0068 67EE266A 		fmuls	s13, s14, s13
 919 006c 76EEA77A 		fadds	s15, s13, s15
 920              	.LVL119:
1159:Src/ADCsrc.c  ****          /* x[1] * y[srcBLen - 3] */
1160:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 921              		.loc 1 1160 0
 922 0070 94ED017A 		flds	s14, [r4, #4]
 923              	.LVL120:
 924 0074 D1ED016A 		flds	s13, [r1, #4]
 925 0078 67EE266A 		fmuls	s13, s14, s13
 926 007c 76EEA77A 		fadds	s15, s13, s15
 927              	.LVL121:
1161:Src/ADCsrc.c  ****          /* x[2] * y[srcBLen - 2] */
1162:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 928              		.loc 1 1162 0
 929 0080 94ED027A 		flds	s14, [r4, #8]
 930              	.LVL122:
 931 0084 D1ED026A 		flds	s13, [r1, #8]
 932 0088 27EE267A 		fmuls	s14, s14, s13
 933 008c 77EE276A 		fadds	s13, s14, s15
 934              	.LVL123:
1163:Src/ADCsrc.c  ****          /* x[3] * y[srcBLen - 1] */
1164:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 935              		.loc 1 1164 0
 936 0090 94ED037A 		flds	s14, [r4, #12]
 937              	.LVL124:
 938 0094 D1ED037A 		flds	s15, [r1, #12]
 939 0098 27EE277A 		fmuls	s14, s14, s15
 940 009c 77EE267A 		fadds	s15, s14, s13
 941              	.LVL125:
1165:Src/ADCsrc.c  **** 
1166:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1167:Src/ADCsrc.c  ****          k--;
 942              		.loc 1 1167 0
 943 00a0 013B     		subs	r3, r3, #1
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 140


 944              	.LVL126:
1164:Src/ADCsrc.c  **** 
 945              		.loc 1 1164 0
 946 00a2 1031     		adds	r1, r1, #16
 947              	.LVL127:
 948 00a4 1034     		adds	r4, r4, #16
 949              	.LVL128:
 950              	.L70:
1155:Src/ADCsrc.c  ****        {
 951              		.loc 1 1155 0
 952 00a6 002B     		cmp	r3, #0
 953 00a8 DAD1     		bne	.L71
1168:Src/ADCsrc.c  ****        }
1169:Src/ADCsrc.c  **** 
1170:Src/ADCsrc.c  ****        /* If the count is not a multiple of 4, compute any remaining MACs here.
1171:Src/ADCsrc.c  ****         ** No loop unrolling is used. */
1172:Src/ADCsrc.c  ****        k = count % 0x4u;
 954              		.loc 1 1172 0
 955 00aa 08F00303 		and	r3, r8, #3
 956              	.LVL129:
1173:Src/ADCsrc.c  **** 
1174:Src/ADCsrc.c  ****        while(k > 0u)
 957              		.loc 1 1174 0
 958 00ae 0AE0     		b	.L72
 959              	.L73:
 960              	.LVL130:
1175:Src/ADCsrc.c  ****        {
1176:Src/ADCsrc.c  ****          /* Perform the multiply-accumulate */
1177:Src/ADCsrc.c  ****          /* x[0] * y[srcBLen - 1] */
1178:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 961              		.loc 1 1178 0
 962 00b0 94ED007A 		flds	s14, [r4]
 963              	.LVL131:
 964 00b4 D1ED006A 		flds	s13, [r1]
 965 00b8 27EE267A 		fmuls	s14, s14, s13
 966 00bc 77EE877A 		fadds	s15, s15, s14
 967              	.LVL132:
1179:Src/ADCsrc.c  **** 
1180:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1181:Src/ADCsrc.c  ****          k--;
 968              		.loc 1 1181 0
 969 00c0 013B     		subs	r3, r3, #1
 970              	.LVL133:
1178:Src/ADCsrc.c  **** 
 971              		.loc 1 1178 0
 972 00c2 0431     		adds	r1, r1, #4
 973              	.LVL134:
 974 00c4 0434     		adds	r4, r4, #4
 975              	.LVL135:
 976              	.L72:
1174:Src/ADCsrc.c  ****        {
 977              		.loc 1 1174 0
 978 00c6 002B     		cmp	r3, #0
 979 00c8 F2D1     		bne	.L73
1182:Src/ADCsrc.c  ****        }
1183:Src/ADCsrc.c  **** 
1184:Src/ADCsrc.c  ****        /* Store the result in the accumulator in the destination buffer. */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 141


1185:Src/ADCsrc.c  ****        *pOut = sum;
 980              		.loc 1 1185 0
 981 00ca C5ED007A 		fsts	s15, [r5]
1186:Src/ADCsrc.c  ****        /* Destination pointer is updated according to the address modifier, inc */
1187:Src/ADCsrc.c  ****        pOut += inc;
 982              		.loc 1 1187 0
 983 00ce 05EB8705 		add	r5, r5, r7, lsl #2
 984              	.LVL136:
1188:Src/ADCsrc.c  **** 
1189:Src/ADCsrc.c  ****        /* Update the inputA and inputB pointers for next MAC calculation */
1190:Src/ADCsrc.c  ****        py = pSrc1 - count;
 985              		.loc 1 1190 0
 986 00d2 AAEB8801 		sub	r1, r10, r8, lsl #2
 987              	.LVL137:
1191:Src/ADCsrc.c  ****        px = pIn1;
1192:Src/ADCsrc.c  **** 
1193:Src/ADCsrc.c  ****        /* Increment the MAC count */
1194:Src/ADCsrc.c  ****        count++;
 988              		.loc 1 1194 0
 989 00d6 08F10108 		add	r8, r8, #1
 990              	.LVL138:
1195:Src/ADCsrc.c  **** 
1196:Src/ADCsrc.c  ****        /* Decrement the loop counter */
1197:Src/ADCsrc.c  ****        blockSize1--;
 991              		.loc 1 1197 0
 992 00da 09F1FF39 		add	r9, r9, #-1
 993              	.LVL139:
 994              	.L69:
1145:Src/ADCsrc.c  ****      {
 995              		.loc 1 1145 0
 996 00de B9F1000F 		cmp	r9, #0
 997 00e2 B7D1     		bne	.L74
 998              	.LVL140:
1198:Src/ADCsrc.c  ****      }
1199:Src/ADCsrc.c  **** 
1200:Src/ADCsrc.c  ****      /* --------------------------
1201:Src/ADCsrc.c  ****       * Initializations of stage2
1202:Src/ADCsrc.c  ****       * ------------------------*/
1203:Src/ADCsrc.c  **** 
1204:Src/ADCsrc.c  ****      /* sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen-1] * y[srcBLen-1]
1205:Src/ADCsrc.c  ****       * sum = x[1] * y[0] + x[2] * y[1] +...+ x[srcBLen] * y[srcBLen-1]
1206:Src/ADCsrc.c  ****       * ....
1207:Src/ADCsrc.c  ****       * sum = x[srcALen-srcBLen-2] * y[0] + x[srcALen-srcBLen-1] * y[1] +...+ x[srcALen-1] * y[srcB
1208:Src/ADCsrc.c  ****       */
1209:Src/ADCsrc.c  **** 
1210:Src/ADCsrc.c  ****      /* Working pointer of inputA */
1211:Src/ADCsrc.c  ****      px = pIn1;
1212:Src/ADCsrc.c  **** 
1213:Src/ADCsrc.c  ****      /* Working pointer of inputB */
1214:Src/ADCsrc.c  ****      py = pIn2;
1215:Src/ADCsrc.c  **** 
1216:Src/ADCsrc.c  ****      /* count is index by which the pointer pIn1 to be incremented */
1217:Src/ADCsrc.c  ****      count = 0u;
1218:Src/ADCsrc.c  **** 
1219:Src/ADCsrc.c  ****      /* -------------------
1220:Src/ADCsrc.c  ****       * Stage2 process
1221:Src/ADCsrc.c  ****       * ------------------*/
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 142


1222:Src/ADCsrc.c  **** 
1223:Src/ADCsrc.c  ****      /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
1224:Src/ADCsrc.c  ****       * So, to loop unroll over blockSize2,
1225:Src/ADCsrc.c  ****       * srcBLen should be greater than or equal to 4, to loop unroll the srcBLen loop */
1226:Src/ADCsrc.c  ****      if(srcBLen >= 4u)
 999              		.loc 1 1226 0
 1000 00e4 BEF1030F 		cmp	lr, #3
 1001 00e8 02D8     		bhi	.L75
 1002 00ea E046     		mov	r8, ip
 1003 00ec 0146     		mov	r1, r0
 1004 00ee 13E1     		b	.L76
 1005              	.L75:
1227:Src/ADCsrc.c  ****      {
1228:Src/ADCsrc.c  ****        /* Loop unroll over blockSize2, by 4 */
1229:Src/ADCsrc.c  ****        blkCnt = blockSize2 >> 2u;
 1006              		.loc 1 1229 0
 1007 00f0 4FEA9C0A 		lsr	r10, ip, #2
 1008              	.LVL141:
1211:Src/ADCsrc.c  **** 
 1009              		.loc 1 1211 0
 1010 00f4 0146     		mov	r1, r0
1217:Src/ADCsrc.c  **** 
 1011              		.loc 1 1217 0
 1012 00f6 4FF00009 		mov	r9, #0
 1013              	.LVL142:
1230:Src/ADCsrc.c  **** 
1231:Src/ADCsrc.c  ****        while(blkCnt > 0u)
 1014              		.loc 1 1231 0
 1015 00fa A1E0     		b	.L77
 1016              	.LVL143:
 1017              	.L81:
1232:Src/ADCsrc.c  ****        {
1233:Src/ADCsrc.c  ****          /* Set all accumulators to zero */
1234:Src/ADCsrc.c  ****          acc0 = 0.0f;
1235:Src/ADCsrc.c  ****          acc1 = 0.0f;
1236:Src/ADCsrc.c  ****          acc2 = 0.0f;
1237:Src/ADCsrc.c  ****          acc3 = 0.0f;
1238:Src/ADCsrc.c  **** 
1239:Src/ADCsrc.c  ****          /* read x[0], x[1], x[2] samples */
1240:Src/ADCsrc.c  ****          x0 = *(px++);
 1018              		.loc 1 1240 0
 1019 00fc 91ED006A 		flds	s12, [r1]
 1020              	.LVL144:
1241:Src/ADCsrc.c  ****          x1 = *(px++);
 1021              		.loc 1 1241 0
 1022 0100 D1ED014A 		flds	s9, [r1, #4]
 1023              	.LVL145:
1242:Src/ADCsrc.c  ****          x2 = *(px++);
 1024              		.loc 1 1242 0
 1025 0104 01F10C04 		add	r4, r1, #12
 1026              	.LVL146:
 1027 0108 91ED025A 		flds	s10, [r1, #8]
 1028              	.LVL147:
1243:Src/ADCsrc.c  **** 
1244:Src/ADCsrc.c  ****          /* Apply loop unrolling and compute 4 MACs simultaneously. */
1245:Src/ADCsrc.c  ****          k = srcBLen >> 2u;
 1029              		.loc 1 1245 0
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 143


 1030 010c 4FEA9E0B 		lsr	fp, lr, #2
 1031              	.LVL148:
 1032 0110 1146     		mov	r1, r2
1237:Src/ADCsrc.c  **** 
 1033              		.loc 1 1237 0
 1034 0112 DFEDA87A 		flds	s15, .L99
1236:Src/ADCsrc.c  ****          acc3 = 0.0f;
 1035              		.loc 1 1236 0
 1036 0116 F0EE673A 		fcpys	s7, s15
1235:Src/ADCsrc.c  ****          acc2 = 0.0f;
 1037              		.loc 1 1235 0
 1038 011a B0EE673A 		fcpys	s6, s15
1234:Src/ADCsrc.c  ****          acc1 = 0.0f;
 1039              		.loc 1 1234 0
 1040 011e F0EE676A 		fcpys	s13, s15
 1041              	.LVL149:
 1042              	.L78:
1246:Src/ADCsrc.c  **** 
1247:Src/ADCsrc.c  ****          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1248:Src/ADCsrc.c  ****           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1249:Src/ADCsrc.c  ****          do
1250:Src/ADCsrc.c  ****          {
1251:Src/ADCsrc.c  ****            /* Read y[0] sample */
1252:Src/ADCsrc.c  ****            c0 = *(py++);
 1043              		.loc 1 1252 0 discriminator 1
 1044 0122 91ED007A 		flds	s14, [r1]
 1045              	.LVL150:
1253:Src/ADCsrc.c  **** 
1254:Src/ADCsrc.c  ****            /* Read x[3] sample */
1255:Src/ADCsrc.c  ****            x3 = *(px++);
 1046              		.loc 1 1255 0 discriminator 1
 1047 0126 94ED004A 		flds	s8, [r4]
 1048              	.LVL151:
1256:Src/ADCsrc.c  **** 
1257:Src/ADCsrc.c  ****            /* Perform the multiply-accumulate */
1258:Src/ADCsrc.c  ****            /* acc0 +=  x[0] * y[0] */
1259:Src/ADCsrc.c  ****            acc0 += x0 * c0;
 1049              		.loc 1 1259 0 discriminator 1
 1050 012a 66EE075A 		fmuls	s11, s12, s14
 1051 012e 75EEA65A 		fadds	s11, s11, s13
 1052              	.LVL152:
1260:Src/ADCsrc.c  ****            /* acc1 +=  x[1] * y[0] */
1261:Src/ADCsrc.c  ****            acc1 += x1 * c0;
 1053              		.loc 1 1261 0 discriminator 1
 1054 0132 64EE872A 		fmuls	s5, s9, s14
 1055 0136 32EE833A 		fadds	s6, s5, s6
 1056              	.LVL153:
1262:Src/ADCsrc.c  ****            /* acc2 +=  x[2] * y[0] */
1263:Src/ADCsrc.c  ****            acc2 += x2 * c0;
 1057              		.loc 1 1263 0 discriminator 1
 1058 013a 65EE072A 		fmuls	s5, s10, s14
 1059 013e 72EEA33A 		fadds	s7, s5, s7
 1060              	.LVL154:
1264:Src/ADCsrc.c  ****            /* acc3 +=  x[3] * y[0] */
1265:Src/ADCsrc.c  ****            acc3 += x3 * c0;
 1061              		.loc 1 1265 0 discriminator 1
 1062 0142 24EE077A 		fmuls	s14, s8, s14
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 144


 1063              	.LVL155:
 1064 0146 77EE277A 		fadds	s15, s14, s15
 1065              	.LVL156:
1266:Src/ADCsrc.c  **** 
1267:Src/ADCsrc.c  ****            /* Read y[1] sample */
1268:Src/ADCsrc.c  ****            c0 = *(py++);
 1066              		.loc 1 1268 0 discriminator 1
 1067 014a D1ED016A 		flds	s13, [r1, #4]
 1068              	.LVL157:
1269:Src/ADCsrc.c  **** 
1270:Src/ADCsrc.c  ****            /* Read x[4] sample */
1271:Src/ADCsrc.c  ****            x0 = *(px++);
 1069              		.loc 1 1271 0 discriminator 1
 1070 014e 94ED016A 		flds	s12, [r4, #4]
 1071              	.LVL158:
1272:Src/ADCsrc.c  **** 
1273:Src/ADCsrc.c  ****            /* Perform the multiply-accumulate */
1274:Src/ADCsrc.c  ****            /* acc0 +=  x[1] * y[1] */
1275:Src/ADCsrc.c  ****            acc0 += x1 * c0;
 1072              		.loc 1 1275 0 discriminator 1
 1073 0152 64EEA64A 		fmuls	s9, s9, s13
 1074              	.LVL159:
 1075 0156 74EEA55A 		fadds	s11, s9, s11
 1076              	.LVL160:
1276:Src/ADCsrc.c  ****            /* acc1 +=  x[2] * y[1] */
1277:Src/ADCsrc.c  ****            acc1 += x2 * c0;
 1077              		.loc 1 1277 0 discriminator 1
 1078 015a 25EE267A 		fmuls	s14, s10, s13
 1079 015e 37EE033A 		fadds	s6, s14, s6
 1080              	.LVL161:
1278:Src/ADCsrc.c  ****            /* acc2 +=  x[3] * y[1] */
1279:Src/ADCsrc.c  ****            acc2 += x3 * c0;
 1081              		.loc 1 1279 0 discriminator 1
 1082 0162 24EE267A 		fmuls	s14, s8, s13
 1083 0166 77EE233A 		fadds	s7, s14, s7
 1084              	.LVL162:
1280:Src/ADCsrc.c  ****            /* acc3 +=  x[4] * y[1] */
1281:Src/ADCsrc.c  ****            acc3 += x0 * c0;
 1085              		.loc 1 1281 0 discriminator 1
 1086 016a 66EE266A 		fmuls	s13, s12, s13
 1087              	.LVL163:
 1088 016e 76EEA77A 		fadds	s15, s13, s15
 1089              	.LVL164:
1282:Src/ADCsrc.c  **** 
1283:Src/ADCsrc.c  ****            /* Read y[2] sample */
1284:Src/ADCsrc.c  ****            c0 = *(py++);
 1090              		.loc 1 1284 0 discriminator 1
 1091 0172 91ED027A 		flds	s14, [r1, #8]
 1092              	.LVL165:
1285:Src/ADCsrc.c  **** 
1286:Src/ADCsrc.c  ****            /* Read x[5] sample */
1287:Src/ADCsrc.c  ****            x1 = *(px++);
 1093              		.loc 1 1287 0 discriminator 1
 1094 0176 D4ED024A 		flds	s9, [r4, #8]
 1095              	.LVL166:
1288:Src/ADCsrc.c  **** 
1289:Src/ADCsrc.c  ****            /* Perform the multiply-accumulates */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 145


1290:Src/ADCsrc.c  ****            /* acc0 +=  x[2] * y[2] */
1291:Src/ADCsrc.c  ****            acc0 += x2 * c0;
 1096              		.loc 1 1291 0 discriminator 1
 1097 017a 25EE075A 		fmuls	s10, s10, s14
 1098              	.LVL167:
 1099 017e 75EE255A 		fadds	s11, s10, s11
 1100              	.LVL168:
1292:Src/ADCsrc.c  ****            /* acc1 +=  x[3] * y[2] */
1293:Src/ADCsrc.c  ****            acc1 += x3 * c0;
 1101              		.loc 1 1293 0 discriminator 1
 1102 0182 64EE076A 		fmuls	s13, s8, s14
 1103 0186 36EE833A 		fadds	s6, s13, s6
 1104              	.LVL169:
1294:Src/ADCsrc.c  ****            /* acc2 +=  x[4] * y[2] */
1295:Src/ADCsrc.c  ****            acc2 += x0 * c0;
 1105              		.loc 1 1295 0 discriminator 1
 1106 018a 66EE076A 		fmuls	s13, s12, s14
 1107 018e 76EEA33A 		fadds	s7, s13, s7
 1108              	.LVL170:
1296:Src/ADCsrc.c  ****            /* acc3 +=  x[5] * y[2] */
1297:Src/ADCsrc.c  ****            acc3 += x1 * c0;
 1109              		.loc 1 1297 0 discriminator 1
 1110 0192 24EE877A 		fmuls	s14, s9, s14
 1111              	.LVL171:
 1112 0196 37EE277A 		fadds	s14, s14, s15
 1113              	.LVL172:
1298:Src/ADCsrc.c  **** 
1299:Src/ADCsrc.c  ****            /* Read y[3] sample */
1300:Src/ADCsrc.c  ****            c0 = *(py++);
 1114              		.loc 1 1300 0 discriminator 1
 1115 019a 01F11008 		add	r8, r1, #16
 1116              	.LVL173:
 1117 019e D1ED037A 		flds	s15, [r1, #12]
 1118              	.LVL174:
1301:Src/ADCsrc.c  **** 
1302:Src/ADCsrc.c  ****            /* Read x[6] sample */
1303:Src/ADCsrc.c  ****            x2 = *(px++);
 1119              		.loc 1 1303 0 discriminator 1
 1120 01a2 04F11003 		add	r3, r4, #16
 1121              	.LVL175:
 1122 01a6 94ED035A 		flds	s10, [r4, #12]
 1123              	.LVL176:
1304:Src/ADCsrc.c  **** 
1305:Src/ADCsrc.c  ****            /* Perform the multiply-accumulates */
1306:Src/ADCsrc.c  ****            /* acc0 +=  x[3] * y[3] */
1307:Src/ADCsrc.c  ****            acc0 += x3 * c0;
 1124              		.loc 1 1307 0 discriminator 1
 1125 01aa 64EE276A 		fmuls	s13, s8, s15
 1126 01ae 76EEA56A 		fadds	s13, s13, s11
 1127              	.LVL177:
1308:Src/ADCsrc.c  ****            /* acc1 +=  x[4] * y[3] */
1309:Src/ADCsrc.c  ****            acc1 += x0 * c0;
 1128              		.loc 1 1309 0 discriminator 1
 1129 01b2 66EE275A 		fmuls	s11, s12, s15
 1130 01b6 35EE833A 		fadds	s6, s11, s6
 1131              	.LVL178:
1310:Src/ADCsrc.c  ****            /* acc2 +=  x[5] * y[3] */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 146


1311:Src/ADCsrc.c  ****            acc2 += x1 * c0;
 1132              		.loc 1 1311 0 discriminator 1
 1133 01ba 64EEA75A 		fmuls	s11, s9, s15
 1134 01be 75EEA33A 		fadds	s7, s11, s7
 1135              	.LVL179:
1312:Src/ADCsrc.c  ****            /* acc3 +=  x[6] * y[3] */
1313:Src/ADCsrc.c  ****            acc3 += x2 * c0;
 1136              		.loc 1 1313 0 discriminator 1
 1137 01c2 65EE277A 		fmuls	s15, s10, s15
 1138              	.LVL180:
 1139 01c6 77EE877A 		fadds	s15, s15, s14
 1140              	.LVL181:
1303:Src/ADCsrc.c  **** 
 1141              		.loc 1 1303 0 discriminator 1
 1142 01ca 1C46     		mov	r4, r3
1300:Src/ADCsrc.c  **** 
 1143              		.loc 1 1300 0 discriminator 1
 1144 01cc 4146     		mov	r1, r8
 1145              	.LVL182:
1314:Src/ADCsrc.c  **** 
1315:Src/ADCsrc.c  **** 
1316:Src/ADCsrc.c  ****          } while(--k);
 1146              		.loc 1 1316 0 discriminator 1
 1147 01ce BBF1010B 		subs	fp, fp, #1
 1148              	.LVL183:
 1149 01d2 A6D1     		bne	.L78
1317:Src/ADCsrc.c  **** 
1318:Src/ADCsrc.c  ****          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
1319:Src/ADCsrc.c  ****           ** No loop unrolling is used. */
1320:Src/ADCsrc.c  ****          k = srcBLen % 0x4u;
 1150              		.loc 1 1320 0
 1151 01d4 0EF00301 		and	r1, lr, #3
 1152              	.LVL184:
1321:Src/ADCsrc.c  **** 
1322:Src/ADCsrc.c  ****          while(k > 0u)
 1153              		.loc 1 1322 0
 1154 01d8 1DE0     		b	.L79
 1155              	.LVL185:
 1156              	.L80:
1323:Src/ADCsrc.c  ****          {
1324:Src/ADCsrc.c  ****            /* Read y[4] sample */
1325:Src/ADCsrc.c  ****            c0 = *(py++);
 1157              		.loc 1 1325 0
 1158 01da 98ED007A 		flds	s14, [r8]
 1159              	.LVL186:
1326:Src/ADCsrc.c  **** 
1327:Src/ADCsrc.c  ****            /* Read x[7] sample */
1328:Src/ADCsrc.c  ****            x3 = *(px++);
 1160              		.loc 1 1328 0
 1161 01de D3ED005A 		flds	s11, [r3]
 1162              	.LVL187:
1329:Src/ADCsrc.c  **** 
1330:Src/ADCsrc.c  ****            /* Perform the multiply-accumulates */
1331:Src/ADCsrc.c  ****            /* acc0 +=  x[4] * y[4] */
1332:Src/ADCsrc.c  ****            acc0 += x0 * c0;
 1163              		.loc 1 1332 0
 1164 01e2 26EE076A 		fmuls	s12, s12, s14
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 147


 1165              	.LVL188:
 1166 01e6 76EE866A 		fadds	s13, s13, s12
 1167              	.LVL189:
1333:Src/ADCsrc.c  ****            /* acc1 +=  x[5] * y[4] */
1334:Src/ADCsrc.c  ****            acc1 += x1 * c0;
 1168              		.loc 1 1334 0
 1169 01ea 24EE876A 		fmuls	s12, s9, s14
 1170 01ee 33EE063A 		fadds	s6, s6, s12
 1171              	.LVL190:
1335:Src/ADCsrc.c  ****            /* acc2 +=  x[6] * y[4] */
1336:Src/ADCsrc.c  ****            acc2 += x2 * c0;
 1172              		.loc 1 1336 0
 1173 01f2 25EE076A 		fmuls	s12, s10, s14
 1174 01f6 73EE863A 		fadds	s7, s7, s12
 1175              	.LVL191:
1337:Src/ADCsrc.c  ****            /* acc3 +=  x[7] * y[4] */
1338:Src/ADCsrc.c  ****            acc3 += x3 * c0;
 1176              		.loc 1 1338 0
 1177 01fa 25EE877A 		fmuls	s14, s11, s14
 1178              	.LVL192:
 1179 01fe 77EE877A 		fadds	s15, s15, s14
 1180              	.LVL193:
1339:Src/ADCsrc.c  **** 
1340:Src/ADCsrc.c  ****            /* Reuse the present samples for the next MAC */
1341:Src/ADCsrc.c  ****            x0 = x1;
1342:Src/ADCsrc.c  ****            x1 = x2;
1343:Src/ADCsrc.c  ****            x2 = x3;
1344:Src/ADCsrc.c  **** 
1345:Src/ADCsrc.c  ****            /* Decrement the loop counter */
1346:Src/ADCsrc.c  ****            k--;
 1181              		.loc 1 1346 0
 1182 0202 0139     		subs	r1, r1, #1
 1183              	.LVL194:
1341:Src/ADCsrc.c  ****            x1 = x2;
 1184              		.loc 1 1341 0
 1185 0204 B0EE646A 		fcpys	s12, s9
1342:Src/ADCsrc.c  ****            x2 = x3;
 1186              		.loc 1 1342 0
 1187 0208 F0EE454A 		fcpys	s9, s10
 1188              	.LVL195:
1343:Src/ADCsrc.c  **** 
 1189              		.loc 1 1343 0
 1190 020c B0EE655A 		fcpys	s10, s11
 1191              	.LVL196:
1325:Src/ADCsrc.c  **** 
 1192              		.loc 1 1325 0
 1193 0210 08F10408 		add	r8, r8, #4
 1194              	.LVL197:
1328:Src/ADCsrc.c  **** 
 1195              		.loc 1 1328 0
 1196 0214 0433     		adds	r3, r3, #4
 1197              	.LVL198:
 1198              	.L79:
1322:Src/ADCsrc.c  ****          {
 1199              		.loc 1 1322 0
 1200 0216 0029     		cmp	r1, #0
 1201 0218 DFD1     		bne	.L80
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 148


1347:Src/ADCsrc.c  ****          }
1348:Src/ADCsrc.c  **** 
1349:Src/ADCsrc.c  ****          /* Store the result in the accumulator in the destination buffer. */
1350:Src/ADCsrc.c  ****          *pOut = acc0;
 1202              		.loc 1 1350 0
 1203 021a C5ED006A 		fsts	s13, [r5]
1351:Src/ADCsrc.c  ****          /* Destination pointer is updated according to the address modifier, inc */
1352:Src/ADCsrc.c  ****          pOut += inc;
 1204              		.loc 1 1352 0
 1205 021e BB00     		lsls	r3, r7, #2
 1206              	.LVL199:
 1207 0220 1D44     		add	r5, r5, r3
 1208              	.LVL200:
1353:Src/ADCsrc.c  **** 
1354:Src/ADCsrc.c  ****          *pOut = acc1;
 1209              		.loc 1 1354 0
 1210 0222 85ED003A 		fsts	s6, [r5]
1355:Src/ADCsrc.c  ****          pOut += inc;
 1211              		.loc 1 1355 0
 1212 0226 1D44     		add	r5, r5, r3
 1213              	.LVL201:
1356:Src/ADCsrc.c  **** 
1357:Src/ADCsrc.c  ****          *pOut = acc2;
 1214              		.loc 1 1357 0
 1215 0228 C5ED003A 		fsts	s7, [r5]
1358:Src/ADCsrc.c  ****          pOut += inc;
 1216              		.loc 1 1358 0
 1217 022c 1D44     		add	r5, r5, r3
 1218              	.LVL202:
1359:Src/ADCsrc.c  **** 
1360:Src/ADCsrc.c  ****          *pOut = acc3;
 1219              		.loc 1 1360 0
 1220 022e C5ED007A 		fsts	s15, [r5]
1361:Src/ADCsrc.c  ****          pOut += inc;
 1221              		.loc 1 1361 0
 1222 0232 1D44     		add	r5, r5, r3
 1223              	.LVL203:
1362:Src/ADCsrc.c  **** 
1363:Src/ADCsrc.c  ****          /* Increment the pointer pIn1 index, count by 4 */
1364:Src/ADCsrc.c  ****          count += 4u;
 1224              		.loc 1 1364 0
 1225 0234 09F10409 		add	r9, r9, #4
 1226              	.LVL204:
1365:Src/ADCsrc.c  **** 
1366:Src/ADCsrc.c  ****          /* Update the inputA and inputB pointers for next MAC calculation */
1367:Src/ADCsrc.c  ****          px = pIn1 + count;
 1227              		.loc 1 1367 0
 1228 0238 00EB8901 		add	r1, r0, r9, lsl #2
 1229              	.LVL205:
1368:Src/ADCsrc.c  ****          py = pIn2;
1369:Src/ADCsrc.c  **** 
1370:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1371:Src/ADCsrc.c  ****          blkCnt--;
 1230              		.loc 1 1371 0
 1231 023c 0AF1FF3A 		add	r10, r10, #-1
 1232              	.LVL206:
 1233              	.L77:
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 149


1231:Src/ADCsrc.c  ****        {
 1234              		.loc 1 1231 0
 1235 0240 BAF1000F 		cmp	r10, #0
 1236 0244 7FF45AAF 		bne	.L81
1372:Src/ADCsrc.c  ****        }
1373:Src/ADCsrc.c  **** 
1374:Src/ADCsrc.c  ****        /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
1375:Src/ADCsrc.c  ****         ** No loop unrolling is used. */
1376:Src/ADCsrc.c  ****        blkCnt = blockSize2 % 0x4u;
 1237              		.loc 1 1376 0
 1238 0248 0CF00308 		and	r8, ip, #3
 1239              	.LVL207:
1377:Src/ADCsrc.c  **** 
1378:Src/ADCsrc.c  ****        while(blkCnt > 0u)
 1240              		.loc 1 1378 0
 1241 024c 44E0     		b	.L82
 1242              	.L87:
 1243              	.LVL208:
1379:Src/ADCsrc.c  ****        {
1380:Src/ADCsrc.c  ****          /* Accumulator is made zero for every iteration */
1381:Src/ADCsrc.c  ****          sum = 0.0f;
1382:Src/ADCsrc.c  **** 
1383:Src/ADCsrc.c  ****          /* Apply loop unrolling and compute 4 MACs simultaneously. */
1384:Src/ADCsrc.c  ****          k = srcBLen >> 2u;
 1244              		.loc 1 1384 0
 1245 024e 4FEA9E03 		lsr	r3, lr, #2
 1246              	.LVL209:
1385:Src/ADCsrc.c  **** 
1386:Src/ADCsrc.c  ****          /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1387:Src/ADCsrc.c  ****           ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1388:Src/ADCsrc.c  ****          while(k > 0u)
 1247              		.loc 1 1388 0
 1248 0252 1446     		mov	r4, r2
1381:Src/ADCsrc.c  **** 
 1249              		.loc 1 1381 0
 1250 0254 DFED577A 		flds	s15, .L99
 1251              		.loc 1 1388 0
 1252 0258 22E0     		b	.L83
 1253              	.LVL210:
 1254              	.L84:
1389:Src/ADCsrc.c  ****          {
1390:Src/ADCsrc.c  ****            /* Perform the multiply-accumulates */
1391:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1255              		.loc 1 1391 0
 1256 025a 91ED007A 		flds	s14, [r1]
 1257              	.LVL211:
 1258 025e D4ED006A 		flds	s13, [r4]
 1259 0262 67EE266A 		fmuls	s13, s14, s13
 1260 0266 76EEA77A 		fadds	s15, s13, s15
 1261              	.LVL212:
1392:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1262              		.loc 1 1392 0
 1263 026a 91ED017A 		flds	s14, [r1, #4]
 1264              	.LVL213:
 1265 026e D4ED016A 		flds	s13, [r4, #4]
 1266 0272 27EE267A 		fmuls	s14, s14, s13
 1267 0276 77EE277A 		fadds	s15, s14, s15
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 150


 1268              	.LVL214:
1393:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1269              		.loc 1 1393 0
 1270 027a 91ED027A 		flds	s14, [r1, #8]
 1271              	.LVL215:
 1272 027e D4ED026A 		flds	s13, [r4, #8]
 1273 0282 27EE267A 		fmuls	s14, s14, s13
 1274 0286 77EE276A 		fadds	s13, s14, s15
 1275              	.LVL216:
1394:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1276              		.loc 1 1394 0
 1277 028a 91ED037A 		flds	s14, [r1, #12]
 1278              	.LVL217:
 1279 028e D4ED037A 		flds	s15, [r4, #12]
 1280 0292 67EE277A 		fmuls	s15, s14, s15
 1281 0296 77EEA67A 		fadds	s15, s15, s13
 1282              	.LVL218:
1395:Src/ADCsrc.c  **** 
1396:Src/ADCsrc.c  ****            /* Decrement the loop counter */
1397:Src/ADCsrc.c  ****            k--;
 1283              		.loc 1 1397 0
 1284 029a 013B     		subs	r3, r3, #1
 1285              	.LVL219:
1394:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1286              		.loc 1 1394 0
 1287 029c 1034     		adds	r4, r4, #16
 1288              	.LVL220:
 1289 029e 1031     		adds	r1, r1, #16
 1290              	.LVL221:
 1291              	.L83:
1388:Src/ADCsrc.c  ****          {
 1292              		.loc 1 1388 0
 1293 02a0 002B     		cmp	r3, #0
 1294 02a2 DAD1     		bne	.L84
1398:Src/ADCsrc.c  ****          }
1399:Src/ADCsrc.c  **** 
1400:Src/ADCsrc.c  ****          /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
1401:Src/ADCsrc.c  ****           ** No loop unrolling is used. */
1402:Src/ADCsrc.c  ****          k = srcBLen % 0x4u;
 1295              		.loc 1 1402 0
 1296 02a4 0EF00303 		and	r3, lr, #3
 1297              	.LVL222:
1403:Src/ADCsrc.c  **** 
1404:Src/ADCsrc.c  ****          while(k > 0u)
 1298              		.loc 1 1404 0
 1299 02a8 0AE0     		b	.L85
 1300              	.L86:
 1301              	.LVL223:
1405:Src/ADCsrc.c  ****          {
1406:Src/ADCsrc.c  ****            /* Perform the multiply-accumulate */
1407:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1302              		.loc 1 1407 0
 1303 02aa 91ED007A 		flds	s14, [r1]
 1304              	.LVL224:
 1305 02ae D4ED006A 		flds	s13, [r4]
 1306 02b2 27EE267A 		fmuls	s14, s14, s13
 1307 02b6 77EE877A 		fadds	s15, s15, s14
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 151


 1308              	.LVL225:
1408:Src/ADCsrc.c  **** 
1409:Src/ADCsrc.c  ****            /* Decrement the loop counter */
1410:Src/ADCsrc.c  ****            k--;
 1309              		.loc 1 1410 0
 1310 02ba 013B     		subs	r3, r3, #1
 1311              	.LVL226:
1407:Src/ADCsrc.c  **** 
 1312              		.loc 1 1407 0
 1313 02bc 0434     		adds	r4, r4, #4
 1314              	.LVL227:
 1315 02be 0431     		adds	r1, r1, #4
 1316              	.LVL228:
 1317              	.L85:
1404:Src/ADCsrc.c  ****          {
 1318              		.loc 1 1404 0
 1319 02c0 002B     		cmp	r3, #0
 1320 02c2 F2D1     		bne	.L86
1411:Src/ADCsrc.c  ****          }
1412:Src/ADCsrc.c  **** 
1413:Src/ADCsrc.c  ****          /* Store the result in the accumulator in the destination buffer. */
1414:Src/ADCsrc.c  ****          *pOut = sum;
 1321              		.loc 1 1414 0
 1322 02c4 C5ED007A 		fsts	s15, [r5]
1415:Src/ADCsrc.c  ****          /* Destination pointer is updated according to the address modifier, inc */
1416:Src/ADCsrc.c  ****          pOut += inc;
 1323              		.loc 1 1416 0
 1324 02c8 05EB8705 		add	r5, r5, r7, lsl #2
 1325              	.LVL229:
1417:Src/ADCsrc.c  **** 
1418:Src/ADCsrc.c  ****          /* Increment the pointer pIn1 index, count by 1 */
1419:Src/ADCsrc.c  ****          count++;
 1326              		.loc 1 1419 0
 1327 02cc 09F10109 		add	r9, r9, #1
 1328              	.LVL230:
1420:Src/ADCsrc.c  **** 
1421:Src/ADCsrc.c  ****          /* Update the inputA and inputB pointers for next MAC calculation */
1422:Src/ADCsrc.c  ****          px = pIn1 + count;
 1329              		.loc 1 1422 0
 1330 02d0 00EB8901 		add	r1, r0, r9, lsl #2
 1331              	.LVL231:
1423:Src/ADCsrc.c  ****          py = pIn2;
1424:Src/ADCsrc.c  **** 
1425:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1426:Src/ADCsrc.c  ****          blkCnt--;
 1332              		.loc 1 1426 0
 1333 02d4 08F1FF38 		add	r8, r8, #-1
 1334              	.LVL232:
 1335              	.L82:
1378:Src/ADCsrc.c  ****        {
 1336              		.loc 1 1378 0
 1337 02d8 B8F1000F 		cmp	r8, #0
 1338 02dc B7D1     		bne	.L87
 1339 02de 1EE0     		b	.L88
 1340              	.LVL233:
 1341              	.L89:
1427:Src/ADCsrc.c  ****        }
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 152


1428:Src/ADCsrc.c  ****      }
1429:Src/ADCsrc.c  ****      else
1430:Src/ADCsrc.c  ****      {
1431:Src/ADCsrc.c  ****        /* If the srcBLen is not a multiple of 4,
1432:Src/ADCsrc.c  ****         * the blockSize2 loop cannot be unrolled by 4 */
1433:Src/ADCsrc.c  ****        blkCnt = blockSize2;
1434:Src/ADCsrc.c  **** 
1435:Src/ADCsrc.c  ****        while(blkCnt > 0u)
1436:Src/ADCsrc.c  ****        {
1437:Src/ADCsrc.c  ****          /* Accumulator is made zero for every iteration */
1438:Src/ADCsrc.c  ****          sum = 0.0f;
1439:Src/ADCsrc.c  **** 
1440:Src/ADCsrc.c  ****          /* Loop over srcBLen */
1441:Src/ADCsrc.c  ****          k = srcBLen;
1442:Src/ADCsrc.c  **** 
1443:Src/ADCsrc.c  ****          while(k > 0u)
1444:Src/ADCsrc.c  ****          {
1445:Src/ADCsrc.c  ****            /* Perform the multiply-accumulate */
1446:Src/ADCsrc.c  ****            sum += *px++ * *py++;
 1342              		.loc 1 1446 0
 1343 02e0 D1ED007A 		flds	s15, [r1]
 1344              	.LVL234:
 1345 02e4 D4ED006A 		flds	s13, [r4]
 1346 02e8 67EEA67A 		fmuls	s15, s15, s13
 1347 02ec 37EE277A 		fadds	s14, s14, s15
 1348              	.LVL235:
1447:Src/ADCsrc.c  **** 
1448:Src/ADCsrc.c  ****            /* Decrement the loop counter */
1449:Src/ADCsrc.c  ****            k--;
 1349              		.loc 1 1449 0
 1350 02f0 013B     		subs	r3, r3, #1
 1351              	.LVL236:
1446:Src/ADCsrc.c  **** 
 1352              		.loc 1 1446 0
 1353 02f2 0434     		adds	r4, r4, #4
 1354              	.LVL237:
 1355 02f4 0431     		adds	r1, r1, #4
 1356              	.LVL238:
 1357 02f6 03E0     		b	.L90
 1358              	.LVL239:
 1359              	.L97:
 1360 02f8 7346     		mov	r3, lr
 1361 02fa 1446     		mov	r4, r2
 1362 02fc 9FED2D7A 		flds	s14, .L99
 1363              	.LVL240:
 1364              	.L90:
1443:Src/ADCsrc.c  ****          {
 1365              		.loc 1 1443 0
 1366 0300 002B     		cmp	r3, #0
 1367 0302 EDD1     		bne	.L89
1450:Src/ADCsrc.c  ****          }
1451:Src/ADCsrc.c  **** 
1452:Src/ADCsrc.c  ****          /* Store the result in the accumulator in the destination buffer. */
1453:Src/ADCsrc.c  ****          *pOut = sum;
 1368              		.loc 1 1453 0
 1369 0304 85ED007A 		fsts	s14, [r5]
1454:Src/ADCsrc.c  ****          /* Destination pointer is updated according to the address modifier, inc */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 153


1455:Src/ADCsrc.c  ****          pOut += inc;
 1370              		.loc 1 1455 0
 1371 0308 05EB8705 		add	r5, r5, r7, lsl #2
 1372              	.LVL241:
1456:Src/ADCsrc.c  **** 
1457:Src/ADCsrc.c  ****          /* Increment the pointer pIn1 index, count by 1 */
1458:Src/ADCsrc.c  ****          count++;
 1373              		.loc 1 1458 0
 1374 030c 09F10109 		add	r9, r9, #1
 1375              	.LVL242:
1459:Src/ADCsrc.c  **** 
1460:Src/ADCsrc.c  ****          /* Update the inputA and inputB pointers for next MAC calculation */
1461:Src/ADCsrc.c  ****          px = pIn1 + count;
 1376              		.loc 1 1461 0
 1377 0310 00EB8901 		add	r1, r0, r9, lsl #2
 1378              	.LVL243:
1462:Src/ADCsrc.c  ****          py = pIn2;
1463:Src/ADCsrc.c  **** 
1464:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1465:Src/ADCsrc.c  ****          blkCnt--;
 1379              		.loc 1 1465 0
 1380 0314 08F1FF38 		add	r8, r8, #-1
 1381              	.LVL244:
 1382              	.L76:
1435:Src/ADCsrc.c  ****        {
 1383              		.loc 1 1435 0
 1384 0318 B8F1000F 		cmp	r8, #0
 1385 031c ECD1     		bne	.L97
 1386              	.LVL245:
 1387              	.L88:
1466:Src/ADCsrc.c  ****        }
1467:Src/ADCsrc.c  ****      }
1468:Src/ADCsrc.c  **** 
1469:Src/ADCsrc.c  ****      /* --------------------------
1470:Src/ADCsrc.c  ****       * Initializations of stage3
1471:Src/ADCsrc.c  ****       * -------------------------*/
1472:Src/ADCsrc.c  **** 
1473:Src/ADCsrc.c  ****      /* sum += x[srcALen-srcBLen+1] * y[0] + x[srcALen-srcBLen+2] * y[1] +...+ x[srcALen-1] * y[src
1474:Src/ADCsrc.c  ****       * sum += x[srcALen-srcBLen+2] * y[0] + x[srcALen-srcBLen+3] * y[1] +...+ x[srcALen-1] * y[src
1475:Src/ADCsrc.c  ****       * ....
1476:Src/ADCsrc.c  ****       * sum +=  x[srcALen-2] * y[0] + x[srcALen-1] * y[1]
1477:Src/ADCsrc.c  ****       * sum +=  x[srcALen-1] * y[0]
1478:Src/ADCsrc.c  ****       */
1479:Src/ADCsrc.c  **** 
1480:Src/ADCsrc.c  ****      /* In this stage the MAC operations are decreased by 1 for every iteration.
1481:Src/ADCsrc.c  ****         The count variable holds the number of MAC operations performed */
1482:Src/ADCsrc.c  ****      count = srcBLen - 1u;
1483:Src/ADCsrc.c  **** 
1484:Src/ADCsrc.c  ****      /* Working pointer of inputA */
1485:Src/ADCsrc.c  ****      pSrc1 = pIn1 + (srcALen - (srcBLen - 1u));
 1388              		.loc 1 1485 0
 1389 031e 00EB8C0C 		add	ip, r0, ip, lsl #2
 1390              	.LVL246:
1117:Src/ADCsrc.c  **** 
 1391              		.loc 1 1117 0
 1392 0322 3446     		mov	r4, r6
1486:Src/ADCsrc.c  ****      px = pSrc1;
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 154


1487:Src/ADCsrc.c  **** 
1488:Src/ADCsrc.c  ****      /* Working pointer of inputB */
1489:Src/ADCsrc.c  ****      py = pIn2;
1490:Src/ADCsrc.c  **** 
1491:Src/ADCsrc.c  ****      /* -------------------
1492:Src/ADCsrc.c  ****       * Stage3 process
1493:Src/ADCsrc.c  ****       * ------------------*/
1494:Src/ADCsrc.c  **** 
1495:Src/ADCsrc.c  ****      while(blockSize3 > 0u)
 1393              		.loc 1 1495 0
 1394 0324 42E0     		b	.L91
 1395              	.LVL247:
 1396              	.L96:
1496:Src/ADCsrc.c  ****      {
1497:Src/ADCsrc.c  ****        /* Accumulator is made zero for every iteration */
1498:Src/ADCsrc.c  ****        sum = 0.0f;
1499:Src/ADCsrc.c  **** 
1500:Src/ADCsrc.c  ****        /* Apply loop unrolling and compute 4 MACs simultaneously. */
1501:Src/ADCsrc.c  ****        k = count >> 2u;
 1397              		.loc 1 1501 0
 1398 0326 B008     		lsrs	r0, r6, #2
 1399              	.LVL248:
1502:Src/ADCsrc.c  **** 
1503:Src/ADCsrc.c  ****        /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1504:Src/ADCsrc.c  ****         ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1505:Src/ADCsrc.c  ****        while(k > 0u)
 1400              		.loc 1 1505 0
 1401 0328 1146     		mov	r1, r2
 1402 032a 6346     		mov	r3, ip
1498:Src/ADCsrc.c  **** 
 1403              		.loc 1 1498 0
 1404 032c DFED217A 		flds	s15, .L99
 1405              		.loc 1 1505 0
 1406 0330 22E0     		b	.L92
 1407              	.LVL249:
 1408              	.L93:
1506:Src/ADCsrc.c  ****        {
1507:Src/ADCsrc.c  ****          /* Perform the multiply-accumulates */
1508:Src/ADCsrc.c  ****          /* sum += x[srcALen - srcBLen + 4] * y[3] */
1509:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 1409              		.loc 1 1509 0
 1410 0332 93ED007A 		flds	s14, [r3]
 1411              	.LVL250:
 1412 0336 D1ED006A 		flds	s13, [r1]
 1413 033a 67EE266A 		fmuls	s13, s14, s13
 1414 033e 76EEA77A 		fadds	s15, s13, s15
 1415              	.LVL251:
1510:Src/ADCsrc.c  ****          /* sum += x[srcALen - srcBLen + 3] * y[2] */
1511:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 1416              		.loc 1 1511 0
 1417 0342 93ED017A 		flds	s14, [r3, #4]
 1418              	.LVL252:
 1419 0346 D1ED016A 		flds	s13, [r1, #4]
 1420 034a 67EE266A 		fmuls	s13, s14, s13
 1421 034e 76EEA77A 		fadds	s15, s13, s15
 1422              	.LVL253:
1512:Src/ADCsrc.c  ****          /* sum += x[srcALen - srcBLen + 2] * y[1] */
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 155


1513:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 1423              		.loc 1 1513 0
 1424 0352 93ED027A 		flds	s14, [r3, #8]
 1425              	.LVL254:
 1426 0356 D1ED026A 		flds	s13, [r1, #8]
 1427 035a 27EE267A 		fmuls	s14, s14, s13
 1428 035e 77EE276A 		fadds	s13, s14, s15
 1429              	.LVL255:
1514:Src/ADCsrc.c  ****          /* sum += x[srcALen - srcBLen + 1] * y[0] */
1515:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 1430              		.loc 1 1515 0
 1431 0362 93ED037A 		flds	s14, [r3, #12]
 1432              	.LVL256:
 1433 0366 D1ED037A 		flds	s15, [r1, #12]
 1434 036a 27EE277A 		fmuls	s14, s14, s15
 1435 036e 77EE267A 		fadds	s15, s14, s13
 1436              	.LVL257:
1516:Src/ADCsrc.c  **** 
1517:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1518:Src/ADCsrc.c  ****          k--;
 1437              		.loc 1 1518 0
 1438 0372 0138     		subs	r0, r0, #1
 1439              	.LVL258:
1515:Src/ADCsrc.c  **** 
 1440              		.loc 1 1515 0
 1441 0374 1031     		adds	r1, r1, #16
 1442              	.LVL259:
 1443 0376 1033     		adds	r3, r3, #16
 1444              	.LVL260:
 1445              	.L92:
1505:Src/ADCsrc.c  ****        {
 1446              		.loc 1 1505 0
 1447 0378 0028     		cmp	r0, #0
 1448 037a DAD1     		bne	.L93
1519:Src/ADCsrc.c  ****        }
1520:Src/ADCsrc.c  **** 
1521:Src/ADCsrc.c  ****        /* If the count is not a multiple of 4, compute any remaining MACs here.
1522:Src/ADCsrc.c  ****         ** No loop unrolling is used. */
1523:Src/ADCsrc.c  ****        k = count % 0x4u;
 1449              		.loc 1 1523 0
 1450 037c 06F00300 		and	r0, r6, #3
 1451              	.LVL261:
1524:Src/ADCsrc.c  **** 
1525:Src/ADCsrc.c  ****        while(k > 0u)
 1452              		.loc 1 1525 0
 1453 0380 0AE0     		b	.L94
 1454              	.L95:
 1455              	.LVL262:
1526:Src/ADCsrc.c  ****        {
1527:Src/ADCsrc.c  ****          /* Perform the multiply-accumulates */
1528:Src/ADCsrc.c  ****          sum += *px++ * *py++;
 1456              		.loc 1 1528 0
 1457 0382 93ED007A 		flds	s14, [r3]
 1458              	.LVL263:
 1459 0386 D1ED006A 		flds	s13, [r1]
 1460 038a 27EE267A 		fmuls	s14, s14, s13
 1461 038e 77EE877A 		fadds	s15, s15, s14
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 156


 1462              	.LVL264:
1529:Src/ADCsrc.c  **** 
1530:Src/ADCsrc.c  ****          /* Decrement the loop counter */
1531:Src/ADCsrc.c  ****          k--;
 1463              		.loc 1 1531 0
 1464 0392 0138     		subs	r0, r0, #1
 1465              	.LVL265:
1528:Src/ADCsrc.c  **** 
 1466              		.loc 1 1528 0
 1467 0394 0431     		adds	r1, r1, #4
 1468              	.LVL266:
 1469 0396 0433     		adds	r3, r3, #4
 1470              	.LVL267:
 1471              	.L94:
1525:Src/ADCsrc.c  ****        {
 1472              		.loc 1 1525 0
 1473 0398 0028     		cmp	r0, #0
 1474 039a F2D1     		bne	.L95
1532:Src/ADCsrc.c  ****        }
1533:Src/ADCsrc.c  **** 
1534:Src/ADCsrc.c  ****        /* Store the result in the accumulator in the destination buffer. */
1535:Src/ADCsrc.c  ****        *pOut = sum;
 1475              		.loc 1 1535 0
 1476 039c C5ED007A 		fsts	s15, [r5]
1536:Src/ADCsrc.c  ****        /* Destination pointer is updated according to the address modifier, inc */
1537:Src/ADCsrc.c  ****        pOut += inc;
 1477              		.loc 1 1537 0
 1478 03a0 05EB8705 		add	r5, r5, r7, lsl #2
 1479              	.LVL268:
1538:Src/ADCsrc.c  **** 
1539:Src/ADCsrc.c  ****        /* Update the inputA and inputB pointers for next MAC calculation */
1540:Src/ADCsrc.c  ****        px = ++pSrc1;
 1480              		.loc 1 1540 0
 1481 03a4 0CF1040C 		add	ip, ip, #4
 1482              	.LVL269:
1541:Src/ADCsrc.c  ****        py = pIn2;
1542:Src/ADCsrc.c  **** 
1543:Src/ADCsrc.c  ****        /* Decrement the MAC count */
1544:Src/ADCsrc.c  ****        count--;
 1483              		.loc 1 1544 0
 1484 03a8 013E     		subs	r6, r6, #1
 1485              	.LVL270:
1545:Src/ADCsrc.c  **** 
1546:Src/ADCsrc.c  ****        /* Decrement the loop counter */
1547:Src/ADCsrc.c  ****        blockSize3--;
 1486              		.loc 1 1547 0
 1487 03aa 013C     		subs	r4, r4, #1
 1488              	.LVL271:
 1489              	.L91:
1495:Src/ADCsrc.c  ****      {
 1490              		.loc 1 1495 0
 1491 03ac 002C     		cmp	r4, #0
 1492 03ae BAD1     		bne	.L96
1548:Src/ADCsrc.c  ****      }
1549:Src/ADCsrc.c  **** 
1550:Src/ADCsrc.c  ****    #else
1551:Src/ADCsrc.c  **** 
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 157


1552:Src/ADCsrc.c  ****      /* Run the below code for Cortex-M0 */
1553:Src/ADCsrc.c  **** 
1554:Src/ADCsrc.c  ****      float32_t *pIn1 = pSrcA;                       /* inputA pointer */
1555:Src/ADCsrc.c  ****      float32_t *pIn2 = pSrcB + (srcBLen - 1u);      /* inputB pointer */
1556:Src/ADCsrc.c  ****      float32_t sum;                                 /* Accumulator */
1557:Src/ADCsrc.c  ****      uint32_t i = 0u, j;                            /* loop counters */
1558:Src/ADCsrc.c  ****      uint32_t inv = 0u;                             /* Reverse order flag */
1559:Src/ADCsrc.c  ****      uint32_t tot = 0u;                             /* Length */
1560:Src/ADCsrc.c  **** 
1561:Src/ADCsrc.c  ****      /* The algorithm implementation is based on the lengths of the inputs. */
1562:Src/ADCsrc.c  ****      /* srcB is always made to slide across srcA. */
1563:Src/ADCsrc.c  ****      /* So srcBLen is always considered as shorter or equal to srcALen */
1564:Src/ADCsrc.c  ****      /* But CORR(x, y) is reverse of CORR(y, x) */
1565:Src/ADCsrc.c  ****      /* So, when srcBLen > srcALen, output pointer is made to point to the end of the output buffer
1566:Src/ADCsrc.c  ****      /* and a varaible, inv is set to 1 */
1567:Src/ADCsrc.c  ****      /* If lengths are not equal then zero pad has to be done to  make the two
1568:Src/ADCsrc.c  ****       * inputs of same length. But to improve the performance, we assume zeroes
1569:Src/ADCsrc.c  ****       * in the output instead of zero padding either of the the inputs*/
1570:Src/ADCsrc.c  ****      /* If srcALen > srcBLen, (srcALen - srcBLen) zeroes has to included in the
1571:Src/ADCsrc.c  ****       * starting of the output buffer */
1572:Src/ADCsrc.c  ****      /* If srcALen < srcBLen, (srcALen - srcBLen) zeroes has to included in the
1573:Src/ADCsrc.c  ****       * ending of the output buffer */
1574:Src/ADCsrc.c  ****      /* Once the zero padding is done the remaining of the output is calcualted
1575:Src/ADCsrc.c  ****       * using convolution but with the shorter signal time shifted. */
1576:Src/ADCsrc.c  **** 
1577:Src/ADCsrc.c  ****      /* Calculate the length of the remaining sequence */
1578:Src/ADCsrc.c  ****      tot = ((srcALen + srcBLen) - 2u);
1579:Src/ADCsrc.c  **** 
1580:Src/ADCsrc.c  ****      if(srcALen > srcBLen)
1581:Src/ADCsrc.c  ****      {
1582:Src/ADCsrc.c  ****        /* Calculating the number of zeros to be padded to the output */
1583:Src/ADCsrc.c  ****        j = srcALen - srcBLen;
1584:Src/ADCsrc.c  **** 
1585:Src/ADCsrc.c  ****        /* Initialise the pointer after zero padding */
1586:Src/ADCsrc.c  ****        pDst += j;
1587:Src/ADCsrc.c  ****      }
1588:Src/ADCsrc.c  **** 
1589:Src/ADCsrc.c  ****      else if(srcALen < srcBLen)
1590:Src/ADCsrc.c  ****      {
1591:Src/ADCsrc.c  ****        /* Initialization to inputB pointer */
1592:Src/ADCsrc.c  ****        pIn1 = pSrcB;
1593:Src/ADCsrc.c  **** 
1594:Src/ADCsrc.c  ****        /* Initialization to the end of inputA pointer */
1595:Src/ADCsrc.c  ****        pIn2 = pSrcA + (srcALen - 1u);
1596:Src/ADCsrc.c  **** 
1597:Src/ADCsrc.c  ****        /* Initialisation of the pointer after zero padding */
1598:Src/ADCsrc.c  ****        pDst = pDst + tot;
1599:Src/ADCsrc.c  **** 
1600:Src/ADCsrc.c  ****        /* Swapping the lengths */
1601:Src/ADCsrc.c  ****        j = srcALen;
1602:Src/ADCsrc.c  ****        srcALen = srcBLen;
1603:Src/ADCsrc.c  ****        srcBLen = j;
1604:Src/ADCsrc.c  **** 
1605:Src/ADCsrc.c  ****        /* Setting the reverse flag */
1606:Src/ADCsrc.c  ****        inv = 1;
1607:Src/ADCsrc.c  **** 
1608:Src/ADCsrc.c  ****      }
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 158


1609:Src/ADCsrc.c  **** 
1610:Src/ADCsrc.c  ****      /* Loop to calculate convolution for output length number of times */
1611:Src/ADCsrc.c  ****      for (i = 0u; i <= tot; i++)
1612:Src/ADCsrc.c  ****      {
1613:Src/ADCsrc.c  ****        /* Initialize sum with zero to carry on MAC operations */
1614:Src/ADCsrc.c  ****        sum = 0.0f;
1615:Src/ADCsrc.c  **** 
1616:Src/ADCsrc.c  ****        /* Loop to perform MAC operations according to convolution equation */
1617:Src/ADCsrc.c  ****        for (j = 0u; j <= i; j++)
1618:Src/ADCsrc.c  ****        {
1619:Src/ADCsrc.c  ****          /* Check the array limitations */
1620:Src/ADCsrc.c  ****          if((((i - j) < srcBLen) && (j < srcALen)))
1621:Src/ADCsrc.c  ****          {
1622:Src/ADCsrc.c  ****            /* z[i] += x[i-j] * y[j] */
1623:Src/ADCsrc.c  ****            sum += pIn1[j] * pIn2[-((int32_t) i - j)];
1624:Src/ADCsrc.c  ****          }
1625:Src/ADCsrc.c  ****        }
1626:Src/ADCsrc.c  ****        /* Store the output in the destination buffer */
1627:Src/ADCsrc.c  ****        if(inv == 1)
1628:Src/ADCsrc.c  ****          *pDst-- = sum;
1629:Src/ADCsrc.c  ****        else
1630:Src/ADCsrc.c  ****          *pDst++ = sum;
1631:Src/ADCsrc.c  ****      }
1632:Src/ADCsrc.c  **** 
1633:Src/ADCsrc.c  ****    #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
1634:Src/ADCsrc.c  **** 
1635:Src/ADCsrc.c  ****    }
 1493              		.loc 1 1635 0
 1494 03b0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1495              	.LVL272:
 1496              	.L100:
 1497              		.align	2
 1498              	.L99:
 1499 03b4 00000000 		.word	0
 1500              		.cfi_endproc
 1501              	.LFE165:
 1503              		.section	.text.findFrequency,"ax",%progbits
 1504              		.align	2
 1505              		.global	findFrequency
 1506              		.thumb
 1507              		.thumb_func
 1509              	findFrequency:
 1510              	.LFB161:
 277:Src/ADCsrc.c  ****    uint32_t i, n, j, maxIndex;
 1511              		.loc 1 277 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 16
 1514              		@ frame_needed = 1, uses_anonymous_args = 0
 1515              	.LVL273:
 1516 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1517              	.LCFI4:
 1518              		.cfi_def_cfa_offset 32
 1519              		.cfi_offset 4, -32
 1520              		.cfi_offset 5, -28
 1521              		.cfi_offset 6, -24
 1522              		.cfi_offset 7, -20
 1523              		.cfi_offset 8, -16
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 159


 1524              		.cfi_offset 9, -12
 1525              		.cfi_offset 10, -8
 1526              		.cfi_offset 14, -4
 1527 0004 86B0     		sub	sp, sp, #24
 1528              	.LCFI5:
 1529              		.cfi_def_cfa_offset 56
 1530 0006 02AF     		add	r7, sp, #8
 1531              	.LCFI6:
 1532              		.cfi_def_cfa 7, 48
 1533 0008 0E46     		mov	r6, r1
 1534 000a 9046     		mov	r8, r2
 1535              	.LVL274:
 280:Src/ADCsrc.c  ****    n=1;
 1536              		.loc 1 280 0
 1537 000c 8946     		mov	r9, r1
 1538 000e 8B00     		lsls	r3, r1, #2
 1539 0010 0A33     		adds	r3, r3, #10
 1540 0012 23F00703 		bic	r3, r3, #7
 1541 0016 ADEB030D 		sub	sp, sp, r3
 1542 001a 02AA     		add	r2, sp, #8
 1543              	.LVL275:
 1544 001c 4FEA410A 		lsl	r10, r1, #1
 1545              	.LVL276:
 1546 0020 C800     		lsls	r0, r1, #3
 1547              	.LVL277:
 1548 0022 0830     		adds	r0, r0, #8
 1549 0024 ADEB000D 		sub	sp, sp, r0
 1550 0028 02AD     		add	r5, sp, #8
 1551              	.LVL278:
 1552 002a ADEB030D 		sub	sp, sp, r3
 1553 002e 02AC     		add	r4, sp, #8
 1554              	.LVL279:
 286:Src/ADCsrc.c  **** //arm_rfft_fast_f32(&fftStruct, input, output1, 0);
 1555              		.loc 1 286 0
 1556 0030 0095     		str	r5, [sp]
 1557 0032 1046     		mov	r0, r2
 1558 0034 0B46     		mov	r3, r1
 1559 0036 FFF7FEFF 		bl	arm_correlate_f32
 1560              	.LVL280:
 288:Src/ADCsrc.c  **** 
 1561              		.loc 1 288 0
 1562 003a 2846     		mov	r0, r5
 1563 003c 5146     		mov	r1, r10
 1564 003e 07F10802 		add	r2, r7, #8
 1565 0042 FFF7FEFF 		bl	arm_mean_f32
 1566              	.LVL281:
 294:Src/ADCsrc.c  ****   //output1[i] *= 10;
 1567              		.loc 1 294 0
 1568 0046 0023     		movs	r3, #0
 1569 0048 0AE0     		b	.L102
 1570              	.LVL282:
 1571              	.L103:
 296:Src/ADCsrc.c  **** 
 1572              		.loc 1 296 0 discriminator 3
 1573 004a 05EB8302 		add	r2, r5, r3, lsl #2
 1574 004e D2ED007A 		flds	s15, [r2]
 1575 0052 97ED027A 		flds	s14, [r7, #8]
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 160


 1576 0056 77EEC77A 		fsubs	s15, s15, s14
 1577 005a C2ED007A 		fsts	s15, [r2]
 294:Src/ADCsrc.c  ****   //output1[i] *= 10;
 1578              		.loc 1 294 0 discriminator 3
 1579 005e 0133     		adds	r3, r3, #1
 1580              	.LVL283:
 1581              	.L102:
 294:Src/ADCsrc.c  ****   //output1[i] *= 10;
 1582              		.loc 1 294 0 is_stmt 0 discriminator 1
 1583 0060 5345     		cmp	r3, r10
 1584 0062 F2D3     		bcc	.L103
 303:Src/ADCsrc.c  **** 
 1585              		.loc 1 303 0 is_stmt 1
 1586 0064 2846     		mov	r0, r5
 1587 0066 5146     		mov	r1, r10
 1588 0068 3A46     		mov	r2, r7
 1589 006a 07F10C03 		add	r3, r7, #12
 1590              	.LVL284:
 1591 006e FFF7FEFF 		bl	arm_max_f32
 1592              	.LVL285:
 307:Src/ADCsrc.c  ****      output1[i] /= maxVal;
 1593              		.loc 1 307 0
 1594 0072 0023     		movs	r3, #0
 1595 0074 0AE0     		b	.L104
 1596              	.LVL286:
 1597              	.L105:
 308:Src/ADCsrc.c  ****    }
 1598              		.loc 1 308 0 discriminator 3
 1599 0076 05EB8302 		add	r2, r5, r3, lsl #2
 1600 007a D2ED007A 		flds	s15, [r2]
 1601 007e 97ED007A 		flds	s14, [r7]
 1602 0082 C7EE877A 		fdivs	s15, s15, s14
 1603 0086 C2ED007A 		fsts	s15, [r2]
 307:Src/ADCsrc.c  ****      output1[i] /= maxVal;
 1604              		.loc 1 307 0 discriminator 3
 1605 008a 0133     		adds	r3, r3, #1
 1606              	.LVL287:
 1607              	.L104:
 307:Src/ADCsrc.c  ****      output1[i] /= maxVal;
 1608              		.loc 1 307 0 is_stmt 0 discriminator 1
 1609 008c 5345     		cmp	r3, r10
 1610 008e F2D3     		bcc	.L105
 1611 0090 0022     		movs	r2, #0
 1612 0092 08E0     		b	.L106
 1613              	.LVL288:
 1614              	.L107:
 315:Src/ADCsrc.c  **** }
 1615              		.loc 1 315 0 is_stmt 1 discriminator 3
 1616 0094 FB68     		ldr	r3, [r7, #12]
 1617 0096 1344     		add	r3, r3, r2
 1618 0098 05EB8303 		add	r3, r5, r3, lsl #2
 1619 009c 1968     		ldr	r1, [r3]	@ float
 1620 009e 04EB8203 		add	r3, r4, r2, lsl #2
 1621 00a2 1960     		str	r1, [r3]	@ float
 314:Src/ADCsrc.c  ****      output2[i] = output1[maxIndex+i];
 1622              		.loc 1 314 0 discriminator 3
 1623 00a4 0132     		adds	r2, r2, #1
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 161


 1624              	.LVL289:
 1625              	.L106:
 314:Src/ADCsrc.c  ****      output2[i] = output1[maxIndex+i];
 1626              		.loc 1 314 0 is_stmt 0 discriminator 1
 1627 00a6 4A45     		cmp	r2, r9
 1628 00a8 F4D3     		bcc	.L107
 319:Src/ADCsrc.c  ****  arm_std_f32(output2, nsamp, &dev);
 1629              		.loc 1 319 0 is_stmt 1
 1630 00aa 2046     		mov	r0, r4
 1631 00ac 3146     		mov	r1, r6
 1632 00ae 07F10802 		add	r2, r7, #8
 1633              	.LVL290:
 1634 00b2 FFF7FEFF 		bl	arm_mean_f32
 1635              	.LVL291:
 320:Src/ADCsrc.c  **** 
 1636              		.loc 1 320 0
 1637 00b6 2046     		mov	r0, r4
 1638 00b8 3146     		mov	r1, r6
 1639 00ba 3A1D     		adds	r2, r7, #4
 1640 00bc FFF7FEFF 		bl	arm_std_f32
 1641              	.LVL292:
 325:Src/ADCsrc.c  ****   if ((output2[i] < avg + (2*dev))) output2[i] = 0;
 1642              		.loc 1 325 0
 1643 00c0 0023     		movs	r3, #0
 1644 00c2 13E0     		b	.L108
 1645              	.LVL293:
 1646              	.L111:
 326:Src/ADCsrc.c  ****  }
 1647              		.loc 1 326 0
 1648 00c4 04EB8302 		add	r2, r4, r3, lsl #2
 1649 00c8 92ED007A 		flds	s14, [r2]
 1650 00cc D7ED017A 		flds	s15, [r7, #4]
 1651 00d0 77EEA77A 		fadds	s15, s15, s15
 1652 00d4 D7ED026A 		flds	s13, [r7, #8]
 1653 00d8 77EEA67A 		fadds	s15, s15, s13
 1654 00dc B4EEE77A 		fcmpes	s14, s15
 1655 00e0 F1EE10FA 		fmstat
 1656 00e4 01D5     		bpl	.L109
 326:Src/ADCsrc.c  ****  }
 1657              		.loc 1 326 0 is_stmt 0 discriminator 1
 1658 00e6 0021     		movs	r1, #0
 1659 00e8 1160     		str	r1, [r2]	@ float
 1660              	.L109:
 325:Src/ADCsrc.c  ****   if ((output2[i] < avg + (2*dev))) output2[i] = 0;
 1661              		.loc 1 325 0 is_stmt 1 discriminator 2
 1662 00ea 0133     		adds	r3, r3, #1
 1663              	.LVL294:
 1664              	.L108:
 325:Src/ADCsrc.c  ****   if ((output2[i] < avg + (2*dev))) output2[i] = 0;
 1665              		.loc 1 325 0 is_stmt 0 discriminator 1
 1666 00ec 4B45     		cmp	r3, r9
 1667 00ee E9D3     		bcc	.L111
 1668 00f0 0123     		movs	r3, #1
 1669              	.LVL295:
 1670 00f2 16E0     		b	.L112
 1671              	.LVL296:
 1672              	.L117:
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 162


 333:Src/ADCsrc.c  ****         n = i;
 1673              		.loc 1 333 0 is_stmt 1
 1674 00f4 04EB8302 		add	r2, r4, r3, lsl #2
 1675 00f8 92ED007A 		flds	s14, [r2]
 1676 00fc 52ED017A 		flds	s15, [r2, #-4]
 1677 0100 77EE677A 		fsubs	s15, s14, s15
 1678 0104 F5EEC07A 		fcmpezs	s15
 1679 0108 F1EE10FA 		fmstat
 1680 010c 08DD     		ble	.L113
 333:Src/ADCsrc.c  ****         n = i;
 1681              		.loc 1 333 0 is_stmt 0 discriminator 1
 1682 010e D2ED017A 		flds	s15, [r2, #4]
 1683 0112 77EEC77A 		fsubs	s15, s15, s14
 1684 0116 F5EEC07A 		fcmpezs	s15
 1685 011a F1EE10FA 		fmstat
 1686 011e 04D4     		bmi	.L116
 1687              	.L113:
 331:Src/ADCsrc.c  **** 
 1688              		.loc 1 331 0 is_stmt 1 discriminator 2
 1689 0120 0133     		adds	r3, r3, #1
 1690              	.LVL297:
 1691              	.L112:
 331:Src/ADCsrc.c  **** 
 1692              		.loc 1 331 0 is_stmt 0 discriminator 1
 1693 0122 721E     		subs	r2, r6, #1
 1694 0124 9A42     		cmp	r2, r3
 1695 0126 E5D8     		bhi	.L117
 281:Src/ADCsrc.c  **** 
 1696              		.loc 1 281 0 is_stmt 1
 1697 0128 0123     		movs	r3, #1
 1698              	.LVL298:
 1699              	.L116:
 345:Src/ADCsrc.c  **** 
 1700              		.loc 1 345 0
 1701 012a 07EE903A 		fmsr	s15, r3	@ int
 1702 012e F8EE677A 		fuitos	s15, s15
 1703 0132 9FED057A 		flds	s14, .L121
 1704 0136 C7EE277A 		fdivs	s15, s14, s15
 1705 013a C8ED007A 		fsts	s15, [r8]
 352:Src/ADCsrc.c  **** 
 1706              		.loc 1 352 0
 1707 013e 1037     		adds	r7, r7, #16
 1708              	.LCFI7:
 1709              		.cfi_def_cfa_offset 32
 1710 0140 BD46     		mov	sp, r7
 1711              	.LCFI8:
 1712              		.cfi_def_cfa_register 13
 1713              		@ sp needed
 1714 0142 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1715              	.LVL299:
 1716              	.L122:
 1717 0146 00BF     		.align	2
 1718              	.L121:
 1719 0148 00401C46 		.word	1176256512
 1720              		.cfi_endproc
 1721              	.LFE161:
 1723              		.text
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 163


 1724              	.Letext0:
 1725              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi-49/20150925/arm-none-eabi/include/machine/_default_ty
 1726              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi-49/20150925/arm-none-eabi/include/sys/_stdint.h"
 1727              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 1728              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 1729              		.file 7 "<built-in>"
ARM GAS  /var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s 			page 164


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADCsrc.c
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:21     .text.ADC1_Wakeup:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:26     .text.ADC1_Wakeup:0000000000000000 ADC1_Wakeup
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:70     .text.ADC1_Wakeup:000000000000002c $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:75     .text.ADC1_Init:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:80     .text.ADC1_Init:0000000000000000 ADC1_Init
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:216    .text.ADC1_Init:00000000000000f4 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:223    .text.GPIO_Init:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:228    .text.GPIO_Init:0000000000000000 GPIO_Init
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:265    .text.GPIO_Init:0000000000000038 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:270    .text.TIM4_Init:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:275    .text.TIM4_Init:0000000000000000 TIM4_Init
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:334    .text.TIM4_Init:0000000000000064 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:340    .text.ADC_Calibration:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:345    .text.ADC_Calibration:0000000000000000 ADC_Calibration
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:383    .text.ADC_Calibration:0000000000000030 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:388    .text.arm_mean_f32:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:393    .text.arm_mean_f32:0000000000000000 arm_mean_f32
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:475    .text.arm_mean_f32:0000000000000058 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:480    .text.arm_std_f32:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:485    .text.arm_std_f32:0000000000000000 arm_std_f32
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:649    .text.arm_std_f32:00000000000000d4 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:656    .text.arm_max_f32:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:661    .text.arm_max_f32:0000000000000000 arm_max_f32
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:811    .text.arm_correlate_f32:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:816    .text.arm_correlate_f32:0000000000000000 arm_correlate_f32
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:1499   .text.arm_correlate_f32:00000000000003b4 $d
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:1504   .text.findFrequency:0000000000000000 $t
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:1509   .text.findFrequency:0000000000000000 findFrequency
/var/folders/bq/zy6zjhwd1qn4sn8dk3jpjcq80000gn/T//ccXWKjBB.s:1719   .text.findFrequency:0000000000000148 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
sqrtf
