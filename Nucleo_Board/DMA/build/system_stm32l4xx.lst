ARM GAS  /tmp/ccrXr5NB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"system_stm32l4xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	1
  19              		.global	SystemInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	SystemInit:
  27              	.LFB309:
  28              		.file 1 "Src/system_stm32l4xx.c"
   1:Src/system_stm32l4xx.c **** /**
   2:Src/system_stm32l4xx.c ****   ******************************************************************************
   3:Src/system_stm32l4xx.c ****   * @file    system_stm32l4xx.c
   4:Src/system_stm32l4xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32l4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File
   6:Src/system_stm32l4xx.c ****   *
   7:Src/system_stm32l4xx.c ****   *   This file provides two functions and one global variable to be called from
   8:Src/system_stm32l4xx.c ****   *   user application:
   9:Src/system_stm32l4xx.c ****   *      - SystemInit(): This function is called at startup just after reset and
  10:Src/system_stm32l4xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32l4xx.c ****   *                      the "startup_stm32l4xx.s" file.
  12:Src/system_stm32l4xx.c ****   *
  13:Src/system_stm32l4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32l4xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32l4xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32l4xx.c ****   *
  17:Src/system_stm32l4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32l4xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32l4xx.c ****   *                                 during program execution.
  20:Src/system_stm32l4xx.c ****   *
  21:Src/system_stm32l4xx.c ****   *   After each device reset the MSI (4 MHz) is used as system clock source.
  22:Src/system_stm32l4xx.c ****   *   Then SystemInit() function is called, in "startup_stm32l4xx.s" file, to
  23:Src/system_stm32l4xx.c ****   *   configure the system clock before to branch to main program.
  24:Src/system_stm32l4xx.c ****   *
  25:Src/system_stm32l4xx.c ****   *   This file configures the system clock as follows:
  26:Src/system_stm32l4xx.c ****   *=============================================================================
  27:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  28:Src/system_stm32l4xx.c ****   *        System Clock source                    | MSI
  29:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  30:Src/system_stm32l4xx.c ****   *        SYSCLK(Hz)                             | 4000000
ARM GAS  /tmp/ccrXr5NB.s 			page 2


  31:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  32:Src/system_stm32l4xx.c ****   *        HCLK(Hz)                               | 4000000
  33:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  34:Src/system_stm32l4xx.c ****   *        AHB Prescaler                          | 1
  35:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  36:Src/system_stm32l4xx.c ****   *        APB1 Prescaler                         | 1
  37:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  38:Src/system_stm32l4xx.c ****   *        APB2 Prescaler                         | 1
  39:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  40:Src/system_stm32l4xx.c ****   *        PLL_M                                  | 1
  41:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  42:Src/system_stm32l4xx.c ****   *        PLL_N                                  | 8
  43:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  44:Src/system_stm32l4xx.c ****   *        PLL_P                                  | 7
  45:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  46:Src/system_stm32l4xx.c ****   *        PLL_Q                                  | 2
  47:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  48:Src/system_stm32l4xx.c ****   *        PLL_R                                  | 2
  49:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  50:Src/system_stm32l4xx.c ****   *        PLLSAI1_P                              | NA
  51:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  52:Src/system_stm32l4xx.c ****   *        PLLSAI1_Q                              | NA
  53:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  54:Src/system_stm32l4xx.c ****   *        PLLSAI1_R                              | NA
  55:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  56:Src/system_stm32l4xx.c ****   *        PLLSAI2_P                              | NA
  57:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  58:Src/system_stm32l4xx.c ****   *        PLLSAI2_Q                              | NA
  59:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  60:Src/system_stm32l4xx.c ****   *        PLLSAI2_R                              | NA
  61:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  62:Src/system_stm32l4xx.c ****   *        Require 48MHz for USB OTG FS,          | Disabled
  63:Src/system_stm32l4xx.c ****   *        SDIO and RNG clock                     |
  64:Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  65:Src/system_stm32l4xx.c ****   *=============================================================================
  66:Src/system_stm32l4xx.c ****   ******************************************************************************
  67:Src/system_stm32l4xx.c ****   * @attention
  68:Src/system_stm32l4xx.c ****   *
  69:Src/system_stm32l4xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  70:Src/system_stm32l4xx.c ****   *
  71:Src/system_stm32l4xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  72:Src/system_stm32l4xx.c ****   * are permitted provided that the following conditions are met:
  73:Src/system_stm32l4xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  74:Src/system_stm32l4xx.c ****   *      this list of conditions and the following disclaimer.
  75:Src/system_stm32l4xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  76:Src/system_stm32l4xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  77:Src/system_stm32l4xx.c ****   *      and/or other materials provided with the distribution.
  78:Src/system_stm32l4xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  79:Src/system_stm32l4xx.c ****   *      may be used to endorse or promote products derived from this software
  80:Src/system_stm32l4xx.c ****   *      without specific prior written permission.
  81:Src/system_stm32l4xx.c ****   *
  82:Src/system_stm32l4xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  83:Src/system_stm32l4xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  84:Src/system_stm32l4xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  85:Src/system_stm32l4xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  86:Src/system_stm32l4xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  87:Src/system_stm32l4xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccrXr5NB.s 			page 3


  88:Src/system_stm32l4xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  89:Src/system_stm32l4xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  90:Src/system_stm32l4xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  91:Src/system_stm32l4xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  92:Src/system_stm32l4xx.c ****   *
  93:Src/system_stm32l4xx.c ****   ******************************************************************************
  94:Src/system_stm32l4xx.c ****   */
  95:Src/system_stm32l4xx.c **** 
  96:Src/system_stm32l4xx.c **** /** @addtogroup CMSIS
  97:Src/system_stm32l4xx.c ****   * @{
  98:Src/system_stm32l4xx.c ****   */
  99:Src/system_stm32l4xx.c **** 
 100:Src/system_stm32l4xx.c **** /** @addtogroup stm32l4xx_system
 101:Src/system_stm32l4xx.c ****   * @{
 102:Src/system_stm32l4xx.c ****   */
 103:Src/system_stm32l4xx.c **** 
 104:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Includes
 105:Src/system_stm32l4xx.c ****   * @{
 106:Src/system_stm32l4xx.c ****   */
 107:Src/system_stm32l4xx.c **** 
 108:Src/system_stm32l4xx.c **** #include "stm32l4xx.h"
 109:Src/system_stm32l4xx.c **** 
 110:Src/system_stm32l4xx.c **** #if !defined  (HSE_VALUE)
 111:Src/system_stm32l4xx.c ****   #define HSE_VALUE    8000000U  /*!< Value of the External oscillator in Hz */
 112:Src/system_stm32l4xx.c **** #endif /* HSE_VALUE */
 113:Src/system_stm32l4xx.c **** 
 114:Src/system_stm32l4xx.c **** #if !defined  (MSI_VALUE)
 115:Src/system_stm32l4xx.c ****   #define MSI_VALUE    4000000U  /*!< Value of the Internal oscillator in Hz*/
 116:Src/system_stm32l4xx.c **** #endif /* MSI_VALUE */
 117:Src/system_stm32l4xx.c **** 
 118:Src/system_stm32l4xx.c **** #if !defined  (HSI_VALUE)
 119:Src/system_stm32l4xx.c ****   #define HSI_VALUE    16000000U /*!< Value of the Internal oscillator in Hz*/
 120:Src/system_stm32l4xx.c **** #endif /* HSI_VALUE */
 121:Src/system_stm32l4xx.c **** 
 122:Src/system_stm32l4xx.c **** /**
 123:Src/system_stm32l4xx.c ****   * @}
 124:Src/system_stm32l4xx.c ****   */
 125:Src/system_stm32l4xx.c **** 
 126:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_TypesDefinitions
 127:Src/system_stm32l4xx.c ****   * @{
 128:Src/system_stm32l4xx.c ****   */
 129:Src/system_stm32l4xx.c **** 
 130:Src/system_stm32l4xx.c **** /**
 131:Src/system_stm32l4xx.c ****   * @}
 132:Src/system_stm32l4xx.c ****   */
 133:Src/system_stm32l4xx.c **** 
 134:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Defines
 135:Src/system_stm32l4xx.c ****   * @{
 136:Src/system_stm32l4xx.c ****   */
 137:Src/system_stm32l4xx.c **** 
 138:Src/system_stm32l4xx.c **** /************************* Miscellaneous Configuration ************************/
 139:Src/system_stm32l4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:Src/system_stm32l4xx.c ****      Internal SRAM. */
 141:Src/system_stm32l4xx.c **** /* #define VECT_TAB_SRAM */
 142:Src/system_stm32l4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field.
 143:Src/system_stm32l4xx.c ****                                    This value must be a multiple of 0x200. */
 144:Src/system_stm32l4xx.c **** /******************************************************************************/
ARM GAS  /tmp/ccrXr5NB.s 			page 4


 145:Src/system_stm32l4xx.c **** /**
 146:Src/system_stm32l4xx.c ****   * @}
 147:Src/system_stm32l4xx.c ****   */
 148:Src/system_stm32l4xx.c **** 
 149:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Macros
 150:Src/system_stm32l4xx.c ****   * @{
 151:Src/system_stm32l4xx.c ****   */
 152:Src/system_stm32l4xx.c **** 
 153:Src/system_stm32l4xx.c **** /**
 154:Src/system_stm32l4xx.c ****   * @}
 155:Src/system_stm32l4xx.c ****   */
 156:Src/system_stm32l4xx.c **** 
 157:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Variables
 158:Src/system_stm32l4xx.c ****   * @{
 159:Src/system_stm32l4xx.c ****   */
 160:Src/system_stm32l4xx.c ****   /* The SystemCoreClock variable is updated in three ways:
 161:Src/system_stm32l4xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 162:Src/system_stm32l4xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 163:Src/system_stm32l4xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 164:Src/system_stm32l4xx.c ****          Note: If you use this function to configure the system clock; then there
 165:Src/system_stm32l4xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 166:Src/system_stm32l4xx.c ****                variable is updated automatically.
 167:Src/system_stm32l4xx.c ****   */
 168:Src/system_stm32l4xx.c ****   uint32_t SystemCoreClock = 4000000U;
 169:Src/system_stm32l4xx.c **** 
 170:Src/system_stm32l4xx.c ****   const uint8_t  AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9
 171:Src/system_stm32l4xx.c ****   const uint8_t  APBPrescTable[8] =  {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
 172:Src/system_stm32l4xx.c ****   const uint32_t MSIRangeTable[12] = {100000U,   200000U,   400000U,   800000U,  1000000U,  2000000
 173:Src/system_stm32l4xx.c ****                                       4000000U, 8000000U, 16000000U, 24000000U, 32000000U, 48000000
 174:Src/system_stm32l4xx.c **** /**
 175:Src/system_stm32l4xx.c ****   * @}
 176:Src/system_stm32l4xx.c ****   */
 177:Src/system_stm32l4xx.c **** 
 178:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_FunctionPrototypes
 179:Src/system_stm32l4xx.c ****   * @{
 180:Src/system_stm32l4xx.c ****   */
 181:Src/system_stm32l4xx.c **** 
 182:Src/system_stm32l4xx.c **** /**
 183:Src/system_stm32l4xx.c ****   * @}
 184:Src/system_stm32l4xx.c ****   */
 185:Src/system_stm32l4xx.c **** 
 186:Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Functions
 187:Src/system_stm32l4xx.c ****   * @{
 188:Src/system_stm32l4xx.c ****   */
 189:Src/system_stm32l4xx.c **** 
 190:Src/system_stm32l4xx.c **** /**
 191:Src/system_stm32l4xx.c ****   * @brief  Setup the microcontroller system.
 192:Src/system_stm32l4xx.c ****   * @param  None
 193:Src/system_stm32l4xx.c ****   * @retval None
 194:Src/system_stm32l4xx.c ****   */
 195:Src/system_stm32l4xx.c **** 
 196:Src/system_stm32l4xx.c **** void SystemInit(void)
 197:Src/system_stm32l4xx.c **** {
  29              		.loc 1 197 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrXr5NB.s 			page 5


  33              		@ link register save eliminated.
 198:Src/system_stm32l4xx.c ****   /* FPU settings ------------------------------------------------------------*/
 199:Src/system_stm32l4xx.c ****   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 200:Src/system_stm32l4xx.c ****     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  34              		.loc 1 200 5 view .LVU1
  35              		.loc 1 200 16 is_stmt 0 view .LVU2
  36 0000 0F49     		ldr	r1, .L2
  37 0002 D1F88830 		ldr	r3, [r1, #136]
  38 0006 43F47003 		orr	r3, r3, #15728640
  39 000a C1F88830 		str	r3, [r1, #136]
 201:Src/system_stm32l4xx.c ****   #endif
 202:Src/system_stm32l4xx.c **** 
 203:Src/system_stm32l4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 204:Src/system_stm32l4xx.c ****   /* Set MSION bit */
 205:Src/system_stm32l4xx.c ****   RCC->CR |= RCC_CR_MSION;
  40              		.loc 1 205 3 is_stmt 1 view .LVU3
  41              		.loc 1 205 11 is_stmt 0 view .LVU4
  42 000e 0D4B     		ldr	r3, .L2+4
  43 0010 1A68     		ldr	r2, [r3]
  44 0012 42F00102 		orr	r2, r2, #1
  45 0016 1A60     		str	r2, [r3]
 206:Src/system_stm32l4xx.c **** 
 207:Src/system_stm32l4xx.c ****   /* Reset CFGR register */
 208:Src/system_stm32l4xx.c ****   RCC->CFGR = 0x00000000U;
  46              		.loc 1 208 3 is_stmt 1 view .LVU5
  47              		.loc 1 208 13 is_stmt 0 view .LVU6
  48 0018 0020     		movs	r0, #0
  49 001a 9860     		str	r0, [r3, #8]
 209:Src/system_stm32l4xx.c **** 
 210:Src/system_stm32l4xx.c ****   /* Reset HSEON, CSSON , HSION, and PLLON bits */
 211:Src/system_stm32l4xx.c ****   RCC->CR &= 0xEAF6FFFFU;
  50              		.loc 1 211 3 is_stmt 1 view .LVU7
  51              		.loc 1 211 11 is_stmt 0 view .LVU8
  52 001c 1A68     		ldr	r2, [r3]
  53 001e 22F0A852 		bic	r2, r2, #352321536
  54 0022 22F41022 		bic	r2, r2, #589824
  55 0026 1A60     		str	r2, [r3]
 212:Src/system_stm32l4xx.c **** 
 213:Src/system_stm32l4xx.c ****   /* Reset PLLCFGR register */
 214:Src/system_stm32l4xx.c ****   RCC->PLLCFGR = 0x00001000U;
  56              		.loc 1 214 3 is_stmt 1 view .LVU9
  57              		.loc 1 214 16 is_stmt 0 view .LVU10
  58 0028 4FF48052 		mov	r2, #4096
  59 002c DA60     		str	r2, [r3, #12]
 215:Src/system_stm32l4xx.c **** 
 216:Src/system_stm32l4xx.c ****   /* Reset HSEBYP bit */
 217:Src/system_stm32l4xx.c ****   RCC->CR &= 0xFFFBFFFFU;
  60              		.loc 1 217 3 is_stmt 1 view .LVU11
  61              		.loc 1 217 11 is_stmt 0 view .LVU12
  62 002e 1A68     		ldr	r2, [r3]
  63 0030 22F48022 		bic	r2, r2, #262144
  64 0034 1A60     		str	r2, [r3]
 218:Src/system_stm32l4xx.c **** 
 219:Src/system_stm32l4xx.c ****   /* Disable all interrupts */
 220:Src/system_stm32l4xx.c ****   RCC->CIER = 0x00000000U;
  65              		.loc 1 220 3 is_stmt 1 view .LVU13
  66              		.loc 1 220 13 is_stmt 0 view .LVU14
ARM GAS  /tmp/ccrXr5NB.s 			page 6


  67 0036 9861     		str	r0, [r3, #24]
 221:Src/system_stm32l4xx.c **** 
 222:Src/system_stm32l4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 223:Src/system_stm32l4xx.c **** #ifdef VECT_TAB_SRAM
 224:Src/system_stm32l4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 225:Src/system_stm32l4xx.c **** #else
 226:Src/system_stm32l4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  68              		.loc 1 226 3 is_stmt 1 view .LVU15
  69              		.loc 1 226 13 is_stmt 0 view .LVU16
  70 0038 4FF00063 		mov	r3, #134217728
  71 003c 8B60     		str	r3, [r1, #8]
 227:Src/system_stm32l4xx.c **** #endif
 228:Src/system_stm32l4xx.c **** }
  72              		.loc 1 228 1 view .LVU17
  73 003e 7047     		bx	lr
  74              	.L3:
  75              		.align	2
  76              	.L2:
  77 0040 00ED00E0 		.word	-536810240
  78 0044 00100240 		.word	1073876992
  79              		.cfi_endproc
  80              	.LFE309:
  82              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  83              		.align	1
  84              		.global	SystemCoreClockUpdate
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	SystemCoreClockUpdate:
  91              	.LFB310:
 229:Src/system_stm32l4xx.c **** 
 230:Src/system_stm32l4xx.c **** /**
 231:Src/system_stm32l4xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 232:Src/system_stm32l4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 233:Src/system_stm32l4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 234:Src/system_stm32l4xx.c ****   *         other parameters.
 235:Src/system_stm32l4xx.c ****   *
 236:Src/system_stm32l4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 237:Src/system_stm32l4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 238:Src/system_stm32l4xx.c ****   *         based on this variable will be incorrect.
 239:Src/system_stm32l4xx.c ****   *
 240:Src/system_stm32l4xx.c ****   * @note   - The system frequency computed by this function is not the real
 241:Src/system_stm32l4xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 242:Src/system_stm32l4xx.c ****   *           constant and the selected clock source:
 243:Src/system_stm32l4xx.c ****   *
 244:Src/system_stm32l4xx.c ****   *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI_VALUE(*)
 245:Src/system_stm32l4xx.c ****   *
 246:Src/system_stm32l4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(**)
 247:Src/system_stm32l4xx.c ****   *
 248:Src/system_stm32l4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(***)
 249:Src/system_stm32l4xx.c ****   *
 250:Src/system_stm32l4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(***)
 251:Src/system_stm32l4xx.c ****   *             or HSI_VALUE(*) or MSI_VALUE(*) multiplied/divided by the PLL factors.
 252:Src/system_stm32l4xx.c ****   *
 253:Src/system_stm32l4xx.c ****   *         (*) MSI_VALUE is a constant defined in stm32l4xx_hal.h file (default value
 254:Src/system_stm32l4xx.c ****   *             4 MHz) but the real value may vary depending on the variations
ARM GAS  /tmp/ccrXr5NB.s 			page 7


 255:Src/system_stm32l4xx.c ****   *             in voltage and temperature.
 256:Src/system_stm32l4xx.c ****   *
 257:Src/system_stm32l4xx.c ****   *         (**) HSI_VALUE is a constant defined in stm32l4xx_hal.h file (default value
 258:Src/system_stm32l4xx.c ****   *              16 MHz) but the real value may vary depending on the variations
 259:Src/system_stm32l4xx.c ****   *              in voltage and temperature.
 260:Src/system_stm32l4xx.c ****   *
 261:Src/system_stm32l4xx.c ****   *         (***) HSE_VALUE is a constant defined in stm32l4xx_hal.h file (default value
 262:Src/system_stm32l4xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 263:Src/system_stm32l4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 264:Src/system_stm32l4xx.c ****   *              have wrong result.
 265:Src/system_stm32l4xx.c ****   *
 266:Src/system_stm32l4xx.c ****   *         - The result of this function could be not correct when using fractional
 267:Src/system_stm32l4xx.c ****   *           value for HSE crystal.
 268:Src/system_stm32l4xx.c ****   *
 269:Src/system_stm32l4xx.c ****   * @param  None
 270:Src/system_stm32l4xx.c ****   * @retval None
 271:Src/system_stm32l4xx.c ****   */
 272:Src/system_stm32l4xx.c **** void SystemCoreClockUpdate(void)
 273:Src/system_stm32l4xx.c **** {
  92              		.loc 1 273 1 is_stmt 1 view -0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
 274:Src/system_stm32l4xx.c ****   uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
  97              		.loc 1 274 3 view .LVU19
  98              	.LVL0:
 275:Src/system_stm32l4xx.c **** 
 276:Src/system_stm32l4xx.c ****   /* Get MSI Range frequency--------------------------------------------------*/
 277:Src/system_stm32l4xx.c ****   if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
  99              		.loc 1 277 3 view .LVU20
 100              		.loc 1 277 10 is_stmt 0 view .LVU21
 101 0000 2F4B     		ldr	r3, .L19
 102 0002 1B68     		ldr	r3, [r3]
 103              		.loc 1 277 5 view .LVU22
 104 0004 13F0080F 		tst	r3, #8
 105 0008 16D1     		bne	.L5
 278:Src/system_stm32l4xx.c ****   { /* MSISRANGE from RCC_CSR applies */
 279:Src/system_stm32l4xx.c ****     msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 106              		.loc 1 279 5 is_stmt 1 view .LVU23
 107              		.loc 1 279 20 is_stmt 0 view .LVU24
 108 000a 2D4B     		ldr	r3, .L19
 109 000c D3F89430 		ldr	r3, [r3, #148]
 110              		.loc 1 279 14 view .LVU25
 111 0010 C3F30323 		ubfx	r3, r3, #8, #4
 112              	.LVL1:
 113              	.L6:
 280:Src/system_stm32l4xx.c ****   }
 281:Src/system_stm32l4xx.c ****   else
 282:Src/system_stm32l4xx.c ****   { /* MSIRANGE from RCC_CR applies */
 283:Src/system_stm32l4xx.c ****     msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 284:Src/system_stm32l4xx.c ****   }
 285:Src/system_stm32l4xx.c ****   /*MSI frequency range in HZ*/
 286:Src/system_stm32l4xx.c ****   msirange = MSIRangeTable[msirange];
 114              		.loc 1 286 3 is_stmt 1 view .LVU26
 115              		.loc 1 286 12 is_stmt 0 view .LVU27
 116 0014 2B4A     		ldr	r2, .L19+4
ARM GAS  /tmp/ccrXr5NB.s 			page 8


 117 0016 52F82310 		ldr	r1, [r2, r3, lsl #2]
 118              	.LVL2:
 287:Src/system_stm32l4xx.c **** 
 288:Src/system_stm32l4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 289:Src/system_stm32l4xx.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 119              		.loc 1 289 3 is_stmt 1 view .LVU28
 120              		.loc 1 289 14 is_stmt 0 view .LVU29
 121 001a 294A     		ldr	r2, .L19
 122 001c 9368     		ldr	r3, [r2, #8]
 123              		.loc 1 289 21 view .LVU30
 124 001e 03F00C03 		and	r3, r3, #12
 125 0022 0C2B     		cmp	r3, #12
 126 0024 48D8     		bhi	.L7
 127 0026 DFE803F0 		tbb	[pc, r3]
 128              	.L9:
 129 002a 0C       		.byte	(.L12-.L9)/2
 130 002b 47       		.byte	(.L7-.L9)/2
 131 002c 47       		.byte	(.L7-.L9)/2
 132 002d 47       		.byte	(.L7-.L9)/2
 133 002e 19       		.byte	(.L11-.L9)/2
 134 002f 47       		.byte	(.L7-.L9)/2
 135 0030 47       		.byte	(.L7-.L9)/2
 136 0031 47       		.byte	(.L7-.L9)/2
 137 0032 1D       		.byte	(.L10-.L9)/2
 138 0033 47       		.byte	(.L7-.L9)/2
 139 0034 47       		.byte	(.L7-.L9)/2
 140 0035 47       		.byte	(.L7-.L9)/2
 141 0036 21       		.byte	(.L8-.L9)/2
 142              	.LVL3:
 143 0037 00       		.p2align 1
 144              	.L5:
 283:Src/system_stm32l4xx.c ****   }
 145              		.loc 1 283 5 is_stmt 1 view .LVU31
 283:Src/system_stm32l4xx.c ****   }
 146              		.loc 1 283 20 is_stmt 0 view .LVU32
 147 0038 214B     		ldr	r3, .L19
 148 003a 1B68     		ldr	r3, [r3]
 283:Src/system_stm32l4xx.c ****   }
 149              		.loc 1 283 14 view .LVU33
 150 003c C3F30313 		ubfx	r3, r3, #4, #4
 151              	.LVL4:
 283:Src/system_stm32l4xx.c ****   }
 152              		.loc 1 283 14 view .LVU34
 153 0040 E8E7     		b	.L6
 154              	.LVL5:
 155              	.L12:
 290:Src/system_stm32l4xx.c ****   {
 291:Src/system_stm32l4xx.c ****     case 0x00:  /* MSI used as system clock source */
 292:Src/system_stm32l4xx.c ****       SystemCoreClock = msirange;
 156              		.loc 1 292 7 is_stmt 1 view .LVU35
 157              		.loc 1 292 23 is_stmt 0 view .LVU36
 158 0042 214B     		ldr	r3, .L19+8
 159 0044 1960     		str	r1, [r3]
 293:Src/system_stm32l4xx.c ****       break;
 160              		.loc 1 293 7 is_stmt 1 view .LVU37
 161              	.LVL6:
 162              	.L13:
ARM GAS  /tmp/ccrXr5NB.s 			page 9


 294:Src/system_stm32l4xx.c **** 
 295:Src/system_stm32l4xx.c ****     case 0x04:  /* HSI used as system clock source */
 296:Src/system_stm32l4xx.c ****       SystemCoreClock = HSI_VALUE;
 297:Src/system_stm32l4xx.c ****       break;
 298:Src/system_stm32l4xx.c **** 
 299:Src/system_stm32l4xx.c ****     case 0x08:  /* HSE used as system clock source */
 300:Src/system_stm32l4xx.c ****       SystemCoreClock = HSE_VALUE;
 301:Src/system_stm32l4xx.c ****       break;
 302:Src/system_stm32l4xx.c **** 
 303:Src/system_stm32l4xx.c ****     case 0x0C:  /* PLL used as system clock  source */
 304:Src/system_stm32l4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
 305:Src/system_stm32l4xx.c ****          SYSCLK = PLL_VCO / PLLR
 306:Src/system_stm32l4xx.c ****          */
 307:Src/system_stm32l4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 308:Src/system_stm32l4xx.c ****       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 309:Src/system_stm32l4xx.c **** 
 310:Src/system_stm32l4xx.c ****       switch (pllsource)
 311:Src/system_stm32l4xx.c ****       {
 312:Src/system_stm32l4xx.c ****         case 0x02:  /* HSI used as PLL clock source */
 313:Src/system_stm32l4xx.c ****           pllvco = (HSI_VALUE / pllm);
 314:Src/system_stm32l4xx.c ****           break;
 315:Src/system_stm32l4xx.c **** 
 316:Src/system_stm32l4xx.c ****         case 0x03:  /* HSE used as PLL clock source */
 317:Src/system_stm32l4xx.c ****           pllvco = (HSE_VALUE / pllm);
 318:Src/system_stm32l4xx.c ****           break;
 319:Src/system_stm32l4xx.c **** 
 320:Src/system_stm32l4xx.c ****         default:    /* MSI used as PLL clock source */
 321:Src/system_stm32l4xx.c ****           pllvco = (msirange / pllm);
 322:Src/system_stm32l4xx.c ****           break;
 323:Src/system_stm32l4xx.c ****       }
 324:Src/system_stm32l4xx.c ****       pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 325:Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 326:Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 327:Src/system_stm32l4xx.c ****       break;
 328:Src/system_stm32l4xx.c **** 
 329:Src/system_stm32l4xx.c ****     default:
 330:Src/system_stm32l4xx.c ****       SystemCoreClock = msirange;
 331:Src/system_stm32l4xx.c ****       break;
 332:Src/system_stm32l4xx.c ****   }
 333:Src/system_stm32l4xx.c ****   /* Compute HCLK clock frequency --------------------------------------------*/
 334:Src/system_stm32l4xx.c ****   /* Get HCLK prescaler */
 335:Src/system_stm32l4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 163              		.loc 1 335 3 view .LVU38
 164              		.loc 1 335 28 is_stmt 0 view .LVU39
 165 0046 1E4B     		ldr	r3, .L19
 166 0048 9B68     		ldr	r3, [r3, #8]
 167              		.loc 1 335 52 view .LVU40
 168 004a C3F30313 		ubfx	r3, r3, #4, #4
 169              		.loc 1 335 22 view .LVU41
 170 004e 1F4A     		ldr	r2, .L19+12
 171 0050 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 172              	.LVL7:
 336:Src/system_stm32l4xx.c ****   /* HCLK clock frequency */
 337:Src/system_stm32l4xx.c ****   SystemCoreClock >>= tmp;
 173              		.loc 1 337 3 is_stmt 1 view .LVU42
 174              		.loc 1 337 19 is_stmt 0 view .LVU43
 175 0052 1D4A     		ldr	r2, .L19+8
ARM GAS  /tmp/ccrXr5NB.s 			page 10


 176 0054 1368     		ldr	r3, [r2]
 177 0056 CB40     		lsrs	r3, r3, r1
 178 0058 1360     		str	r3, [r2]
 338:Src/system_stm32l4xx.c **** }
 179              		.loc 1 338 1 view .LVU44
 180 005a 7047     		bx	lr
 181              	.LVL8:
 182              	.L11:
 296:Src/system_stm32l4xx.c ****       break;
 183              		.loc 1 296 7 is_stmt 1 view .LVU45
 296:Src/system_stm32l4xx.c ****       break;
 184              		.loc 1 296 23 is_stmt 0 view .LVU46
 185 005c 1A4B     		ldr	r3, .L19+8
 186 005e 1C4A     		ldr	r2, .L19+16
 187 0060 1A60     		str	r2, [r3]
 297:Src/system_stm32l4xx.c **** 
 188              		.loc 1 297 7 is_stmt 1 view .LVU47
 189 0062 F0E7     		b	.L13
 190              	.L10:
 300:Src/system_stm32l4xx.c ****       break;
 191              		.loc 1 300 7 view .LVU48
 300:Src/system_stm32l4xx.c ****       break;
 192              		.loc 1 300 23 is_stmt 0 view .LVU49
 193 0064 184B     		ldr	r3, .L19+8
 194 0066 1B4A     		ldr	r2, .L19+20
 195 0068 1A60     		str	r2, [r3]
 301:Src/system_stm32l4xx.c **** 
 196              		.loc 1 301 7 is_stmt 1 view .LVU50
 197 006a ECE7     		b	.L13
 198              	.L8:
 307:Src/system_stm32l4xx.c ****       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 199              		.loc 1 307 7 view .LVU51
 307:Src/system_stm32l4xx.c ****       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 200              		.loc 1 307 23 is_stmt 0 view .LVU52
 201 006c 144B     		ldr	r3, .L19
 202 006e DA68     		ldr	r2, [r3, #12]
 307:Src/system_stm32l4xx.c ****       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 203              		.loc 1 307 17 view .LVU53
 204 0070 02F00302 		and	r2, r2, #3
 205              	.LVL9:
 308:Src/system_stm32l4xx.c **** 
 206              		.loc 1 308 7 is_stmt 1 view .LVU54
 308:Src/system_stm32l4xx.c **** 
 207              		.loc 1 308 19 is_stmt 0 view .LVU55
 208 0074 DB68     		ldr	r3, [r3, #12]
 308:Src/system_stm32l4xx.c **** 
 209              		.loc 1 308 49 view .LVU56
 210 0076 C3F30213 		ubfx	r3, r3, #4, #3
 308:Src/system_stm32l4xx.c **** 
 211              		.loc 1 308 12 view .LVU57
 212 007a 0133     		adds	r3, r3, #1
 213              	.LVL10:
 310:Src/system_stm32l4xx.c ****       {
 214              		.loc 1 310 7 is_stmt 1 view .LVU58
 215 007c 022A     		cmp	r2, #2
 216 007e 04D0     		beq	.L14
 217 0080 032A     		cmp	r2, #3
ARM GAS  /tmp/ccrXr5NB.s 			page 11


 218 0082 15D0     		beq	.L15
 321:Src/system_stm32l4xx.c ****           break;
 219              		.loc 1 321 11 view .LVU59
 321:Src/system_stm32l4xx.c ****           break;
 220              		.loc 1 321 18 is_stmt 0 view .LVU60
 221 0084 B1FBF3F3 		udiv	r3, r1, r3
 222              	.LVL11:
 322:Src/system_stm32l4xx.c ****       }
 223              		.loc 1 322 11 is_stmt 1 view .LVU61
 224 0088 02E0     		b	.L17
 225              	.LVL12:
 226              	.L14:
 313:Src/system_stm32l4xx.c ****           break;
 227              		.loc 1 313 11 view .LVU62
 313:Src/system_stm32l4xx.c ****           break;
 228              		.loc 1 313 18 is_stmt 0 view .LVU63
 229 008a 114A     		ldr	r2, .L19+16
 230              	.LVL13:
 313:Src/system_stm32l4xx.c ****           break;
 231              		.loc 1 313 18 view .LVU64
 232 008c B2FBF3F3 		udiv	r3, r2, r3
 233              	.LVL14:
 314:Src/system_stm32l4xx.c **** 
 234              		.loc 1 314 11 is_stmt 1 view .LVU65
 235              	.L17:
 324:Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 236              		.loc 1 324 7 view .LVU66
 324:Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 237              		.loc 1 324 30 is_stmt 0 view .LVU67
 238 0090 0B49     		ldr	r1, .L19
 239              	.LVL15:
 324:Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 240              		.loc 1 324 30 view .LVU68
 241 0092 CA68     		ldr	r2, [r1, #12]
 324:Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 242              		.loc 1 324 60 view .LVU69
 243 0094 C2F30622 		ubfx	r2, r2, #8, #7
 324:Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 244              		.loc 1 324 14 view .LVU70
 245 0098 03FB02F3 		mul	r3, r3, r2
 246              	.LVL16:
 325:Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 247              		.loc 1 325 7 is_stmt 1 view .LVU71
 325:Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 248              		.loc 1 325 20 is_stmt 0 view .LVU72
 249 009c CA68     		ldr	r2, [r1, #12]
 325:Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 250              		.loc 1 325 50 view .LVU73
 251 009e C2F34162 		ubfx	r2, r2, #25, #2
 325:Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 252              		.loc 1 325 58 view .LVU74
 253 00a2 0132     		adds	r2, r2, #1
 325:Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 254              		.loc 1 325 12 view .LVU75
 255 00a4 5200     		lsls	r2, r2, #1
 256              	.LVL17:
 326:Src/system_stm32l4xx.c ****       break;
ARM GAS  /tmp/ccrXr5NB.s 			page 12


 257              		.loc 1 326 7 is_stmt 1 view .LVU76
 326:Src/system_stm32l4xx.c ****       break;
 258              		.loc 1 326 31 is_stmt 0 view .LVU77
 259 00a6 B3FBF2F3 		udiv	r3, r3, r2
 260              	.LVL18:
 326:Src/system_stm32l4xx.c ****       break;
 261              		.loc 1 326 23 view .LVU78
 262 00aa 074A     		ldr	r2, .L19+8
 263              	.LVL19:
 326:Src/system_stm32l4xx.c ****       break;
 264              		.loc 1 326 23 view .LVU79
 265 00ac 1360     		str	r3, [r2]
 327:Src/system_stm32l4xx.c **** 
 266              		.loc 1 327 7 is_stmt 1 view .LVU80
 267 00ae CAE7     		b	.L13
 268              	.LVL20:
 269              	.L15:
 317:Src/system_stm32l4xx.c ****           break;
 270              		.loc 1 317 11 view .LVU81
 317:Src/system_stm32l4xx.c ****           break;
 271              		.loc 1 317 18 is_stmt 0 view .LVU82
 272 00b0 084A     		ldr	r2, .L19+20
 273              	.LVL21:
 317:Src/system_stm32l4xx.c ****           break;
 274              		.loc 1 317 18 view .LVU83
 275 00b2 B2FBF3F3 		udiv	r3, r2, r3
 276              	.LVL22:
 318:Src/system_stm32l4xx.c **** 
 277              		.loc 1 318 11 is_stmt 1 view .LVU84
 278 00b6 EBE7     		b	.L17
 279              	.LVL23:
 280              	.L7:
 330:Src/system_stm32l4xx.c ****       break;
 281              		.loc 1 330 7 view .LVU85
 330:Src/system_stm32l4xx.c ****       break;
 282              		.loc 1 330 23 is_stmt 0 view .LVU86
 283 00b8 034B     		ldr	r3, .L19+8
 284 00ba 1960     		str	r1, [r3]
 331:Src/system_stm32l4xx.c ****   }
 285              		.loc 1 331 7 is_stmt 1 view .LVU87
 286 00bc C3E7     		b	.L13
 287              	.L20:
 288 00be 00BF     		.align	2
 289              	.L19:
 290 00c0 00100240 		.word	1073876992
 291 00c4 00000000 		.word	.LANCHOR0
 292 00c8 00000000 		.word	.LANCHOR1
 293 00cc 00000000 		.word	.LANCHOR2
 294 00d0 0024F400 		.word	16000000
 295 00d4 00127A00 		.word	8000000
 296              		.cfi_endproc
 297              	.LFE310:
 299              		.global	MSIRangeTable
 300              		.global	APBPrescTable
 301              		.global	AHBPrescTable
 302              		.global	SystemCoreClock
 303              		.section	.data.SystemCoreClock,"aw"
ARM GAS  /tmp/ccrXr5NB.s 			page 13


 304              		.align	2
 305              		.set	.LANCHOR1,. + 0
 308              	SystemCoreClock:
 309 0000 00093D00 		.word	4000000
 310              		.section	.rodata.AHBPrescTable,"a"
 311              		.align	2
 312              		.set	.LANCHOR2,. + 0
 315              	AHBPrescTable:
 316 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\001\002\003\004\006"
 316      00000000 
 316      01020304 
 316      06
 317 000d 070809   		.ascii	"\007\010\011"
 318              		.section	.rodata.APBPrescTable,"a"
 319              		.align	2
 322              	APBPrescTable:
 323 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004"
 323      01020304 
 324              		.section	.rodata.MSIRangeTable,"a"
 325              		.align	2
 326              		.set	.LANCHOR0,. + 0
 329              	MSIRangeTable:
 330 0000 A0860100 		.word	100000
 331 0004 400D0300 		.word	200000
 332 0008 801A0600 		.word	400000
 333 000c 00350C00 		.word	800000
 334 0010 40420F00 		.word	1000000
 335 0014 80841E00 		.word	2000000
 336 0018 00093D00 		.word	4000000
 337 001c 00127A00 		.word	8000000
 338 0020 0024F400 		.word	16000000
 339 0024 00366E01 		.word	24000000
 340 0028 0048E801 		.word	32000000
 341 002c 006CDC02 		.word	48000000
 342              		.text
 343              	.Letext0:
 344              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 345              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 346              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 347              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 348              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 349              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 350              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 351              		.file 9 "/usr/lib/gcc/arm-none-eabi/9.2.0/include/stddef.h"
 352              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 353              		.file 11 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
ARM GAS  /tmp/ccrXr5NB.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32l4xx.c
     /tmp/ccrXr5NB.s:18     .text.SystemInit:0000000000000000 $t
     /tmp/ccrXr5NB.s:26     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccrXr5NB.s:77     .text.SystemInit:0000000000000040 $d
     /tmp/ccrXr5NB.s:83     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccrXr5NB.s:90     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccrXr5NB.s:129    .text.SystemCoreClockUpdate:000000000000002a $d
     /tmp/ccrXr5NB.s:290    .text.SystemCoreClockUpdate:00000000000000c0 $d
     /tmp/ccrXr5NB.s:329    .rodata.MSIRangeTable:0000000000000000 MSIRangeTable
     /tmp/ccrXr5NB.s:322    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccrXr5NB.s:315    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccrXr5NB.s:308    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccrXr5NB.s:304    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccrXr5NB.s:311    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccrXr5NB.s:319    .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccrXr5NB.s:325    .rodata.MSIRangeTable:0000000000000000 $d
     /tmp/ccrXr5NB.s:143    .text.SystemCoreClockUpdate:0000000000000037 $d
     /tmp/ccrXr5NB.s:143    .text.SystemCoreClockUpdate:0000000000000038 $t

NO UNDEFINED SYMBOLS
